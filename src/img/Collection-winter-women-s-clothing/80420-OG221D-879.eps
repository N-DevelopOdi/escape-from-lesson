%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: FR-FLAT WINTER CLOTHES up-02.eps
%%Creator: Adobe Illustrator(R) 20.1
%%For: Ayib
%%CreationDate: 11/3/16
%%BoundingBox: 0 0 800 800
%%HiResBoundingBox: 0 0 800 800
%%CropBox: 0 0 800 800
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 20.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 20.1.0 x174 R agm 4.7740 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 2 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c132 79.159284, 2016/04/19-13:13:40        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">FR-FLAT WINTER CLOTHES AND ESSENTIALS-2</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2016-11-03T14:12:17+07:00</xmp:MetadataDate>
         <xmp:ModifyDate>2016-11-03T14:12:17+07:00</xmp:ModifyDate>
         <xmp:CreateDate>2016-11-03T14:12:16+07:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 2015.3 (Macintosh)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>128</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEAlgCWAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAAlgAAAAEA&#xA;AQCWAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAgAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A5XT57fwzIcVx+nFW9+m/&#xA;hirW4H+fyxVvceI/zriqpaWsl1dQ20VBJO6Rpy6cnYKK+1TirI778vNcsozLcuiRry5MI7p6BBVi&#xA;eMJoAOp6YOJlwqK+SdSa5Ns80cMqgl/WiuoFQKGJZ3kgRVUCJ92I+yfDG0cKuPy58wGVolHJlXk3&#xA;GC8K09Iz05CAry9Na8a17ddseJPCUDJ5VvI0mZp0BhRndWhu491iabhykgRQzRqSoJFcbRSSU37+&#xA;Hj1wod13374q3Sp7/wC3irXX7sVd0+X9cVZh+UII/Mvy9/zFj8FOCXJlHm1+b3/ky/MPj9bP/ERj&#xA;HksubEPfthYuxV38MVd8u+KuxVk8P5ea7Lp8N+rRm3miSdSEuHPFwKD4Imq1TSgrvg4mXChrnybq&#xA;Nqkj3L+ikQVpWktr5QoYVUsTbilR442ikTc/l7rVuqPJJGySySQo0UdzKDJCnOVKxwt8SLXkO1D3&#xA;U0eJPCoah5K1PT2mF9ItuLZik7vBeBFKkKav6HHqw3r3GNo4Uku7aW1uprWSnqQSNG9OlUJU0PzG&#xA;FClirsVdirv44q7FXfd/tYq40xV3+f3Yq7tirvx/sxVEaddCz1C1uyvMW8scpQGleDBqV+jFWWT/&#xA;AJjapPbSW0uoXckMqiN1aO2NQvTfjtkeFlxO1D8xLzUZY5Ly5nm9NQvAw2wVgIpIaMoUA1jndT41&#xA;+WPCvE2fzGv2gSBrqYpHx4H0LQFeEbxLSibcY5pF/wBkceFeJZqn5g3Wpw3KX001ybj1ZOLR28YE&#xA;slu1uGHBQVFHqQvXHhUyYb3/AAyTF3yp40xV3yxV3virv864qy/8of8AyZfl7/mLX/iJwS5Mo83f&#xA;m9/5MvzD/wAxZ/4iMY8llzYh3wsXd8VaxVvxxV2KszsfzF1GytbW3tby5t4reOONYVWB0DJEI2I5&#xA;qTRiC2+R4WXEsvvP93faZd6bc3Vw9pfCIXSCK2Uv6AiWP4goYUFvGNv5RjwrxNSeepXSSMzSiOZp&#xA;XlUQ2oDmdeM3Ki7+p1b3xpeJW1L8yNQ1LSJdIvbqeWxnIMiehaqxIkMgPMIGHxMfvx4V4mJajdC7&#xA;v7m7C8BcTSSha1pzYtT8ckxQ+KuxVwxVrFW++Kt7/wBf44q0f86/hiqa6H5d1LWJH+rLwii3lneo&#xA;RT4VFSWOQnkEeaCaRGs+T9U0u1+suVngBpI0Vfgr05AjoTkYZhI0oKR796/R+OWpa+fSm+Ku3+mv&#xA;01xVnOiflLr2oWEd/dTw6bBMvKBJuTSspFQeCg0G/c19sxsmrjE1zcrHpJSF8kv81/l3rvl23S8m&#xA;aO7sHYILu3JKq3QBwwBWv3e+SxaiM9hzYZdPKHPkxevWtcvaHb1/p44q5QxICgknoBufwxV246V/&#xA;j7Yq4q3ENQ8TWh6D5DFWt6d6/wCdMVZh+UJJ/Mvy/wD8xYp/wJwS5Mo82vze/wDJl+YT4XZ/4iMY&#xA;8llzYh7YWLvbxxV6N5e/LTSb/RIbu5vZRcXSJLG0QURoCtSjAhifn+GYs9QQaYcSPh/KLRY5Fa41&#xA;KWWIblIV4sfarpTB+ZKeIMG84eXYdB1QWkM5mjkQSpyADKpJADEbHp1oMvxT4haYm1PRvLk2pJ6z&#xA;SiKKpFacmNOu2wy1SWReYvy8s7ODTrnT7qRre9gDkzANSVCUmQcQmysNtsjE3YTLamx+XVmPLsV9&#xA;JdyreXEzR244r6ZjjHxvx+19ohfteON70vS2Iarpk2nXPoSMr8hyVl6EVp0ySAVXy/oOoa7qcem2&#xA;AX6xIrtVzxULGhdiSAey+GQnMRFtmOHHIR72d2v5W6Rb6ILzVLq4luBP6UotCirGrJyTaRWLcirb&#xA;1HyzV/yoCOIDa3ejsCQnwGQsi/LzCzWvyiY3FnHodwedzFEz212fiV5d1HNEUfZIJqu2WR7SHEIk&#xA;blpn2NLw5ZIyHDEn413PNyrBirAhgaEEbg5snStfwxV3t44q7bFUfoNkt7rVnasAySyoJB1+EGrf&#xA;8KDkZmokoL3Ww0uy+rejCqwxgcUiRQoBG1aCnfNdz5tYXJpkcVpSQ/vnJ5DqCOlN/bFS8g/MLTIL&#xA;LXQ0EKQQ3ESyBEAVQ1SrbCngDmbglcWcTsxgU6Zcyem/lT+W+l69aPrGqvIYYZikFolFV/TCsWdj&#xA;UlatSgp065h6nUGJoOZpsAkLL1rXIS0cTj7KkqQKjruOnyzWl2kVraRZ32gzWN9H6ltdofWStDQ7&#xA;gg9jsCPfJQkYmw15AJWC8I/MnyVB5V1mK3tJnmsrmMyQvJTkpDEMhIoGptvQdc2unzccbPN1WfFw&#xA;HbkxHbL2h6Boei2VlAsiLzuGHxyt136geAwsbRsljbO3JkFfkD+sYUNz2NpPAYJoleI/sn9Y8MVY&#xA;BrenxWN+8ETFoqBkLdaHttgZBkP5Q0/5WX5f/wCYsf8AETkZcmcebX5vf+TL8w/8xZ/4iMY8llzY&#xA;h7YWLsVewflrffWfLEcZPxWsjwn5V5j8HzBzipNUxuyrKWLxXz5ffXPNN6QQUgYQJ7emOLD/AIOu&#xA;Z+EVENseSeeWkMem2q0+0pY/7IlsuQebNbG3k1by5d6dGpkvLGRbu0QVLMjkRzKO1BVWyuW0rbIi&#xA;40o+Y2jiu49OhIMOmxLbAjYFxvK1PEuThx8r70ZOddzzjzjGeVtJ1rzUn7iMmWMWZf8AOPOlifzH&#xA;qOoMvJLS1EQr0Dzvt/wsbDMfOdnIwjdmtmbIyzWt5U2M44yhTv8AA3NCD81pnLYJxjIiX0l9A1mO&#xA;coCUP7yPL47H8eSN0GZrrzNDNIATI8jkdgeDEfdlmmlx5gT5tHaGMY9IYjoAPtDwbz/pn6N866zZ&#xA;gBUS6keNelElPqJ/wrjOqgbAeCmKLH8kxbxVv/MfTirKvy2tDN5h9Y/ZtoWcH/KakY/BjlGoPpYy&#xA;5PXdFkN2ZRAK+kZUr8PVKKx3r0ZvnmGRSwxSPJX1aC7s7KW5lSvpRu5YFTUIhf59FxG5TLDIc3mn&#xA;5oWoksrC+TcK7Rch3Ei8l/4hmRpjuQxg87/pmWzfTP5b6YdO8n6Rb0o0sXrzDoaz1l3+XIDNNqJX&#xA;Mu3wRqAZJdWkMsLhhSqnfrt1/hlFty6G3i9IEipcVbc0NfuxtXl/566d9Z8v2OpKtXtZyjU7JOtS&#xA;f+CjXM/RSqRDh6yNxBeKW6epcRp15uo7dzTNi656XbE0YdtskwVsVaY0UkdQMVYT5uQi9hkH7UdK&#xA;/wCqx/5qwFMUy/KL/wAmX5e/5ix/xE5GXJshza/N7/yZfmH/AJiz/wARGMeSy5sQ/XhYu/zGKvSv&#xA;yeaMrqaTyMkXK39Oi8hVmYSfcm+YupA2YkDq9Lli0tAp+suQWUH4OxPxHr2zFSYw6F833TzSXMzz&#xA;AiZnYyg9eRYlq/Tm0HJLO7Qi2trSPvSOMD3oAcLBlXlfUJLHXbWZKEO3pOpbgpWX4PibsBWuRyRu&#xA;LPGaKVaq7RG8kJ5tH6jFj1JFTX6ckOTE82L+bEDadHIN+Eg39iDiVi9G/Jq3Gmfl3rGrMeEl7M0U&#xA;Lf6qiKLf/jLIRmFqp0Ce4Ofo8fFID+dIBGZyb6QrWd39UvLe5LcUiljaVvCMMOf/AAtcv0prJH3u&#xA;F2jG9PP3fduwX8/dMFr51jvFHw39rHIzeMkZMRH/AAKrnV4Ds+eZhu80/wAzlzU7/MYq6gPT6MVe&#xA;iflhFbR2GoXjP+9LqhXrRY15E+P7eYmp5gMJs90uyktbVIlJMg5STce7uS8jf8EScx5GywsomVHk&#xA;T94WMb1Ug7hvEb+xwLZYf5ssIB5PubaV6PZhRASRU+kaLWp6lMuxH12mPN5hpNg+oapZ2MdQ93NH&#xA;CpHYu4Wv0VrmbKVAlvjGyA+pzdQ2d1p9mgA+sO0MaeCxwu+3y4AZo6sEu5JqgmUn92/yP6sgyah/&#xA;uU/1R+rArDPNcEev/l5fiP4ma2Mqgf79tjzKj/Zx8cysR4cgaMg4sZfPmjR89VtgO0gb6B8X8M3D&#xA;qCzy1l/0uSLwjR/vZh/DCxRmKqF9IYrSWQGnBa/dirF/OEf7q2kp9lmU/SAf4YCmKK/KHb8y/L3/&#xA;ADFgH/gTkZcmyPNr83v/ACZfmEf8vZ/4iMY8llzYh74WLv4Yq9f/AC1sUt/LEM4H7y6eSRj3oG4A&#xA;fcmYOc3Jqmd2V5SxeMedNNS3833MEYpHcSJIo/4ygFv+GJzYYTcQ2xOyeyfHqNlF2BklI/1E4j8X&#xA;y1AZBpDcdWsmrxpPEeVVFPjG9Xqv37YJciyjzChqUYluLqM/Zd5FPyJIwjkg82J39ZvLNT9tETl/&#xA;rRsA36jigc3qUUX6J/LPyppA+GXUZYppE78aPfMTv2ZVGavWy9Ez5fsd32VC8+Med/LdA2Ut607L&#xA;OGCAGlVoK1HfOdlXR7wKFyL64+tWxDelIkqD4aChUgb5PHIRIPcQ1Z4cUDHvBH2KX5zn9M+SPK/m&#xA;VaEuoWUjs1zCJCDT+VoiM6rFtIh83y7gF41mQ0O/hirqfPb+GKp35Ls/rfmjT4iCVWT1W8KRgvQ+&#xA;xpleU1EsZcnuCkAmorsR4dRmvanEjiBTcE1Pjiryz81rMxaxa3QqFuISp/1ojufuZczNMdqbILPy&#xA;g0z6753tZCKx2Ucly30Dgv8Aw7g46qVQ97l6WNz9z136615+Z9rYIT6el6bNcSU6epcSIgB/2IBG&#xA;a8isV95c4m8ldwZlJ/dv8j+rMZvah/uU/wBUfqxVhfka65yeYdHmqx0/U7kIjf74uJGkSvzJbMrM&#xA;PpPeGjCeY7i8TtNKbT/N93YsDWxlmjFfBSUB+kHNtCVgF1WSNEhPtPPPV70/77jhT7+bfxyTWmmF&#xA;UFrVf0ReU6+i/wCrFQknmX99o8co6c0fbwYEfxwJC/8AKEEfmX5e/wCYsfgpyMuTZHm1+b3/AJMv&#xA;zD/zFn/iIxjyWXNiHvhYu3+7FXs35dzep5SsgTUxmVD9EjEfgRmBnHqLVLmyTKmLyTznfwQ+fXnn&#xA;iNzBatBzhV/TLBUVioej8dz1oczsI9DbDkhtS822p1OK70q0kgjEPpywXMgmPItyYq6LFtQL1GXC&#xA;+rIgdEdpf5gQ297bXE9o49GRJD6TKSeDA7c1pXbvXE7hAFFD3/nx5ZpZLa0Ch3ZlMjV6moqFA/Xi&#xA;FIQ1r5j0saPPaXdpPLdzGUCaOVI4o/UqQfTMbs3Fj9nkK+OA2kAPRbzzrpfmvzDoselpJHa6VZzs&#xA;8TinF34Rge9FA3zT6/ijhPEKsh6PsaMTqRwmwIk/oTfNA9k7FWE6r5z0b/lWsvk+5Ep1WyunW3YL&#xA;8CrHcF1JY0/YZl2zrsVkiVbEB82zxjHije4kRXxebfxzKcN2/wB2Ku+7/axVO/KGt2mi6yt9cxPJ&#xA;GEZAsdCwL033IHT3yvLAyFBEhb0aH8yfKkgBeeSGvUPE5p/wAfMU4JNfAV8n5jeUkFVu2k2rRYpB&#xA;/wASVcHgSXhLCfPfmzTNeW1SzikH1ZnPqShVqGAqAAWP7OZGHGY82UY0kWh+YdX0K7N1pk/oSsvF&#xA;zxVgy1rQhgRlk8YkKLdDIYmwy/yV+ZyaX5k1DWddhkvJ9RRIpJoOIZBHQbI3EEEKP2h0yjNpuKIj&#xA;Ho34tRUjKXV6ZF+c3kCeI872S3LKfhkglJr4fu1kGYR0mQdHLGqh3qVx+dfkW1hURTT3bKAOMMLD&#xA;t4y+nhGjmfJEtXD3vKL78x9Uj8zatrGhj6gmqcOcThJTSNQtdxSpNT9OZ0dOOERlvThHUESJjtaQ&#xA;Jr+o/pOfUZXW4u7iolkkHWtOy8f5Rl8QAKDTImRspno/ma3guLqa8RvUuSh/dgFQEXj3NckxpOl8&#xA;16GRUzlT4FHr+AIxtFIPUfNekyWk8EfqSGWNkBC0HxAjuRitMeuNcup7BbJ1jEQVF5b8vhpQ9fbw&#xA;xTSfflD/AOTL8vf8xa/8RORlyZx5u/N7/wAmX5h/5iz/AMRGMeSy5sQ7+2Fi7v7Yq9Y/Kybn5ckS&#xA;u8Vy609iqN/HMLUD1NU+bMsoYvDfOEwm8z6m/Wk7J/wHwf8AGubHEPSG6PJJ8ml7h5P/ACfttO0u&#xA;5vdZjgv74pzSMfvIo0DCoAYCrdeRpt0Hidbl1Jl9OwDs8OmjH6tylf5kflOttZNrelLHbJBAJb2z&#xA;PwjZAxaMAbMN+Smg/jPBqDfDJr1GnFcUXkff2zPcBtWZSCpIYdCNjiQkGkSmraoi8UvJ1Hgsrj9R&#xA;ys4YH+EfJuGqyjlKXzK2XUdQl/vbqWQUoQ8jN+s4Y4oDkAxlqMkucifihx75NqaxVvv7Yq6v3HFX&#xA;ePf3xVMNI0PU9XmeOwi9QxLzlYlVVR/lM1B8hlWbPHGLkXJ02kyZzUBdK+q+Vta0u1W6u4VFuzcP&#xA;VjdJFDdQDwJpkMWqx5DUTu2ans7NhHFMbJT7HamZDhNex22xV1e/v4Yq75b4q7r8/DFXVriru9On&#xA;9RiragkhVBJJooA3NdsVRdzpGrWsoiuLOeGVgCqPEyk13FAR3yImD1ZGEh0U73Tr+xkWO8tpbZ2U&#xA;OqSoyEq3QjkBhEgeSDEjmh+vz8MKGYflCf8AkJfl/wD5ix/xE4JcmUebX5vf+TL8wn/l7P8AxEYx&#xA;5LLmxDv7YWLu/wA8VZX5XvfOGmW8g062BtpD6ridQFJApUElD0HbMTNlxXud3Y4exdTmFxga89vv&#xA;TgecfPs4ZI7G2jYdCFIJp4c5CMqM8I6s4ez+ql/AfmP1sG1OPUBdyy38bx3E7tK5dePJmarEfSe2&#xA;ZuOcSPSbcHPpsmE1OJifN2lQ+vqlnD/v2eOPt+04Hf54ZmgWuAsgPq+wuVNvMFKlrdirL81D0Ye/&#xA;LNGNi7uW6A84lbnRL+0LAvcWtxVd6kGMrXb/AFsljPqB82Mh6SPJ8q9/nm8dIi9JhtJ9Us4bwyfV&#xA;JJo0uPRp6nplhz4ctuVOlcSr0mPyB+W1x6kianqNshYelFMIy3EqOpVCPtbdemVSMx0ZjgPVC6v5&#xA;K/L2w0+/khvtQublLUvZ0CBPXAYkPWNDx2XcHxwgz6qeF5qMsYOxV3f54q6u/wA/44qnnlTy3+nL&#xA;14pJTDBCoMjqORqeiiuwrQ75h63V+DGwLJdn2X2d+ZmQTUY83qFvo2naVostlYpx9Vg7MTVmIIqW&#xA;b/Y5z2TUSyG5Hd7TTaOGAcMBs7TLW2urG7s7qMSwXA4mNiaGnvXbtQ5GGQxIINFuz4ozBjIXEsC8&#xA;5+TLfSIFvbKVjbs/BoX3Kch1Ddx9GbrQa85TwyG7yXa3Y8cEfEgTw3y7vixAeHjm1efej/lf5M0L&#xA;UrG61vXR6lpDL6MMLMyJzVVdmJUgt9oAD59cxdTmMdg5ek00ssqiOI9yI8weW9Au76R7GzWK1P8A&#xA;doP3dPGgXtXNZ+bmCaL3eHsLFLFGOWEeMd233c0V5c8veVYZHi1aySS2kXiNixVqj4uQPPp4HGGr&#xA;lxWSWrtDsOPg8OGEbBvz+BLEfzG8r2fl/W0TT2LabeRCe1qS3EFiCgYk8qFag+BHzzb4MnHG3hM+&#xA;IwlR2YoD4fP7suaWdfk3pX1zzjFcsvJNPX1a0qObMI1/Biw+WYusnUK73K0kLnfc921HRnuboTRM&#xA;FD0Eta7U2qPozVO1EqYj+dejx3Pk1Zo1+LTZFkTueBpGw/4YE/LMnSTqfvcTVQuF9z597f59s2zq&#xA;2YflD/5Mvy9Ttdj8VOCXJlHm1+b3/ky/MP8AzFn/AIiMY8llzYh7dsLFG6PZfXdRhgO8ZPKX/UXc&#xA;/wBMp1GTggS5/Zek/MZ4w6cz7hzepcaJxXagoK75zlvq9bUstlgCzVU+t6lFYUAC0NRSnjTvhPJg&#xA;AeLpSRedbD6zpgmUVltiXB78ejD+P0ZmaDJwzroXRe0uk8XT8Q+qG/w6/r+DGfJkPr+bdHTr/pcL&#xA;EeyOGP6s3GY1A+58+wi5j3vpXTbi6ghu42EbRXVyZoVYGoSKOJG5fFShaJvozUcWwDtTHclRvlnn&#xA;ntKhRZxRXUDqK8vUlaJgN67UR8TLZMY7vlmRDHI0bdVJDfMGmbt0iYeW4hLrVqp3FWJ/2Kk4UF6C&#xA;4+Gg7EfgcLFbcRLNC8bCoZSPvFMVeXZFm1ireKt/5j6cVeh/lvCI9MnuTsZJwCf8mNR/zUc0Ha0r&#xA;mB5PZ+zmOsMpd8vuDNpYJURnM4kUg/u+IFNiRv7Zq6FO9JNqVlE0sCiKYRAFquFBDb/5VMaBO6ZW&#xA;OSUecIDcaDfRsKskPKviY/jr+GZOilw5o+/79nB7Tx8elnf82/lu8h/pnVPnj3HStOGnflppMRWk&#xA;lw4uHPQkzB5BX/YkDNNrpWT73rPZeP77/MP3hLs1z3jsVQ/5qWH1jydoepqvxWztbtTf4ZB1P0w/&#xA;jm60Mtq8nzDtuNaif9YvKO9a+BzYOmesfk2rWWhaxqioXlMqRRKASWeJeSoPdmlAzX6zeQDsNHtG&#xA;Re0+unFCTQsSGBDbCtK9OlN/lmDwebl8TG/Ntb+31TSGQ8GsGMclKBml9VDxJA3X01P0jJwHCQfN&#xA;B9QI8nzD7j2Obt0rMPyi/wDJl+Xv+Ysf8ROCXJlDm1+b3/ky/MPh9bNf+BGMeSy5sQ/XhYsv8k2A&#xA;EMt2w+KU+lGe/EdfvP6s1XaGXcR7nuPZXR1CWU/xeke7r9v3MxIqKVp7jNW9eVK1kNbhOIPxg8+4&#xA;6in05I8moC53fJ10iPEUcVVvhIPcEbjBE0Wc4iQo8i8/0r9LaT5utU0t+GoRXKx2jEBgTIeC8lII&#xA;IZXoRnRRmJ4+I8qfJtVpjgzyx9Yn+z7H05M0iycWHIKhDSUFTxRixIHTdhmn5uwQmqPerpmotpqq&#xA;t+kMr2zMiupljJZQVYEfFyAyUD6hfJjO6NPlaaaWed5pWLzSsXdyaksxqSfmc3jpU38oJy1lDT7K&#xA;Ofwp/HCEFm1zOkELSv8AZWlfpIH8cLFVxV5dcLxuJVHRXYfcTkWan/mcVd39+2Ku8f64q9O8hD/n&#xA;XYzUHlJITvXvTfOb7TP74+4Pd9gD/Bh7yy6X+6f/AFT+rNYObuZclDTuItV4mq1NCRTvhlzSgtcF&#xA;dOvw1DWGX7uBy/T/AFx94cfVj9zP+rL7nj+nWcl7qFtZxbS3MscMf+tIwQfic64mhb5mBZfRHnFY&#xA;rbRrS3QBYo3VU3oAqIVA/HNHqNx8XsfZvbPL+p+kMOV0b7LBvka5h09qDbTSRqaMwB8CQMaUkMh1&#xA;zTjqf5XXcIWskcLzR+NbeUybe5CUzZ6WVU+cdtx/wjIPN4B3/ofHNs8+9s/I76zNoNzE9sFto7rl&#xA;Dck19SVlUmikf7qChq18M1mtriB8nZaMnhIp6dNy5y7URQFX6EY/xzDDlFCa01ytg17a24uLtIWe&#xA;G3JKF24hvT5Uahbj4dQMMQCaKkkCw+UXI5GgotdlrWle2b50bL/yh2/Mvy9/zFiu/wDknBLkyjza&#xA;/N7/AMmX5h/5iz/xEYx5LLmxD9eFimvld5RrlqiOyhn+IAkAgAnfMbWAeGbdv2FOQ1cACRZ3ekFQ&#xA;Aebcl7hqU/VnPvp581tn65F4EJEXNTJQ7Vq3H+OTN04/o8QX9W9fpSvzX60eg3DpIwZSnxA0IBcA&#xA;04geOX6IA5QC67t+Uo6SRiSCK+8BK/yh0z6/58sSw5R2gkupP9gtEP8AyMZc2+qlWMvnWmjcw+g/&#xA;UVhLxJPOOWSp7bhQP+FzUO1VOSLcghuNHAdfHmgA/wCI4FfLfm7S/wBFeZ9U08LxS3uZBEP+Ky3K&#xA;P/hCM3uKXFEF0uSNSIRHkta6s5/lhY/8MoywNZT7zbMYtGkANDI6KCPY8v8AjXFATaCQSwxyjo6h&#xA;h9IrhQ811IEajdDuJpK/PkcizQ/+ZxV3+YxVuh7dv4Yq9K8h8/8ADtGUrSR+NQRUEA1FevXOc7Sr&#xA;xvgHuewb/K7jqWYy/wB0/wDqn9Wasc3dy5KGm8fqq8a0qaV69cMuaUD5gZhpuocAWf0JAqgVJYoa&#xA;CmX6b6433j73G1hPgzrnwn7mD/lRpy3vnexL7x2oe5IPiikLT/ZsM6nPKovnGEXJ6357voEexsSw&#xA;9eX1JlX/ACY+Kn/ieajPE8N+b1vs3IDOR14f0hiuYT2zsVZz5QntL7y4sa0kjR5oJ17VEjcl+45s&#xA;cYIiLfOe1pxlqZkcrr5Ci+ej5fvX8yPoNupkuhdNZoD3ZXKVNO21Tm24wI8RefECZUH0z5Y0S00f&#xA;TLbTbUVgso/TD7fHI3xSSH3ZjX6c0uSZkbLuYQEYgBHoObOG3DSsPo4kZBkWolaWxAP2xUoR1BU/&#xA;Dikvn/8ANvysNJ179I26cbDVS0oA6JPWsye255D5+2bbS5eKNHmHVarFwyvoUJ+UNf8AlZfl+ve7&#xA;H4KcyZcmiPNr83v/ACZfmH/mLP8AxEYx5LLmxD3wsU38pry8w2g6ULn7o2OYutP7o/jq7j2fF6zH&#xA;8f8Acl6TnPvqCEsf7yb6P45ObTi/UhPNi8vL92PZD90inL9Ef3o/HR1nb4vR5Ph/ugmP5BWFJta1&#xA;M7GKKO3ic9KyEuw/4Rc2OulyD59oo7kvXQR6My8eLpAOfzYMTmvc8t3AVTIygGXgjge6Eiv44Arw&#xA;b88NPFt52N0v2b62imqP5lrEfwjGbXRyuFdzrNXGp+9IPJKn9JzHsID+Lr/TMwOIUd54lpa2sP8A&#xA;O7P/AMAKf8bYlATfQJfV0a0brSMJ/wAB8P8ADFSwPVv+Ore/8Z5P+JnFkhf44Fd/DFXfd/tYqzXy&#xA;j+YCaRp6aZdwGWASfBMG/u43NW+GhrQ1OazWaDxCZRO9O+7M7YGGIxzFxvn3BmC+b/LU8LFNQiFQ&#xA;dnJQ9PBwuaU6HNE7xL00e1dNIbTH3fep2nmny7DaAvfwrQn4Q/I9fAb4nR5Sdolke09OBvOKTa3+&#xA;Zlqlvc2mloZWlQiO8qUCswoaKQG2HTNlpezJbGe3k6TXduw9UcW9j6uTAdO1GfT7kXEHEuF4kMKi&#xA;h65t8uITFF5/Ra2emyccKuq3RVz5i1S41GK+kk5SQDjDESzRotKFVBJoG3rvkBp4iHB0bpdp5DqB&#xA;nAiJDp05V9qL/wAaan/vm3/4F/8AmrKP5Ph3n8fB2n+inUfzcfyP/FNN5y1QqQIoFJ25BW2r33Y4&#xA;RoId5QfajUEfTj+R/wCKUNJ806xpdtNbW0zGCZuZiZm4BuhYKCBU98uy6eM6t1ei7RnpyTGMZE/z&#xA;hde5bo3mTU9H1v8ATFmY/rlZN2UFaygq23b7XbJyxAx4ejiy1EjkOT+Ikn5vefLX5reS72zhjn1B&#xA;bS84AzpcKYV50+KjGqUr0+KuavJpZg8tnYQ1MDzO7ItB1Kw1KxjurCdbi2aVgsqGoJCb/dlMomJo&#xA;twkDySkfmJ5KsIJmuNYg+CRlKRkyvUAdFjDMR70plg08z0YSzwHV49+ZH5hHzDPJp9gR+hElSaEv&#xA;HwkMgQgnq23xHwzYafT8G5+p1+oz8ew5IX8of/Jl+Xv+Ytf+InMmXJojzd+b3/ky/MPj9bP/ABEY&#xA;x5LLmxD37YWKbeVZI49ftXkYIg5gsxAFTGwHX3zG1gJxGvxu7jsCcY6yBkaG/wDuS9Kznn09AaXc&#xA;QTPcelIsnBgrBTWh32OW5YEVYcTS54ZL4ZCVc66IfzXJGuhXSswVnChFJAJPIdMt0QJyhwu35xGk&#xA;mCdz+sMz/JnT/q/kT1SKNqN27B/BV4xD/hozmXrJXP3B4PRxqD0B+DR3br1oVY/6q/25iOUukjBl&#xA;U1ozxNGPwOKvIvz4sQ1hoeoKtBGZbaQ+P2Sn/EGzYaGW5Dg62PIvOPK2o2ljeSvdP6aPHxDcSd6g&#xA;/sg+GbEOvLfmnVLW/uYfqr+pFGhHLiV+Inf7QB7DFQmPlvX9NtNMW3upvTkRmoOLNsTX9kHFBDG9&#xA;QlSa/uZk3SSV3Q06qzEjAyQ/8cVd+rFXV+44q7x7++Kt969+tMVa7Yq37HamKpv5et/K8xuBr95c&#xA;2YCL9VNtEsvJi3xcuRGwH+3tQg2kUn9zpP5TKqNBruoNzDEqbUEoyggcqhR8bUI4k0HXBZTQW2dp&#xA;+VMWoWktxe6hcWX1iQXVuUCkW6lzExdVBPIBFYLv8RIO2O67KcNj+Vk8hVtT1K0XmyqzQpNVOThG&#xA;PFUKngE5Ch3J+WO67LJNP/LI3PwavqAtuC7tbIX9Tfl0IFOlPpHuTutBINai0eLUZE0ieW4sAF9O&#xA;W4QJITxHIFR74QxKA6fL+GKu6bjf3pirvlviruvz8MVZh+UJ/wCQl+X/APmLH/ETglyZR5tfm9/5&#xA;MvzD/wAxZ/4iMY8llzYh39sLF3fFVaG9vYABBPJEB/I7L+o5GWOJ5gFvx6rLj+mUo+4kOivbyHmI&#xA;Z5I/UNX4Ow5HxNDviccTzAXHqcsL4ZSF86J3961FubqZURXnnkNFUVd2J7ACpOEABqlIyNk2U90b&#xA;zR5z0VIBY3FylrayMY7ZwzQBiDyBjYFf2q08d+uVzwwlzDKGWUeRZJbfm1+YUaFTaxTJdSMy8rd/&#xA;jLEAohUivh45UdHBuGqmi9e/M78zre8jNxpg0swg8YmtpBXmvVjKTX2pgjo4V3rLVTYTrWr+bdTg&#xA;i/S013NatI8kCShxFz+05QEcfhDdvsjbpmRDHGPINEskpcyk8kMsdBIjIT05Aj9eTYLcVdtirsVa&#xA;xVvvirMP+VRfmXv/AM69d7+y9/pwcQZcBa/5VD+Zf/UvXf3L/XHiC8Jb/wCVQ/mXX/lHrulfBe/0&#xA;48QXgLv+VQ/mXT/lHrv7l/rjxBeEu/5VF+Zf/UvXf3L3+nHiC8Bd/wAqh/Mv/qXrvp4L/XHiC8Jd&#xA;/wAqi/Mutf8AD1318F/rjxBeAu/5VD+Zf/UvXf3L/XHiC8Jcfyi/Mv8A6l67+5f648QXgLj+UP5l&#xA;9vL139y/1x4gvCXf8qi/Mv8A6l677Hov9ceILwFw/KH8y/8AqXrv7l/rjxBeEuH5RfmXWv8Ah67+&#xA;5f648QXgLv8AlUP5l/8AUvXf3L/XHiC8Jcfyi/Mv/qXrv7l/rjxBeAsm/LP8s/PmmefdEv77RLm3&#xA;s7e5DzTOBxVeJFTvglIUmMTbvzM/LPz7qXn3W7+w0S5uLS4uS8E6AcWWg3G+MZCllE2xj/lUP5l/&#xA;9S9d0/1V/rh4gjhLv+VQ/mX/ANS9d+/wr/XHiC8Bd/yqH8y/+peu/wDgV/rjxBeAu/5VD+Zf/UvX&#xA;ft8K/wBceILwFGaT+XH5uaRfR3+naJeW93EG9OUJG1OSlTsxYdDgJCiJZC8H/ORTxsj2l8Wd1czC&#xA;KASArU7OACK13well6lFtM/5yCeKaJrK+4zmNnIjhVuURUqQygEH4BXx74+lfUuey/5yKa8e89DU&#xA;VnkNWZUiUVCen9lQFHw+A9+uPpX1OmsP+chJpEd7G85RnlGRBb1VinAsvw7HieuPpX1JVrfkj86d&#xA;c9E6rpV7dfVy5hDJGAvqEF6BePUgYQQEESKV/wDKofzL/wCpeu/+BX+uHiCOAu/5VD+Zf/UvXfv8&#xA;K/1x4gvCXf8AKofzL/6l67/4Ff648QXgLv8AlUP5l/8AUvXft8K/1x4gvCXf8qh/Mv8A6l679/hX&#xA;+uPEF4C//9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:27d9bc21-fceb-4f0a-a9d4-06eb71990e78</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:27d9bc21-fceb-4f0a-a9d4-06eb71990e78</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:59bfc3a4-82a2-4759-a3e2-cac0dcb0d9d1</stRef:instanceID>
            <stRef:documentID>xmp.did:59bfc3a4-82a2-4759-a3e2-cac0dcb0d9d1</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:9055feea-6df3-418a-84b0-35eb367eec15</stEvt:instanceID>
                  <stEvt:when>2016-04-18T22:41:34+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:27d9bc21-fceb-4f0a-a9d4-06eb71990e78</stEvt:instanceID>
                  <stEvt:when>2016-11-03T14:12:17+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015.3 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>800.000000</stDim:w>
            <stDim:h>800.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>CooperHewitt-Light</stFnt:fontName>
                  <stFnt:fontFamily>Cooper Hewitt</stFnt:fontFamily>
                  <stFnt:fontFace>Light</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>1.000</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>CooperHewitt-Light.otf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xmpTPg:Fonts>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Grays</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Color Group 1</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=252 G=100 B=96 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>252</xmpG:red>
                           <xmpG:green>100</xmpG:green>
                           <xmpG:blue>96</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=216 G=208 B=187</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>216</xmpG:red>
                           <xmpG:green>208</xmpG:green>
                           <xmpG:blue>187</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=233 G=229 B=217 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>233</xmpG:red>
                           <xmpG:green>229</xmpG:green>
                           <xmpG:blue>217</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=249 G=248 B=247 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>249</xmpG:red>
                           <xmpG:green>248</xmpG:green>
                           <xmpG:blue>247</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=157 G=191 B=159</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>157</xmpG:red>
                           <xmpG:green>191</xmpG:green>
                           <xmpG:blue>159</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=59 G=77 B=87</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>59</xmpG:red>
                           <xmpG:green>77</xmpG:green>
                           <xmpG:blue>87</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Color Group 2</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=252 G=139 B=96</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>252</xmpG:red>
                           <xmpG:green>139</xmpG:green>
                           <xmpG:blue>96</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Color Group 3</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=239 G=215 B=184</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>239</xmpG:red>
                           <xmpG:green>215</xmpG:green>
                           <xmpG:blue>184</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -800 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 800 li
800 800 li
800 0 li
cp
clp
800 800 mo
0 800 li
0 0 li
800 0 li
800 800 li
cp
false sop
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
/502823680.0 
<<
/ID /502823680.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 119.167 119.167 ] 
/XStep 119.167 
/YStep 119.167 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
{119.167 0 mo
0 0 li
0 119.167 li
119.167 119.167 li
119.167 0 li
cp
}exec
false sop
.774502 .592615 .502129 .329351 cmyk
f
3 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
{31.811 104.695 mo
31.811 102.417 29.9641 100.57 27.686 100.57 cv
25.4078 100.57 23.561 102.417 23.561 104.695 cv
23.561 106.974 25.4078 108.82 27.686 108.82 cv
29.9641 108.82 31.811 106.974 31.811 104.695 cv
cp
}exec
.742214 .531426 .4654 .220188 cmyk
@
{104.48 14.6231 mo
104.48 12.3449 102.633 10.4981 100.355 10.4981 cv
98.0769 10.4981 96.23 12.3449 96.23 14.6231 cv
96.23 16.9013 98.0769 18.7481 100.355 18.7481 cv
102.633 18.7481 104.48 16.9013 104.48 14.6231 cv
cp
}exec
@
{14.686 55.4583 mo
14.686 53.1802 12.8391 51.3333 10.561 51.3333 cv
8.28278 51.3333 6.43595 53.1802 6.43595 55.4583 cv
6.43595 57.7365 8.28278 59.5833 10.561 59.5833 cv
12.8391 59.5833 14.686 57.7365 14.686 55.4583 cv
cp
}exec
@
{108.605 95.5704 mo
108.605 93.2923 106.758 91.4454 104.48 91.4454 cv
102.202 91.4454 100.355 93.2923 100.355 95.5704 cv
100.355 97.8486 102.202 99.6954 104.48 99.6954 cv
106.758 99.6954 108.605 97.8486 108.605 95.5704 cv
cp
}exec
@
{73.311 65.4454 mo
73.311 60.4058 69.2256 56.3204 64.186 56.3204 cv
59.1464 56.3204 55.061 60.4058 55.061 65.4454 cv
55.061 70.485 59.1464 74.5704 64.186 74.5704 cv
69.2256 74.5704 73.311 70.485 73.311 65.4454 cv
cp
}exec
@
{36.811 18.7481 mo
36.811 13.7085 32.7256 9.62312 27.686 9.62312 cv
22.6464 9.62312 18.561 13.7085 18.561 18.7481 cv
18.561 23.7877 22.6464 27.8731 27.686 27.8731 cv
32.7256 27.8731 36.811 23.7877 36.811 18.7481 cv
cp
}exec
@
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/502823680.0 /Pattern get_res
[.5 0 0 -.5 -4500 -3851.67 ]make_pattern set_pattern
f
2 vmreclaim
283.392 764.165 mo
283.392 764.868 283.501 765.466 283.719 765.96 cv
283.938 766.454 284.237 766.825 284.617 767.075 cv
284.997 767.325 285.412 767.452 285.861 767.452 cv
286.317 767.452 286.733 767.333 287.111 767.095 cv
287.487 766.859 287.788 766.493 288.012 766.003 cv
288.237 765.513 288.349 764.898 288.349 764.165 cv
288.349 763.474 288.237 762.88 288.012 762.382 cv
287.788 761.886 287.484 761.507 287.101 761.243 cv
286.718 760.982 286.298 760.851 285.843 760.851 cv
285.368 760.851 284.944 760.985 284.57 761.253 cv
284.196 761.523 283.906 761.907 283.701 762.411 cv
283.494 762.915 283.392 763.499 283.392 764.165 cv
cp
288.492 767.974 mo
288.492 767.716 li
288.144 768.114 287.801 768.441 287.462 768.689 cv
287.123 768.941 286.756 769.13 286.36 769.259 cv
285.964 769.392 285.533 769.454 285.064 769.454 cv
284.443 769.454 283.868 769.323 283.339 769.062 cv
282.811 768.798 282.353 768.423 281.968 767.935 cv
281.58 767.448 281.288 766.876 281.089 766.216 cv
280.889 765.558 280.789 764.845 280.789 764.079 cv
280.789 762.458 281.185 761.194 281.977 760.288 cv
282.768 759.384 283.81 758.931 285.102 758.931 cv
285.848 758.931 286.479 759.06 286.991 759.316 cv
287.505 759.571 288.005 759.968 288.492 760.497 cv
288.492 756.671 li
288.492 756.138 288.598 755.737 288.811 755.464 cv
289.022 755.193 289.325 755.056 289.718 755.056 cv
290.11 755.056 290.412 755.181 290.624 755.431 cv
290.837 755.683 290.943 756.05 290.943 756.538 cv
290.943 767.974 li
290.943 768.468 290.829 768.837 290.601 769.085 cv
290.373 769.331 290.079 769.454 289.718 769.454 cv
289.363 769.454 289.07 769.327 288.839 769.071 cv
288.608 768.814 288.492 768.448 288.492 767.974 cv
cp
false sop
.0153201 .0126345 .0151369 0 cmyk
f
294.855 763.349 mo
299.556 763.349 li
299.494 762.462 299.253 761.798 298.839 761.359 cv
298.424 760.917 297.879 760.698 297.201 760.698 cv
296.555 760.698 296.024 760.921 295.61 761.366 cv
295.195 761.814 294.944 762.474 294.855 763.349 cv
cp
299.926 764.821 mo
294.855 764.821 li
294.861 765.409 294.979 765.929 295.211 766.378 cv
295.442 766.827 295.749 767.167 296.132 767.394 cv
296.515 767.622 296.938 767.735 297.4 767.735 cv
297.71 767.735 297.993 767.7 298.25 767.628 cv
298.507 767.554 298.755 767.441 298.996 767.284 cv
299.237 767.13 299.458 766.964 299.661 766.786 cv
299.863 766.609 300.125 766.366 300.449 766.064 cv
300.582 765.95 300.772 765.892 301.02 765.892 cv
301.285 765.892 301.5 765.966 301.664 766.112 cv
301.829 766.259 301.912 766.462 301.912 766.73 cv
301.912 766.964 301.82 767.235 301.637 767.55 cv
301.452 767.864 301.175 768.165 300.805 768.452 cv
300.434 768.741 299.97 768.98 299.408 769.169 cv
298.849 769.36 298.204 769.454 297.476 769.454 cv
295.811 769.454 294.516 768.98 293.591 768.03 cv
292.667 767.081 292.205 765.792 292.205 764.165 cv
292.205 763.398 292.319 762.687 292.547 762.032 cv
292.775 761.376 293.108 760.816 293.544 760.347 cv
293.981 759.878 294.519 759.519 295.159 759.269 cv
295.798 759.019 296.508 758.894 297.286 758.894 cv
298.299 758.894 299.168 759.107 299.892 759.534 cv
300.618 759.962 301.162 760.515 301.522 761.191 cv
301.882 761.868 302.064 762.56 302.064 763.261 cv
302.064 763.915 301.877 764.337 301.504 764.53 cv
301.131 764.724 300.604 764.821 299.926 764.821 cv
cp
f
311.741 766.064 mo
311.741 766.778 311.568 767.392 311.219 767.901 cv
310.871 768.411 310.356 768.798 309.675 769.062 cv
308.995 769.323 308.167 769.454 307.192 769.454 cv
306.261 769.454 305.463 769.312 304.798 769.026 cv
304.133 768.743 303.642 768.386 303.326 767.96 cv
303.01 767.53 302.851 767.103 302.851 766.671 cv
302.851 766.386 302.952 766.144 303.156 765.941 cv
303.358 765.739 303.615 765.638 303.925 765.638 cv
304.197 765.638 304.405 765.704 304.551 765.837 cv
304.697 765.97 304.837 766.157 304.969 766.396 cv
305.235 766.86 305.554 767.202 305.924 767.433 cv
306.294 767.659 306.799 767.775 307.439 767.775 cv
307.958 767.775 308.384 767.657 308.716 767.427 cv
309.049 767.194 309.215 766.931 309.215 766.634 cv
309.215 766.177 309.043 765.847 308.697 765.638 cv
308.352 765.429 307.783 765.228 306.992 765.038 cv
306.099 764.818 305.373 764.583 304.812 764.339 cv
304.252 764.097 303.804 763.775 303.469 763.376 cv
303.133 762.978 302.965 762.485 302.965 761.903 cv
302.965 761.386 303.12 760.894 303.43 760.431 cv
303.741 759.97 304.198 759.601 304.804 759.325 cv
305.408 759.05 306.137 758.911 306.992 758.911 cv
307.663 758.911 308.267 758.982 308.801 759.122 cv
309.337 759.259 309.784 759.448 310.141 759.683 cv
310.499 759.915 310.771 760.175 310.957 760.46 cv
311.144 760.745 311.237 761.023 311.237 761.296 cv
311.237 761.593 311.137 761.837 310.939 762.028 cv
310.74 762.216 310.456 762.314 310.088 762.314 cv
309.822 762.314 309.596 762.237 309.409 762.083 cv
309.223 761.933 309.009 761.704 308.768 761.401 cv
308.572 761.148 308.342 760.944 308.075 760.792 cv
307.809 760.64 307.448 760.566 306.992 760.566 cv
306.523 760.566 306.135 760.663 305.824 760.864 cv
305.514 761.064 305.359 761.312 305.359 761.609 cv
305.359 761.882 305.472 762.105 305.7 762.278 cv
305.929 762.454 306.235 762.599 306.622 762.712 cv
307.008 762.825 307.539 762.964 308.218 763.128 cv
309.021 763.325 309.678 763.56 310.188 763.831 cv
310.698 764.103 311.084 764.425 311.348 764.796 cv
311.61 765.167 311.741 765.589 311.741 766.064 cv
cp
f
315.673 760.384 mo
315.673 767.878 li
315.673 768.398 315.549 768.79 315.302 769.056 cv
315.054 769.321 314.742 769.454 314.362 769.454 cv
313.981 769.454 313.673 769.319 313.435 769.046 cv
313.198 768.775 313.079 768.384 313.079 767.878 cv
313.079 760.46 li
313.079 759.948 313.198 759.562 313.435 759.302 cv
313.673 759.042 313.981 758.911 314.362 758.911 cv
314.742 758.911 315.054 759.042 315.302 759.302 cv
315.549 759.562 315.673 759.923 315.673 760.384 cv
cp
314.39 757.706 mo
314.029 757.706 313.721 757.595 313.464 757.374 cv
313.208 757.153 313.079 756.839 313.079 756.433 cv
313.079 756.066 313.211 755.765 313.473 755.526 cv
313.736 755.288 314.042 755.169 314.39 755.169 cv
314.726 755.169 315.023 755.276 315.283 755.493 cv
315.542 755.708 315.673 756.021 315.673 756.433 cv
315.673 756.833 315.545 757.144 315.292 757.368 cv
315.039 757.593 314.738 757.706 314.39 757.706 cv
cp
f
319.518 764.099 mo
319.518 765.15 319.747 765.944 320.206 766.482 cv
320.665 767.021 321.26 767.29 321.987 767.29 cv
322.418 767.29 322.825 767.173 323.207 766.943 cv
323.591 766.712 323.903 766.362 324.144 765.898 cv
324.383 765.433 324.505 764.868 324.505 764.202 cv
324.505 763.146 324.272 762.321 323.806 761.734 cv
323.341 761.146 322.728 760.851 321.968 760.851 cv
321.227 760.851 320.633 761.132 320.188 761.696 cv
319.741 762.259 319.518 763.06 319.518 764.099 cv
cp
327.031 760.812 mo
327.031 768.343 li
327.031 769.204 326.939 769.946 326.755 770.568 cv
326.573 771.187 326.278 771.7 325.872 772.105 cv
325.466 772.509 324.936 772.812 324.281 773.007 cv
323.626 773.204 322.811 773.302 321.835 773.302 cv
320.943 773.302 320.145 773.177 319.442 772.927 cv
318.74 772.675 318.198 772.353 317.818 771.958 cv
317.438 771.562 317.247 771.155 317.247 770.737 cv
317.247 770.421 317.355 770.161 317.571 769.964 cv
317.786 769.763 318.046 769.663 318.349 769.663 cv
318.729 769.663 319.062 769.831 319.347 770.167 cv
319.486 770.337 319.63 770.511 319.779 770.685 cv
319.927 770.86 320.093 771.009 320.273 771.132 cv
320.453 771.255 320.67 771.347 320.923 771.407 cv
321.177 771.466 321.469 771.497 321.797 771.497 cv
322.469 771.497 322.99 771.403 323.36 771.216 cv
323.731 771.03 323.991 770.769 324.139 770.433 cv
324.288 770.099 324.375 769.739 324.4 769.355 cv
324.426 768.972 324.444 768.357 324.457 767.507 cv
324.057 768.066 323.598 768.489 323.075 768.78 cv
322.552 769.071 321.93 769.218 321.209 769.218 cv
320.341 769.218 319.583 768.995 318.933 768.552 cv
318.285 768.109 317.786 767.489 317.438 766.691 cv
317.09 765.892 316.916 764.972 316.916 763.927 cv
316.916 763.15 317.022 762.444 317.234 761.819 cv
317.447 761.191 317.749 760.663 318.141 760.232 cv
318.533 759.802 318.986 759.478 319.499 759.259 cv
320.012 759.04 320.575 758.931 321.19 758.931 cv
321.924 758.931 322.56 759.073 323.099 759.353 cv
323.637 759.636 324.137 760.077 324.599 760.679 cv
324.599 760.327 li
324.599 759.878 324.71 759.53 324.931 759.282 cv
325.154 759.036 325.439 758.911 325.787 758.911 cv
326.287 758.911 326.619 759.075 326.783 759.401 cv
326.948 759.728 327.031 760.198 327.031 760.812 cv
cp
f
331.152 760.347 mo
331.152 760.659 li
331.607 760.058 332.106 759.616 332.648 759.335 cv
333.189 759.054 333.811 758.911 334.514 758.911 cv
335.198 758.911 335.809 759.062 336.347 759.359 cv
336.885 759.657 337.288 760.077 337.553 760.62 cv
337.725 760.939 337.835 761.28 337.885 761.648 cv
337.936 762.015 337.963 762.484 337.963 763.054 cv
337.963 767.878 li
337.963 768.398 337.844 768.79 337.606 769.056 cv
337.368 769.321 337.06 769.454 336.68 769.454 cv
336.293 769.454 335.98 769.319 335.74 769.046 cv
335.498 768.775 335.379 768.384 335.379 767.878 cv
335.379 763.556 li
335.379 762.702 335.26 762.048 335.022 761.595 cv
334.784 761.144 334.312 760.915 333.602 760.915 cv
333.14 760.915 332.719 761.054 332.339 761.329 cv
331.959 761.605 331.68 761.984 331.503 762.464 cv
331.377 762.851 331.313 763.571 331.313 764.63 cv
331.313 767.878 li
331.313 768.403 331.191 768.798 330.948 769.062 cv
330.704 769.323 330.389 769.454 330.003 769.454 cv
329.629 769.454 329.323 769.319 329.081 769.046 cv
328.841 768.775 328.721 768.384 328.721 767.878 cv
328.721 760.384 li
328.721 759.89 328.828 759.521 329.043 759.276 cv
329.258 759.034 329.553 758.911 329.926 758.911 cv
330.155 758.911 330.361 758.966 330.545 759.073 cv
330.727 759.183 330.875 759.343 330.986 759.558 cv
331.097 759.773 331.152 760.036 331.152 760.347 cv
cp
f
341.855 763.349 mo
346.556 763.349 li
346.493 762.462 346.254 761.798 345.84 761.359 cv
345.425 760.917 344.879 760.698 344.201 760.698 cv
343.555 760.698 343.024 760.921 342.61 761.366 cv
342.195 761.814 341.944 762.474 341.855 763.349 cv
cp
346.927 764.821 mo
341.855 764.821 li
341.862 765.409 341.98 765.929 342.212 766.378 cv
342.443 766.827 342.749 767.167 343.133 767.394 cv
343.515 767.622 343.938 767.735 344.4 767.735 cv
344.711 767.735 344.994 767.7 345.251 767.628 cv
345.507 767.554 345.755 767.441 345.997 767.284 cv
346.237 767.13 346.458 766.964 346.662 766.786 cv
346.864 766.609 347.126 766.366 347.45 766.064 cv
347.582 765.95 347.772 765.892 348.019 765.892 cv
348.285 765.892 348.501 765.966 348.665 766.112 cv
348.83 766.259 348.912 766.462 348.912 766.73 cv
348.912 766.964 348.821 767.235 348.637 767.55 cv
348.452 767.864 348.176 768.165 347.805 768.452 cv
347.434 768.741 346.97 768.98 346.409 769.169 cv
345.849 769.36 345.204 769.454 344.476 769.454 cv
342.811 769.454 341.516 768.98 340.591 768.03 cv
339.668 767.081 339.205 765.792 339.205 764.165 cv
339.205 763.398 339.319 762.687 339.547 762.032 cv
339.775 761.376 340.108 760.816 340.545 760.347 cv
340.981 759.878 341.52 759.519 342.159 759.269 cv
342.798 759.019 343.508 758.894 344.287 758.894 cv
345.3 758.894 346.168 759.107 346.893 759.534 cv
347.618 759.962 348.161 760.515 348.523 761.191 cv
348.883 761.868 349.064 762.56 349.064 763.261 cv
349.064 763.915 348.878 764.337 348.504 764.53 cv
348.131 764.724 347.605 764.821 346.927 764.821 cv
cp
f
352.397 764.165 mo
352.397 764.868 352.505 765.466 352.724 765.96 cv
352.942 766.454 353.241 766.825 353.622 767.075 cv
354.002 767.325 354.416 767.452 354.866 767.452 cv
355.322 767.452 355.739 767.333 356.115 767.095 cv
356.491 766.859 356.793 766.493 357.017 766.003 cv
357.242 765.513 357.354 764.898 357.354 764.165 cv
357.354 763.474 357.242 762.88 357.017 762.382 cv
356.793 761.886 356.489 761.507 356.105 761.243 cv
355.721 760.982 355.302 760.851 354.846 760.851 cv
354.372 760.851 353.948 760.985 353.574 761.253 cv
353.201 761.523 352.911 761.907 352.705 762.411 cv
352.499 762.915 352.397 763.499 352.397 764.165 cv
cp
357.496 767.974 mo
357.496 767.716 li
357.148 768.114 356.805 768.441 356.466 768.689 cv
356.127 768.941 355.76 769.13 355.365 769.259 cv
354.969 769.392 354.537 769.454 354.069 769.454 cv
353.447 769.454 352.873 769.323 352.344 769.062 cv
351.816 768.798 351.358 768.423 350.972 767.935 cv
350.585 767.448 350.293 766.876 350.094 766.216 cv
349.894 765.558 349.794 764.845 349.794 764.079 cv
349.794 762.458 350.19 761.194 350.981 760.288 cv
351.773 759.384 352.815 758.931 354.106 758.931 cv
354.853 758.931 355.484 759.06 355.996 759.316 cv
356.509 759.571 357.01 759.968 357.496 760.497 cv
357.496 756.671 li
357.496 756.138 357.603 755.737 357.815 755.464 cv
358.027 755.193 358.33 755.056 358.722 755.056 cv
359.115 755.056 359.417 755.181 359.629 755.431 cv
359.841 755.683 359.948 756.05 359.948 756.538 cv
359.948 767.974 li
359.948 768.468 359.834 768.837 359.606 769.085 cv
359.378 769.331 359.084 769.454 358.722 769.454 cv
358.368 769.454 358.075 769.327 357.844 769.071 cv
357.612 768.814 357.496 768.448 357.496 767.974 cv
cp
f
368.218 764.241 mo
368.218 765.273 368.454 766.066 368.926 766.618 cv
369.397 767.173 370.016 767.452 370.783 767.452 cv
371.434 767.452 371.997 767.169 372.468 766.601 cv
372.94 766.034 373.176 765.222 373.176 764.165 cv
373.176 763.482 373.078 762.892 372.882 762.398 cv
372.685 761.903 372.407 761.523 372.046 761.253 cv
371.685 760.985 371.263 760.851 370.783 760.851 cv
370.289 760.851 369.848 760.985 369.462 761.253 cv
369.076 761.523 368.772 761.911 368.55 762.421 cv
368.329 762.931 368.218 763.538 368.218 764.241 cv
cp
368.094 756.538 mo
368.094 760.497 li
368.582 759.991 369.079 759.603 369.586 759.335 cv
370.092 759.066 370.719 758.931 371.466 758.931 cv
372.328 758.931 373.082 759.136 373.732 759.542 cv
374.38 759.952 374.883 760.544 375.242 761.319 cv
375.599 762.095 375.779 763.015 375.779 764.079 cv
375.779 764.864 375.679 765.583 375.48 766.239 cv
375.28 766.896 374.99 767.464 374.611 767.944 cv
374.23 768.425 373.77 768.798 373.229 769.062 cv
372.687 769.323 372.09 769.454 371.438 769.454 cv
371.039 769.454 370.663 769.407 370.313 769.312 cv
369.961 769.218 369.661 769.093 369.415 768.937 cv
369.169 768.782 368.958 768.622 368.783 768.458 cv
368.609 768.294 368.379 768.046 368.094 767.716 cv
368.094 767.974 li
368.094 768.46 367.977 768.829 367.743 769.081 cv
367.51 769.331 367.212 769.454 366.85 769.454 cv
366.483 769.454 366.19 769.331 365.972 769.081 cv
365.753 768.829 365.644 768.46 365.644 767.974 cv
365.644 756.651 li
365.644 756.126 365.75 755.728 365.962 755.46 cv
366.174 755.191 366.471 755.056 366.85 755.056 cv
367.25 755.056 367.556 755.185 367.772 755.441 cv
367.987 755.698 368.094 756.062 368.094 756.538 cv
cp
f
379.14 769.778 mo
379.378 769.198 li
376.186 761.163 li
375.991 760.702 375.891 760.364 375.891 760.155 cv
375.891 759.935 375.949 759.73 376.063 759.54 cv
376.177 759.349 376.333 759.196 376.533 759.083 cv
376.732 758.968 376.94 758.911 377.155 758.911 cv
377.528 758.911 377.81 759.03 378.001 759.269 cv
378.191 759.505 378.358 759.845 378.504 760.288 cv
380.698 766.671 li
382.778 760.735 li
382.942 760.255 383.091 759.878 383.224 759.605 cv
383.357 759.333 383.498 759.15 383.647 759.056 cv
383.795 758.96 384.006 758.911 384.279 758.911 cv
384.476 758.911 384.663 758.964 384.844 759.069 cv
385.024 759.173 385.163 759.314 385.262 759.491 cv
385.359 759.669 385.409 759.855 385.409 760.052 cv
385.383 760.171 385.343 760.343 385.285 760.566 cv
385.228 760.786 385.159 761.013 385.077 761.239 cv
381.696 770.091 li
381.404 770.87 381.119 771.48 380.84 771.923 cv
380.561 772.366 380.193 772.708 379.734 772.944 cv
379.274 773.183 378.656 773.302 377.877 773.302 cv
377.117 773.302 376.547 773.22 376.168 773.056 cv
375.787 772.89 375.598 772.589 375.598 772.151 cv
375.598 771.855 375.687 771.624 375.869 771.464 cv
376.049 771.302 376.317 771.22 376.67 771.22 cv
376.81 771.22 376.947 771.239 377.079 771.278 cv
377.244 771.316 377.386 771.335 377.506 771.335 cv
377.804 771.335 378.038 771.292 378.21 771.202 cv
378.38 771.114 378.533 770.96 378.67 770.741 cv
378.806 770.525 378.963 770.202 379.14 769.778 cv
cp
f
416.703 759.136 mo
417.322 759.136 li
417.322 758.359 li
417.322 757.544 417.422 756.901 417.629 756.421 cv
417.832 755.943 418.183 755.595 418.676 755.376 cv
419.166 755.159 419.838 755.05 420.691 755.05 cv
422.211 755.05 422.965 755.417 422.965 756.163 cv
422.965 756.401 422.885 756.609 422.724 756.778 cv
422.57 756.948 422.381 757.034 422.166 757.034 cv
422.066 757.034 421.888 757.017 421.638 756.976 cv
421.402 756.943 421.187 756.919 421.015 756.919 cv
420.549 756.919 420.25 757.06 420.111 757.335 cv
419.984 757.61 419.916 758.003 419.916 758.519 cv
419.916 759.136 li
420.549 759.136 li
421.539 759.136 422.029 759.433 422.029 760.032 cv
422.029 760.45 421.902 760.722 421.637 760.837 cv
421.375 760.95 421.013 761.007 420.549 761.007 cv
419.916 761.007 li
419.916 767.878 li
419.916 768.39 419.795 768.778 419.547 769.046 cv
419.304 769.319 418.992 769.452 418.603 769.452 cv
418.236 769.452 417.933 769.319 417.685 769.046 cv
417.441 768.778 417.322 768.39 417.322 767.878 cv
417.322 761.007 li
416.607 761.007 li
416.219 761.007 415.926 760.923 415.715 760.745 cv
415.506 760.575 415.4 760.347 415.4 760.068 cv
415.4 759.444 415.834 759.136 416.703 759.136 cv
f
425.193 765.71 mo
425.193 767.878 li
425.193 768.401 425.06 768.798 424.818 769.058 cv
424.572 769.323 424.26 769.452 423.881 769.452 cv
423.5 769.452 423.193 769.321 422.955 769.052 cv
422.719 768.788 422.594 768.396 422.594 767.878 cv
422.594 760.655 li
422.594 759.489 423.013 758.907 423.855 758.907 cv
424.289 758.907 424.597 759.042 424.789 759.316 cv
424.978 759.589 425.084 759.989 425.105 760.523 cv
425.414 759.989 425.73 759.589 426.054 759.316 cv
426.387 759.042 426.816 758.907 427.363 758.907 cv
427.912 758.907 428.435 759.042 428.949 759.316 cv
429.465 759.589 429.721 759.952 429.721 760.4 cv
429.721 760.714 429.609 760.98 429.394 761.181 cv
429.174 761.39 428.939 761.493 428.687 761.493 cv
428.588 761.493 428.357 761.431 427.996 761.314 cv
427.631 761.2 427.306 761.14 427.033 761.14 cv
426.652 761.14 426.34 761.243 426.101 761.439 cv
425.859 761.644 425.67 761.935 425.537 762.325 cv
425.408 762.72 425.318 763.191 425.263 763.73 cv
425.215 764.271 425.193 764.933 425.193 765.71 cv
f
432.039 763.343 mo
436.74 763.343 li
436.677 762.458 436.443 761.794 436.027 761.357 cv
435.609 760.915 435.068 760.696 434.387 760.696 cv
433.74 760.696 433.209 760.917 432.795 761.366 cv
432.381 761.812 432.127 762.47 432.039 763.343 cv
437.113 764.818 mo
432.039 764.818 li
432.049 765.405 432.164 765.929 432.394 766.376 cv
432.629 766.823 432.933 767.163 433.318 767.394 cv
433.703 767.62 434.123 767.734 434.588 767.734 cv
434.898 767.734 435.179 767.7 435.437 767.622 cv
435.691 767.552 435.941 767.437 436.181 767.28 cv
436.424 767.128 436.642 766.962 436.846 766.78 cv
437.049 766.607 437.312 766.364 437.637 766.062 cv
437.771 765.948 437.961 765.888 438.205 765.888 cv
438.472 765.888 438.685 765.962 438.853 766.11 cv
439.019 766.257 439.097 766.46 439.097 766.728 cv
439.097 766.962 439.008 767.235 438.83 767.546 cv
438.642 767.864 438.367 768.163 437.994 768.452 cv
437.619 768.737 437.154 768.98 436.596 769.167 cv
436.037 769.357 435.39 769.452 434.664 769.452 cv
432.994 769.452 431.701 768.98 430.777 768.03 cv
429.853 767.079 429.387 765.788 429.387 764.163 cv
429.387 763.396 429.504 762.685 429.734 762.028 cv
429.959 761.37 430.291 760.812 430.732 760.341 cv
431.168 759.87 431.703 759.513 432.346 759.263 cv
432.982 759.013 433.691 758.888 434.472 758.888 cv
435.484 758.888 436.353 759.103 437.08 759.534 cv
437.802 759.956 438.353 760.511 438.709 761.189 cv
439.07 761.868 439.25 762.556 439.25 763.263 cv
439.25 763.911 439.062 764.333 438.689 764.528 cv
438.316 764.722 437.791 764.818 437.113 764.818 cv
f
442.828 763.343 mo
447.529 763.343 li
447.465 762.458 447.224 761.794 446.814 761.357 cv
446.392 760.915 445.851 760.696 445.172 760.696 cv
444.525 760.696 443.996 760.917 443.578 761.366 cv
443.166 761.812 442.912 762.47 442.828 763.343 cv
447.9 764.818 mo
442.828 764.818 li
442.834 765.405 442.953 765.929 443.181 766.376 cv
443.414 766.823 443.721 767.163 444.103 767.394 cv
444.486 767.62 444.908 767.734 445.375 767.734 cv
445.681 767.734 445.966 767.7 446.219 767.622 cv
446.478 767.552 446.724 767.437 446.969 767.28 cv
447.211 767.128 447.429 766.962 447.633 766.78 cv
447.832 766.607 448.097 766.364 448.422 766.062 cv
448.556 765.948 448.748 765.888 448.99 765.888 cv
449.258 765.888 449.472 765.962 449.64 766.11 cv
449.804 766.257 449.881 766.46 449.881 766.728 cv
449.881 766.962 449.793 767.235 449.607 767.546 cv
449.429 767.864 449.152 768.163 448.777 768.452 cv
448.406 768.737 447.937 768.98 447.381 769.167 cv
446.824 769.357 446.174 769.452 445.447 769.452 cv
443.779 769.452 442.488 768.98 441.56 768.03 cv
440.637 767.079 440.172 765.788 440.172 764.163 cv
440.172 763.396 440.287 762.685 440.519 762.028 cv
440.746 761.37 441.078 760.812 441.515 760.341 cv
441.951 759.87 442.488 759.513 443.129 759.263 cv
443.767 759.013 444.48 758.888 445.258 758.888 cv
446.267 758.888 447.137 759.103 447.871 759.534 cv
448.591 759.956 449.137 760.511 449.492 761.189 cv
449.851 761.868 450.037 762.556 450.037 763.263 cv
450.037 763.911 449.846 764.333 449.476 764.528 cv
449.101 764.722 448.576 764.818 447.9 764.818 cv
f
458.664 764.134 mo
458.664 763.448 458.558 762.86 458.349 762.37 cv
458.14 761.878 457.851 761.503 457.484 761.243 cv
457.117 760.98 456.701 760.847 456.252 760.847 cv
455.537 760.847 454.933 761.13 454.443 761.691 cv
453.951 762.257 453.703 763.085 453.703 764.183 cv
453.703 765.21 453.947 766.017 454.439 766.589 cv
454.926 767.163 455.525 767.448 456.252 767.448 cv
456.679 767.448 457.082 767.321 457.449 767.075 cv
457.82 766.823 458.113 766.448 458.332 765.948 cv
458.552 765.446 458.664 764.841 458.664 764.134 cv
453.58 760.366 mo
453.58 760.677 li
454.066 760.075 454.574 759.634 455.105 759.353 cv
455.623 759.068 456.222 758.925 456.887 758.925 cv
457.681 758.925 458.422 759.134 459.094 759.542 cv
459.765 759.956 460.293 760.558 460.683 761.349 cv
461.072 762.144 461.269 763.079 461.269 764.163 cv
461.269 764.958 461.156 765.694 460.933 766.364 cv
460.709 767.032 460.396 767.591 460.004 768.044 cv
459.611 768.493 459.148 768.845 458.615 769.089 cv
458.072 769.331 457.504 769.452 456.887 769.452 cv
456.148 769.452 455.523 769.304 455.021 769.005 cv
454.519 768.714 454.039 768.273 453.58 767.7 cv
453.58 771.593 li
453.58 772.728 453.164 773.302 452.336 773.302 cv
451.846 773.302 451.527 773.155 451.365 772.862 cv
451.213 772.564 451.131 772.14 451.131 771.571 cv
451.131 760.378 li
451.131 759.884 451.238 759.519 451.451 759.271 cv
451.666 759.032 451.963 758.907 452.336 758.907 cv
452.705 758.907 453.002 759.032 453.232 759.28 cv
453.466 759.534 453.58 759.892 453.58 760.366 cv
f
465.164 760.378 mo
465.164 767.88 li
465.164 768.396 465.041 768.788 464.795 769.052 cv
464.545 769.321 464.234 769.452 463.853 769.452 cv
463.472 769.452 463.168 769.319 462.926 769.046 cv
462.691 768.771 462.57 768.382 462.57 767.88 cv
462.57 760.452 li
462.57 759.943 462.691 759.558 462.926 759.298 cv
463.168 759.034 463.472 758.907 463.853 758.907 cv
464.234 758.907 464.545 759.034 464.795 759.298 cv
465.041 759.558 465.164 759.921 465.164 760.378 cv
463.881 757.7 mo
463.517 757.7 463.211 757.585 462.957 757.364 cv
462.697 757.142 462.57 756.833 462.57 756.429 cv
462.57 756.06 462.701 755.759 462.966 755.519 cv
463.228 755.284 463.533 755.163 463.881 755.163 cv
464.221 755.163 464.515 755.269 464.773 755.482 cv
465.033 755.7 465.164 756.017 465.164 756.429 cv
465.164 756.827 465.037 757.14 464.787 757.364 cv
464.533 757.585 464.232 757.7 463.881 757.7 cv
f
473.523 768.269 mo
471.24 764.503 li
469.832 765.831 li
469.832 767.898 li
469.832 768.396 469.699 768.778 469.435 769.046 cv
469.177 769.319 468.869 769.452 468.529 769.452 cv
468.131 769.452 467.814 769.321 467.588 769.052 cv
467.361 768.788 467.244 768.396 467.244 767.878 cv
467.244 756.816 li
467.244 756.241 467.359 755.804 467.576 755.501 cv
467.799 755.196 468.121 755.05 468.529 755.05 cv
468.927 755.05 469.242 755.187 469.478 755.46 cv
469.713 755.732 469.832 756.134 469.832 756.663 cv
469.832 762.956 li
472.748 759.894 li
473.109 759.517 473.381 759.253 473.574 759.114 cv
473.763 758.976 473.994 758.907 474.263 758.907 cv
474.59 758.907 474.857 759.011 475.08 759.216 cv
475.291 759.421 475.4 759.681 475.4 759.989 cv
475.4 760.368 475.047 760.878 474.346 761.511 cv
472.969 762.773 li
475.627 766.956 li
475.82 767.269 475.966 767.499 476.051 767.661 cv
476.135 767.821 476.181 767.982 476.181 768.124 cv
476.181 768.536 476.066 768.859 475.84 769.099 cv
475.615 769.335 475.316 769.452 474.955 769.452 cv
474.638 769.452 474.39 769.372 474.221 769.196 cv
474.051 769.025 473.814 768.714 473.523 768.269 cv
f
479.16 769.452 mo
478.767 769.452 478.431 769.327 478.146 769.071 cv
477.861 768.823 477.716 768.466 477.716 768.007 cv
477.716 767.622 477.855 767.288 478.127 767.013 cv
478.402 766.734 478.734 766.593 479.135 766.593 cv
479.533 766.593 479.871 766.734 480.158 767.005 cv
480.437 767.28 480.58 767.618 480.58 768.007 cv
480.58 768.46 480.437 768.816 480.158 769.068 cv
479.871 769.327 479.539 769.452 479.16 769.452 cv
f
492.058 766.243 mo
492.058 766.564 491.961 766.911 491.767 767.276 cv
491.576 767.648 491.279 767.995 490.881 768.327 cv
490.486 768.659 489.99 768.929 489.386 769.13 cv
488.785 769.333 488.105 769.437 487.355 769.437 cv
485.75 769.437 484.498 768.968 483.597 768.036 cv
482.703 767.101 482.252 765.847 482.252 764.276 cv
482.252 763.208 482.457 762.271 482.871 761.452 cv
483.279 760.638 483.875 760.005 484.652 759.558 cv
485.431 759.11 486.369 758.888 487.447 758.888 cv
488.121 758.888 488.734 758.985 489.299 759.183 cv
489.859 759.378 490.332 759.634 490.724 759.943 cv
491.111 760.257 491.41 760.585 491.613 760.935 cv
491.82 761.286 491.922 761.614 491.922 761.921 cv
491.922 762.23 491.808 762.493 491.578 762.708 cv
491.344 762.923 491.062 763.032 490.74 763.032 cv
490.521 763.032 490.342 762.976 490.199 762.866 cv
490.054 762.755 489.894 762.577 489.72 762.325 cv
489.402 761.847 489.074 761.484 488.724 761.245 cv
488.381 761.003 487.943 760.884 487.41 760.884 cv
486.648 760.884 486.027 761.181 485.556 761.78 cv
485.09 762.376 484.853 763.2 484.853 764.235 cv
484.853 764.724 484.916 765.175 485.037 765.583 cv
485.154 765.989 485.328 766.339 485.556 766.626 cv
485.787 766.913 486.06 767.132 486.383 767.28 cv
486.707 767.435 487.064 767.507 487.447 767.507 cv
487.969 767.507 488.414 767.386 488.783 767.146 cv
489.16 766.905 489.486 766.538 489.769 766.044 cv
489.927 765.753 490.097 765.526 490.279 765.36 cv
490.461 765.196 490.687 765.11 490.955 765.11 cv
491.271 765.11 491.535 765.234 491.74 765.474 cv
491.951 765.714 492.058 765.972 492.058 766.243 cv
f
500.644 764.183 mo
500.644 763.124 500.41 762.302 499.947 761.714 cv
499.484 761.118 498.857 760.825 498.072 760.825 cv
497.564 760.825 497.117 760.958 496.73 761.22 cv
496.344 761.482 496.049 761.868 495.84 762.384 cv
495.631 762.898 495.525 763.497 495.525 764.183 cv
495.525 764.86 495.627 765.45 495.834 765.956 cv
496.043 766.466 496.336 766.853 496.72 767.122 cv
497.105 767.388 497.554 767.526 498.072 767.526 cv
498.857 767.526 499.484 767.23 499.947 766.634 cv
500.41 766.044 500.644 765.224 500.644 764.183 cv
503.248 764.183 mo
503.248 764.952 503.127 765.667 502.892 766.321 cv
502.646 766.974 502.301 767.534 501.844 767.999 cv
501.388 768.468 500.842 768.827 500.211 769.079 cv
499.572 769.327 498.861 769.454 498.072 769.454 cv
497.287 769.454 496.58 769.327 495.951 769.071 cv
495.328 768.823 494.781 768.458 494.326 767.989 cv
493.865 767.513 493.517 766.956 493.273 766.314 cv
493.045 765.669 492.924 764.958 492.924 764.183 cv
492.924 763.396 493.047 762.677 493.281 762.025 cv
493.523 761.37 493.871 760.812 494.32 760.351 cv
494.771 759.89 495.314 759.534 495.951 759.28 cv
496.595 759.032 497.301 758.907 498.072 758.907 cv
498.857 758.907 499.57 759.032 500.211 759.288 cv
500.849 759.54 501.394 759.903 501.855 760.368 cv
502.312 760.843 502.658 761.398 502.894 762.04 cv
503.129 762.691 503.248 763.4 503.248 764.183 cv
f
513.14 764.372 mo
513.14 767.819 li
513.14 768.366 513.019 768.771 512.771 769.046 cv
512.521 769.319 512.199 769.454 511.793 769.454 cv
511.4 769.454 511.08 769.319 510.842 769.046 cv
510.595 768.771 510.47 768.366 510.47 767.819 cv
510.47 763.689 li
510.47 763.034 510.449 762.526 510.406 762.163 cv
510.361 761.81 510.238 761.509 510.045 761.28 cv
509.847 761.046 509.535 760.929 509.113 760.929 cv
508.263 760.929 507.707 761.22 507.437 761.81 cv
507.17 762.386 507.031 763.224 507.031 764.318 cv
507.031 767.819 li
507.031 768.357 506.908 768.765 506.67 769.042 cv
506.42 769.316 506.101 769.454 505.705 769.454 cv
505.308 769.454 504.988 769.316 504.738 769.042 cv
504.486 768.765 504.361 768.357 504.361 767.819 cv
504.361 760.4 li
504.361 759.911 504.472 759.54 504.697 759.288 cv
504.926 759.032 505.222 758.907 505.586 758.907 cv
505.943 758.907 506.238 759.03 506.478 759.263 cv
506.715 759.501 506.832 759.829 506.832 760.247 cv
506.832 760.491 li
507.285 759.956 507.767 759.56 508.277 759.312 cv
508.793 759.052 509.359 758.925 509.99 758.925 cv
510.64 758.925 511.201 759.056 511.668 759.316 cv
512.136 759.575 512.521 759.97 512.828 760.491 cv
513.267 759.964 513.736 759.569 514.238 759.312 cv
514.738 759.054 515.291 758.925 515.9 758.925 cv
516.605 758.925 517.22 759.068 517.734 759.345 cv
518.244 759.622 518.627 760.025 518.881 760.54 cv
519.101 761.013 519.211 761.749 519.211 762.757 cv
519.211 767.819 li
519.211 768.366 519.09 768.771 518.844 769.046 cv
518.597 769.319 518.269 769.454 517.865 769.454 cv
517.47 769.454 517.15 769.316 516.9 769.042 cv
516.65 768.765 516.523 768.357 516.523 767.819 cv
516.523 763.458 li
516.523 762.9 516.5 762.454 516.455 762.12 cv
516.408 761.782 516.277 761.499 516.072 761.273 cv
515.859 761.046 515.541 760.929 515.119 760.929 cv
514.777 760.929 514.453 761.036 514.144 761.237 cv
513.838 761.435 513.597 761.714 513.424 762.05 cv
513.238 762.487 513.14 763.263 513.14 764.372 cv
f
392.435 763.554 mo
392.433 763.55 392.433 763.544 392.433 763.536 cv
392.433 763.544 392.433 763.55 392.435 763.554 cv
cp
f
392.566 764.384 mo
392.568 764.384 392.568 764.384 392.569 764.384 cv
392.519 764.148 392.481 763.913 392.45 763.681 cv
392.481 763.915 392.519 764.15 392.566 764.384 cv
cp
f
393.425 766.79 mo
393.419 766.78 393.414 766.769 393.408 766.757 cv
393.414 766.769 393.419 766.78 393.425 766.79 cv
cp
f
393.343 766.63 mo
393.32 766.585 393.299 766.54 393.277 766.495 cv
393.299 766.542 393.32 766.585 393.343 766.63 cv
cp
f
392.807 765.31 mo
392.934 765.71 393.087 766.099 393.264 766.468 cv
393.084 766.091 392.934 765.702 392.811 765.31 cv
392.81 765.31 392.808 765.31 392.807 765.31 cv
cp
f
402.472 753.618 mo
402.974 753.618 403.344 753.657 403.767 753.73 cv
403.888 752.966 li
403.888 752.966 402.716 752.607 401.177 752.732 cv
401.056 752.318 li
401.535 752.216 401.894 751.79 401.894 751.282 cv
401.894 750.7 401.42 750.23 400.837 750.23 cv
400.254 750.23 399.781 750.7 399.781 751.282 cv
399.781 751.79 400.14 752.216 400.617 752.318 cv
400.751 752.78 li
399.117 753.005 397.816 753.642 397.816 753.642 cv
398.047 754.347 li
399.035 754.019 399.893 753.818 400.671 753.734 cv
401.432 753.653 402.006 753.618 402.472 753.618 cv
cp
f
393.405 757.476 mo
393.411 757.468 li
393.45 757.419 393.487 757.372 393.524 757.325 cv
393.211 757.101 li
392.723 756.743 li
392.696 756.782 391.929 757.487 391.322 758.792 cv
391.297 758.751 391.266 758.71 391.232 758.673 cv
391.051 758.474 390.797 758.372 390.474 758.378 cv
390.47 758.378 390.465 758.378 390.459 758.378 cv
390.26 758.378 390.122 758.312 390.033 758.232 cv
390.122 758.118 390.176 757.976 390.176 757.818 cv
390.176 757.45 389.876 757.15 389.506 757.15 cv
389.137 757.15 388.838 757.45 388.838 757.818 cv
388.838 758.189 389.137 758.487 389.506 758.487 cv
389.564 758.487 389.619 758.478 389.673 758.466 cv
389.838 758.65 390.098 758.808 390.481 758.8 cv
390.677 758.798 390.822 758.849 390.918 758.956 cv
391.029 759.077 391.067 759.251 391.078 759.384 cv
391.077 759.386 391.077 759.388 391.075 759.388 cv
390.639 760.577 390.764 762.058 390.764 762.058 cv
391.821 762.101 li
391.843 761.562 391.92 760.618 392.193 759.87 cv
392.719 758.421 393.378 757.515 393.405 757.476 cv
cp
f
411.672 754.501 mo
411.304 754.501 411.004 754.8 411.004 755.171 cv
411.004 755.228 411.012 755.282 411.027 755.335 cv
410.844 755.501 410.683 755.763 410.689 756.146 cv
410.693 756.343 410.642 756.485 410.535 756.583 cv
410.451 756.657 410.344 756.698 410.24 756.724 cv
409.453 755.62 408.484 754.948 408.484 754.948 cv
407.724 755.761 li
408.299 756.282 408.885 756.937 409.453 757.751 cv
409.847 758.316 410.252 759.042 410.59 759.767 cv
411.613 759.28 li
411.613 759.28 411.146 758.124 410.488 757.089 cv
410.601 757.048 410.716 756.985 410.818 756.896 cv
411.019 756.716 411.117 756.46 411.111 756.138 cv
411.109 755.931 411.177 755.79 411.26 755.696 cv
411.375 755.784 411.517 755.839 411.672 755.839 cv
412.043 755.839 412.341 755.54 412.341 755.171 cv
412.341 754.8 412.043 754.501 411.672 754.501 cv
cp
f
409.015 763.704 mo
407.605 764.39 405.287 765.298 402.234 765.724 cv
401.035 765.89 399.874 765.95 398.805 765.95 cv
397.415 765.95 396.186 765.847 395.243 765.728 cv
394.167 765.593 393.325 765.427 392.811 765.31 cv
392.934 765.702 393.084 766.091 393.264 766.468 cv
393.268 766.478 393.272 766.489 393.277 766.495 cv
393.299 766.54 393.32 766.585 393.343 766.63 cv
393.364 766.673 393.385 766.716 393.408 766.757 cv
393.414 766.769 393.419 766.78 393.425 766.79 cv
393.727 767.36 394.091 767.884 394.505 768.339 cv
395.945 769.913 397.412 770.163 397.426 770.165 cv
397.449 770.167 li
397.471 770.175 li
397.484 770.181 398.784 770.601 400.762 770.601 cv
402.707 770.601 404.617 770.208 406.435 769.433 cv
407.783 768.743 409.058 767.696 409.689 766.763 cv
410.177 766.04 410.531 765.271 410.74 764.47 cv
410.851 764.044 410.939 763.362 410.887 762.644 cv
410.49 762.911 409.863 763.29 409.015 763.704 cv
cp
f
397.885 757.073 mo
399.442 757.073 400.702 758.335 400.702 759.892 cv
400.702 761.446 399.442 762.706 397.885 762.706 cv
396.331 762.706 395.07 761.446 395.07 759.892 cv
395.07 758.335 396.331 757.073 397.885 757.073 cv
cp
406.127 757.144 mo
407.088 757.144 407.871 757.925 407.871 758.886 cv
407.871 759.849 407.088 760.63 406.127 760.63 cv
405.166 760.63 404.385 759.849 404.385 758.886 cv
404.385 757.925 405.166 757.144 406.127 757.144 cv
cp
393.858 757.81 mo
393.817 757.87 393.205 758.735 392.722 760.064 cv
392.361 761.058 392.377 762.507 392.377 762.523 cv
392.377 762.526 li
392.377 762.866 392.396 763.202 392.433 763.536 cv
392.433 763.544 392.433 763.55 392.435 763.554 cv
392.439 763.597 392.447 763.638 392.45 763.681 cv
392.481 763.913 392.519 764.148 392.569 764.384 cv
393.269 764.562 397.448 765.536 402.117 764.886 cv
405.045 764.478 407.267 763.612 408.617 762.958 cv
409.738 762.415 410.459 761.923 410.736 761.72 cv
410.459 760.693 409.695 759.079 408.994 758.073 cv
406.988 755.208 404.826 754.474 403.716 754.29 cv
403.293 754.222 402.953 754.181 402.472 754.181 cv
402.026 754.181 401.471 754.218 400.73 754.296 cv
399.987 754.372 399.158 754.568 398.198 754.892 cv
396.85 755.343 395.63 756.05 394.671 756.939 cv
394.638 756.97 li
394.496 757.101 394.199 757.376 393.858 757.81 cv
cp
f
488.747 320.582 mo
489.643 327.25 li
463.762 330.763 li
462.579 324.525 li
462.83 324.489 li
488.747 320.582 li
cp
.0779431 .0682383 .132265 0 cmyk
f
464.515 139.665 mo
488.747 320.582 li
462.83 324.489 li
462.579 324.525 li
441.86 215.624 li
441.86 215.588 li
453.904 132.245 li
460.141 134.288 li
462.507 135.077 464.228 137.156 464.515 139.665 cv
cp
.594537 .380957 .360998 .0374151 cmyk
f
428.059 123.714 mo
453.904 132.245 li
441.86 215.588 li
441.86 215.624 li
441.322 219.424 li
439.1 234.802 439.279 250.431 441.824 265.773 cv
450.786 319.399 li
450.786 319.399 422.001 328.755 397.518 331.049 cv
397.518 241.935 li
397.518 233.834 396.263 225.804 393.826 218.097 cv
428.059 123.714 li
cp
.550042 .351965 .326757 .0161135 cmyk
f
412.358 135.399 mo
417.986 120.38 li
428.059 123.714 li
393.826 218.097 li
393.431 216.807 392.965 215.516 392.499 214.226 cv
387.66 201.321 li
412.358 135.399 li
cp
.111421 .0975662 .145907 0 cmyk
f
417.986 120.38 mo
412.358 135.399 li
407.591 138.482 398.987 142.605 387.66 142.605 cv
376.297 142.605 367.693 138.446 362.962 135.399 cv
357.334 120.38 li
358.911 119.842 360.632 120.057 362.066 120.989 cv
366.475 123.893 377.157 130.166 387.66 130.166 cv
398.163 130.166 408.845 123.893 413.254 120.989 cv
414.652 120.057 416.409 119.842 417.986 120.38 cv
cp
.594537 .380957 .360998 .0374151 cmyk
f
412.358 135.399 mo
387.66 201.321 li
362.962 135.399 li
367.693 138.446 376.297 142.605 387.66 142.605 cv
398.987 142.605 407.591 138.482 412.358 135.399 cv
cp
f
394.148 233.404 mo
394.148 232.006 393.001 230.894 391.603 230.894 cv
390.241 230.894 389.094 232.006 389.094 233.404 cv
389.094 234.802 390.241 235.913 391.603 235.913 cv
393.001 235.913 394.148 234.802 394.148 233.404 cv
cp
395.295 318.933 mo
395.295 317.535 394.184 316.424 392.786 316.424 cv
391.388 316.424 390.277 317.535 390.277 318.933 cv
390.277 320.331 391.388 321.443 392.786 321.443 cv
394.184 321.443 395.295 320.331 395.295 318.933 cv
cp
395.295 302.121 mo
395.295 300.723 394.184 299.612 392.786 299.612 cv
391.388 299.612 390.277 300.723 390.277 302.121 cv
390.277 303.483 391.388 304.631 392.786 304.631 cv
394.184 304.631 395.295 303.483 395.295 302.121 cv
cp
395.295 285.273 mo
395.295 283.911 394.184 282.764 392.786 282.764 cv
391.388 282.764 390.277 283.911 390.277 285.273 cv
390.277 286.671 391.388 287.783 392.786 287.783 cv
394.184 287.783 395.295 286.671 395.295 285.273 cv
cp
395.295 268.461 mo
395.295 267.063 394.184 265.952 392.786 265.952 cv
391.388 265.952 390.277 267.063 390.277 268.461 cv
390.277 269.859 391.388 270.971 392.786 270.971 cv
394.184 270.971 395.295 269.859 395.295 268.461 cv
cp
395.295 251.65 mo
395.295 250.251 394.184 249.14 392.786 249.14 cv
391.388 249.14 390.277 250.251 390.277 251.65 cv
390.277 253.012 391.388 254.159 392.786 254.159 cv
394.184 254.159 395.295 253.012 395.295 251.65 cv
cp
362.962 135.399 mo
387.66 201.321 li
392.499 214.226 li
392.965 215.516 393.431 216.807 393.826 218.097 cv
396.263 225.804 397.518 233.834 397.518 241.935 cv
397.518 331.049 li
394.112 331.372 390.814 331.551 387.66 331.551 cv
387.66 248.997 li
387.66 239.82 386.047 230.715 382.928 222.076 cv
347.225 123.714 li
357.334 120.38 li
362.962 135.399 li
cp
.0779431 .0682383 .132265 0 cmyk
f
392.786 249.14 mo
394.184 249.14 395.295 250.251 395.295 251.65 cv
395.295 253.012 394.184 254.159 392.786 254.159 cv
391.388 254.159 390.277 253.012 390.277 251.65 cv
390.277 250.251 391.388 249.14 392.786 249.14 cv
cp
.594537 .380957 .360998 .0374151 cmyk
f
392.786 265.952 mo
394.184 265.952 395.295 267.063 395.295 268.461 cv
395.295 269.859 394.184 270.971 392.786 270.971 cv
391.388 270.971 390.277 269.859 390.277 268.461 cv
390.277 267.063 391.388 265.952 392.786 265.952 cv
cp
f
392.786 282.764 mo
394.184 282.764 395.295 283.911 395.295 285.273 cv
395.295 286.671 394.184 287.783 392.786 287.783 cv
391.388 287.783 390.277 286.671 390.277 285.273 cv
390.277 283.911 391.388 282.764 392.786 282.764 cv
cp
f
392.786 299.612 mo
394.184 299.612 395.295 300.723 395.295 302.121 cv
395.295 303.483 394.184 304.631 392.786 304.631 cv
391.388 304.631 390.277 303.483 390.277 302.121 cv
390.277 300.723 391.388 299.612 392.786 299.612 cv
cp
f
392.786 316.424 mo
394.184 316.424 395.295 317.535 395.295 318.933 cv
395.295 320.331 394.184 321.443 392.786 321.443 cv
391.388 321.443 390.277 320.331 390.277 318.933 cv
390.277 317.535 391.388 316.424 392.786 316.424 cv
cp
f
391.603 230.894 mo
393.001 230.894 394.148 232.006 394.148 233.404 cv
394.148 234.802 393.001 235.913 391.603 235.913 cv
390.241 235.913 389.094 234.802 389.094 233.404 cv
389.094 232.006 390.241 230.894 391.603 230.894 cv
cp
f
387.66 248.997 mo
387.66 331.551 li
361.851 331.551 324.534 319.399 324.534 319.399 cv
333.496 265.773 li
336.041 250.431 336.22 234.802 333.998 219.424 cv
333.424 215.588 li
321.416 132.245 li
347.225 123.714 li
382.928 222.076 li
386.047 230.715 387.66 239.82 387.66 248.997 cv
cp
.550042 .351965 .326757 .0161135 cmyk
f
321.416 132.245 mo
333.424 215.588 li
312.741 324.525 li
312.49 324.489 li
286.573 320.582 li
310.805 139.665 li
311.092 137.156 312.813 135.077 315.178 134.288 cv
321.416 132.245 li
cp
.594537 .380957 .360998 .0374151 cmyk
f
312.741 324.525 mo
311.558 330.763 li
285.677 327.25 li
286.573 320.582 li
312.49 324.489 li
312.741 324.525 li
cp
.0779431 .0682383 .132265 0 cmyk
f
265.392 453.232 mo
306.21 554.103 li
277.836 563.105 li
273.027 493.32 265.711 454.964 265.392 453.232 cv
cp
0 .793362 .599786 0 cmyk
f
221.042 483.065 mo
223.458 483.019 225.372 481.013 225.304 478.598 cv
225.258 476.205 223.275 474.29 220.859 474.336 cv
218.444 474.404 216.552 476.387 216.598 478.803 cv
216.643 481.196 218.649 483.11 221.042 483.065 cv
cp
221.931 524.065 mo
224.346 524.019 226.261 522.036 226.192 519.621 cv
226.147 517.205 224.164 515.29 221.748 515.359 cv
219.332 515.404 217.418 517.41 217.486 519.803 cv
217.532 522.219 219.538 524.133 221.931 524.065 cv
cp
222.819 565.088 mo
225.235 565.042 227.15 563.037 227.081 560.621 cv
227.036 558.228 225.03 556.313 222.637 556.359 cv
220.221 556.427 218.307 558.41 218.375 560.826 cv
218.421 563.219 220.404 565.133 222.819 565.088 cv
cp
223.708 606.088 mo
226.124 606.042 228.016 604.06 227.97 601.644 cv
227.924 599.228 225.919 597.314 223.526 597.382 cv
221.11 597.427 219.196 599.433 219.264 601.826 cv
219.31 604.242 221.292 606.156 223.708 606.088 cv
cp
269.312 575.252 mo
269.312 570.877 li
240.049 570.877 li
240.049 575.252 li
269.312 575.252 li
cp
277.836 563.105 mo
280.388 600.413 282.234 646.723 281.892 701.238 cv
281.892 701.238 255.82 713.841 216.803 713.841 cv
216.552 701.124 li
216.187 682.231 li
211.834 462.963 li
220.084 460.867 224.483 457.562 226.739 454.166 cv
230.864 447.967 227.719 441.449 227.719 441.449 cv
265.369 453.163 li
265.369 453.163 265.369 453.186 265.392 453.232 cv
265.711 454.964 273.027 493.32 277.836 563.105 cv
cp
0 .758755 .566216 0 cmyk
f
269.312 570.877 mo
269.312 575.252 li
240.049 575.252 li
240.049 570.877 li
269.312 570.877 li
cp
.0468757 .820493 .640406 .00225834 cmyk
f
227.97 601.644 mo
228.016 604.06 226.124 606.042 223.708 606.088 cv
221.292 606.156 219.31 604.242 219.264 601.826 cv
219.196 599.433 221.11 597.427 223.526 597.382 cv
225.919 597.314 227.924 599.228 227.97 601.644 cv
cp
.149233 .138094 .259068 0 cmyk
f
227.719 441.449 mo
227.719 441.449 230.864 447.967 226.739 454.166 cv
205.954 454.166 li
185.169 454.166 li
181.022 447.967 184.167 441.449 184.167 441.449 cv
184.167 441.449 194.172 446.623 205.954 446.623 cv
217.737 446.623 227.719 441.449 227.719 441.449 cv
cp
.0468757 .820493 .640406 .00225834 cmyk
f
227.081 560.621 mo
227.15 563.037 225.235 565.042 222.819 565.088 cv
220.404 565.133 218.421 563.219 218.375 560.826 cv
218.307 558.41 220.221 556.427 222.637 556.359 cv
225.03 556.313 227.036 558.228 227.081 560.621 cv
cp
.149233 .138094 .259068 0 cmyk
f
205.954 454.166 mo
226.739 454.166 li
224.483 457.562 220.084 460.867 211.834 462.963 cv
216.187 682.231 li
216.165 682.231 li
209.35 680.134 202.536 680.134 195.721 682.231 cv
200.052 462.963 li
191.801 460.867 187.403 457.562 185.169 454.166 cv
205.954 454.166 li
cp
.0468757 .820493 .640406 .00225834 cmyk
f
226.192 519.621 mo
226.261 522.036 224.346 524.019 221.931 524.065 cv
219.538 524.133 217.532 522.219 217.486 519.803 cv
217.418 517.41 219.332 515.404 221.748 515.359 cv
224.164 515.29 226.147 517.205 226.192 519.621 cv
cp
.149233 .138094 .259068 0 cmyk
f
225.304 478.598 mo
225.372 481.013 223.458 483.019 221.042 483.065 cv
218.649 483.11 216.643 481.196 216.598 478.803 cv
216.552 476.387 218.444 474.404 220.859 474.336 cv
223.275 474.29 225.258 476.205 225.304 478.598 cv
cp
f
216.187 682.231 mo
216.552 701.124 li
216.529 701.124 li
209.487 699.21 202.422 699.21 195.357 701.124 cv
195.721 682.231 li
202.536 680.134 209.35 680.134 216.165 682.231 cv
216.187 682.231 li
cp
.0468757 .820493 .640406 .00225834 cmyk
f
171.86 575.252 mo
171.86 570.877 li
142.597 570.877 li
142.597 575.252 li
171.86 575.252 li
cp
191.095 601.872 mo
191.118 601.12 190.502 600.481 189.75 600.459 cv
181.044 600.231 li
181.022 600.231 181.022 600.231 180.999 600.231 cv
180.247 600.231 179.631 600.823 179.609 601.575 cv
179.586 602.35 180.201 602.966 180.953 602.988 cv
189.659 603.239 li
189.682 603.239 189.682 603.239 189.705 603.239 cv
190.457 603.239 191.072 602.624 191.095 601.872 cv
cp
192.189 560.871 mo
192.212 560.119 191.619 559.481 190.844 559.458 cv
182.138 559.208 li
181.363 559.208 180.725 559.8 180.702 560.575 cv
180.68 561.327 181.295 561.965 182.07 561.988 cv
190.776 562.216 li
190.799 562.216 190.799 562.216 190.821 562.216 cv
191.551 562.216 192.166 561.624 192.189 560.871 cv
cp
193.306 519.871 mo
193.306 519.096 192.713 518.458 191.938 518.435 cv
183.232 518.208 li
183.209 518.208 183.209 518.208 183.187 518.208 cv
182.457 518.208 181.842 518.823 181.819 519.552 cv
181.796 520.327 182.389 520.965 183.164 520.988 cv
191.87 521.216 li
191.893 521.216 191.893 521.216 191.915 521.216 cv
192.667 521.216 193.283 520.623 193.306 519.871 cv
cp
194.4 478.871 mo
194.422 478.096 193.807 477.458 193.055 477.435 cv
184.326 477.207 li
184.303 477.207 184.303 477.207 184.281 477.207 cv
183.551 477.207 182.936 477.823 182.913 478.552 cv
182.89 479.327 183.506 479.965 184.258 479.988 cv
192.964 480.216 li
192.987 480.216 192.987 480.216 193.009 480.216 cv
193.761 480.216 194.377 479.6 194.4 478.871 cv
cp
200.052 462.963 mo
195.721 682.231 li
195.357 701.124 li
195.106 713.841 li
156.089 713.841 130.016 701.238 130.016 701.238 cv
129.674 646.723 131.521 600.413 134.073 563.105 cv
138.882 493.32 146.198 454.964 146.517 453.232 cv
146.539 453.186 146.539 453.163 146.539 453.163 cv
184.167 441.449 li
184.167 441.449 181.022 447.967 185.169 454.166 cv
187.403 457.562 191.801 460.867 200.052 462.963 cv
cp
0 .758755 .566216 0 cmyk
f
193.055 477.435 mo
193.807 477.458 194.422 478.096 194.4 478.871 cv
194.377 479.6 193.761 480.216 193.009 480.216 cv
192.987 480.216 192.987 480.216 192.964 480.216 cv
184.258 479.988 li
183.506 479.965 182.89 479.327 182.913 478.552 cv
182.936 477.823 183.551 477.207 184.281 477.207 cv
184.303 477.207 184.303 477.207 184.326 477.207 cv
193.055 477.435 li
cp
.0468757 .820493 .640406 .00225834 cmyk
f
191.938 518.435 mo
192.713 518.458 193.306 519.096 193.306 519.871 cv
193.283 520.623 192.667 521.216 191.915 521.216 cv
191.893 521.216 191.893 521.216 191.87 521.216 cv
183.164 520.988 li
182.389 520.965 181.796 520.327 181.819 519.552 cv
181.842 518.823 182.457 518.208 183.187 518.208 cv
183.209 518.208 183.209 518.208 183.232 518.208 cv
191.938 518.435 li
cp
f
190.844 559.458 mo
191.619 559.481 192.212 560.119 192.189 560.871 cv
192.166 561.624 191.551 562.216 190.821 562.216 cv
190.799 562.216 190.799 562.216 190.776 562.216 cv
182.07 561.988 li
181.295 561.965 180.68 561.327 180.702 560.575 cv
180.725 559.8 181.363 559.208 182.138 559.208 cv
190.844 559.458 li
cp
f
189.75 600.459 mo
190.502 600.481 191.118 601.12 191.095 601.872 cv
191.072 602.624 190.457 603.239 189.705 603.239 cv
189.682 603.239 189.682 603.239 189.659 603.239 cv
180.953 602.988 li
180.201 602.966 179.586 602.35 179.609 601.575 cv
179.631 600.823 180.247 600.231 180.999 600.231 cv
181.022 600.231 181.022 600.231 181.044 600.231 cv
189.75 600.459 li
cp
f
171.86 570.877 mo
171.86 575.252 li
142.597 575.252 li
142.597 570.877 li
171.86 570.877 li
cp
f
105.676 554.103 mo
146.517 453.232 li
146.198 454.964 138.882 493.32 134.073 563.105 cv
105.676 554.103 li
cp
0 .793362 .599786 0 cmyk
f
475.771 711.094 mo
475.945 712.118 475.493 713.195 474.59 713.699 cv
470.874 715.8 466.983 716.964 462.937 717.346 cv
462.155 717.415 461.391 717.103 460.853 716.512 cv
459.412 714.897 li
409.482 475.789 li
416.55 475.789 li
421.343 485.931 425.824 497.168 430.044 509.342 cv
431.086 512.329 432.111 515.368 433.135 518.477 cv
433.378 519.259 433.639 520.057 433.899 520.856 cv
450.815 573.6 463.58 641.296 475.771 711.094 cv
cp
.0538949 .14255 .277165 0 cmyk
f
409.482 475.789 mo
459.412 714.897 li
458.543 713.942 li
457.866 713.195 456.824 712.935 455.869 713.265 cv
451.128 714.932 li
450.103 715.297 449.478 716.234 449.478 717.259 cv
405.574 476.362 li
405.574 475.789 li
409.482 475.789 li
cp
.10782 .229129 .33109 0 cmyk
f
449.651 718.197 mo
449.773 718.509 449.825 718.822 449.825 719.135 cv
449.825 720.125 449.234 721.08 448.262 721.444 cv
443.399 723.285 438.415 724.362 433.309 724.675 cv
432.093 724.761 430.999 723.893 430.739 722.695 cv
401.423 477.752 li
402.726 477.752 li
403.559 477.752 404.219 477.092 404.219 476.258 cv
404.219 475.789 li
405.574 475.789 li
405.574 476.362 li
449.478 717.259 li
449.478 717.276 li
449.478 717.589 449.53 717.902 449.651 718.197 cv
cp
.0538949 .14255 .277165 0 cmyk
f
448.922 508.178 mo
449.564 508.126 449.999 508.821 449.703 509.377 cv
444.163 519.78 li
444.163 519.78 438.589 517.904 433.135 518.477 cv
432.111 515.368 431.086 512.329 430.044 509.342 cv
430.061 509.342 li
447.255 508.283 li
448.922 508.178 li
cp
.0173342 .0701305 .123598 0 cmyk
f
449.478 717.276 mo
449.651 718.197 li
449.53 717.902 449.478 717.589 449.478 717.276 cv
cp
.149233 .138094 .259068 0 cmyk
f
437.008 392.289 mo
447.255 508.283 li
430.061 509.342 li
421.152 437.495 li
432.892 387.652 li
435.133 388.138 436.8 390.014 437.008 392.289 cv
cp
.10782 .229129 .33109 0 cmyk
f
444.163 519.78 mo
433.899 520.856 li
433.639 520.057 433.378 519.259 433.135 518.477 cv
438.589 517.904 444.163 519.78 444.163 519.78 cv
cp
.171939 .310887 .412787 0 cmyk
f
432.892 387.652 mo
421.152 437.495 li
416.55 456.981 li
404.219 456.981 li
404.219 456.529 li
404.219 455.696 403.559 455.036 402.726 455.036 cv
396.092 455.036 li
396.092 427.648 li
396.092 427.596 li
396.092 424.591 395.571 421.622 394.598 418.791 cv
412.226 399.288 li
413.094 398.333 413.198 396.891 412.469 395.814 cv
408.422 389.84 li
409.134 390.604 410.124 391.038 411.201 391.038 cv
426.727 391.038 li
427.804 391.038 428.359 389.771 427.647 388.972 cv
424.903 385.933 li
432.892 387.652 li
cp
.0538949 .14255 .277165 0 cmyk
f
401.423 477.752 mo
430.739 722.695 li
430.096 719.604 li
429.784 718.179 428.342 717.328 426.953 717.728 cv
424.921 718.336 li
423.879 718.648 423.149 719.621 423.149 720.715 cv
397.377 477.752 li
401.423 477.752 li
cp
.10782 .229129 .33109 0 cmyk
f
427.647 388.972 mo
428.359 389.771 427.804 391.038 426.727 391.038 cv
411.201 391.038 li
410.124 391.038 409.134 390.604 408.422 389.84 cv
407.745 388.833 li
401.18 374.661 li
401.18 372.352 li
401.18 370.007 399.287 368.114 396.943 368.114 cv
396.943 363.772 li
403.195 363.772 li
404.219 363.772 405.227 364.207 405.921 364.988 cv
424.886 385.933 li
424.903 385.933 li
427.647 388.972 li
cp
f
423.149 720.715 mo
423.149 721.722 li
423.149 722.834 422.403 723.806 421.343 724.119 cv
413.511 726.377 406.321 728.287 396.092 728.739 cv
396.092 538.31 li
396.092 477.752 li
397.377 477.752 li
423.149 720.715 li
cp
.0538949 .14255 .277165 0 cmyk
f
412.642 466.394 mo
412.642 465.647 412.034 465.039 411.288 465.039 cv
410.541 465.039 409.933 465.647 409.933 466.394 cv
409.933 467.14 410.541 467.748 411.288 467.748 cv
412.034 467.748 412.642 467.14 412.642 466.394 cv
cp
419.798 458.005 mo
419.798 474.782 li
419.798 475.338 419.346 475.789 418.79 475.789 cv
416.55 475.789 li
409.482 475.789 li
405.574 475.789 li
404.219 475.789 li
404.219 468.078 li
405.366 468.078 li
406.286 468.078 407.05 467.314 407.05 466.394 cv
407.05 465.473 406.286 464.709 405.366 464.709 cv
404.219 464.709 li
404.219 456.981 li
416.55 456.981 li
418.79 456.981 li
419.346 456.981 419.798 457.432 419.798 458.005 cv
cp
.0173342 .0701305 .123598 0 cmyk
f
412.469 395.814 mo
413.198 396.891 413.094 398.333 412.226 399.288 cv
394.598 418.791 li
394.424 418.339 394.268 417.888 394.077 417.436 cv
391.333 410.767 li
400.763 387.826 li
401.041 387.148 401.18 386.419 401.18 385.689 cv
401.18 374.661 li
407.745 388.833 li
407.919 389.215 408.144 389.562 408.422 389.84 cv
412.469 395.814 li
cp
f
411.288 465.039 mo
412.034 465.039 412.642 465.647 412.642 466.394 cv
412.642 467.14 412.034 467.748 411.288 467.748 cv
410.541 467.748 409.933 467.14 409.933 466.394 cv
409.933 465.647 410.541 465.039 411.288 465.039 cv
cp
.10782 .229129 .33109 0 cmyk
f
407.745 388.833 mo
408.422 389.84 li
408.144 389.562 407.919 389.215 407.745 388.833 cv
cp
.149233 .138094 .259068 0 cmyk
f
401.284 468.078 mo
401.284 473.288 li
401.284 474.035 400.677 474.643 399.947 474.643 cv
387.096 474.643 li
386.349 474.643 385.741 474.035 385.741 473.288 cv
385.741 459.499 li
385.741 458.752 386.349 458.144 387.096 458.144 cv
399.947 458.144 li
400.677 458.144 401.284 458.752 401.284 459.499 cv
401.284 464.709 li
395.189 464.709 li
394.268 464.709 393.521 465.473 393.521 466.394 cv
393.521 467.314 394.268 468.078 395.189 468.078 cv
401.284 468.078 li
cp
.0173342 .0701305 .123598 0 cmyk
f
405.366 464.709 mo
404.219 464.709 li
401.284 464.709 li
395.189 464.709 li
394.268 464.709 393.521 465.473 393.521 466.394 cv
393.521 467.314 394.268 468.078 395.189 468.078 cv
401.284 468.078 li
404.219 468.078 li
405.366 468.078 li
406.286 468.078 407.05 467.314 407.05 466.394 cv
407.05 465.473 406.286 464.709 405.366 464.709 cv
cp
.10782 .229129 .33109 0 cmyk
f
401.18 374.661 mo
401.18 385.689 li
401.18 386.419 401.041 387.148 400.763 387.826 cv
391.333 410.767 li
381.903 387.826 li
381.625 387.148 381.486 386.419 381.486 385.689 cv
381.486 374.661 li
401.18 374.661 li
cp
.171939 .310887 .412787 0 cmyk
f
401.18 372.352 mo
401.18 374.661 li
381.486 374.661 li
381.486 372.352 li
381.486 370.007 383.379 368.114 385.724 368.114 cv
391.333 368.114 li
396.943 368.114 li
399.287 368.114 401.18 370.007 401.18 372.352 cv
cp
f
396.943 363.772 mo
396.943 368.114 li
391.333 368.114 li
385.724 368.114 li
383.379 368.114 381.486 370.007 381.486 372.352 cv
381.486 374.661 li
374.939 388.833 li
374.261 389.84 li
373.549 390.587 372.542 391.038 371.465 391.038 cv
355.957 391.038 li
354.88 391.038 354.307 389.771 355.036 388.972 cv
357.78 385.933 li
376.745 364.988 li
377.457 364.207 378.447 363.772 379.489 363.772 cv
391.333 363.772 li
396.943 363.772 li
cp
.10782 .229129 .33109 0 cmyk
f
396.092 538.31 mo
396.092 728.739 li
395.293 728.773 394.477 728.808 393.643 728.825 cv
392.236 728.843 390.934 728.044 390.291 726.793 cv
388.815 723.893 li
389.128 723.841 389.423 723.772 389.735 723.702 cv
390.656 723.494 391.333 722.677 391.333 721.722 cv
391.333 538.31 li
392.358 538.31 li
392.358 539.057 392.966 539.665 393.712 539.665 cv
394.459 539.665 395.067 539.057 395.067 538.31 cv
396.092 538.31 li
cp
f
395.067 530.269 mo
395.067 529.522 394.459 528.915 393.712 528.915 cv
392.966 528.915 392.358 529.522 392.358 530.269 cv
392.358 531.016 392.966 531.624 393.712 531.624 cv
394.459 531.624 395.067 531.016 395.067 530.269 cv
cp
395.067 522.228 mo
395.067 521.482 394.459 520.874 393.712 520.874 cv
392.966 520.874 392.358 521.482 392.358 522.228 cv
392.358 522.975 392.966 523.583 393.712 523.583 cv
394.459 523.583 395.067 522.975 395.067 522.228 cv
cp
395.067 514.187 mo
395.067 513.441 394.459 512.833 393.712 512.833 cv
392.966 512.833 392.358 513.441 392.358 514.187 cv
392.358 514.934 392.966 515.542 393.712 515.542 cv
394.459 515.542 395.067 514.934 395.067 514.187 cv
cp
395.067 506.147 mo
395.067 505.4 394.459 504.792 393.712 504.792 cv
392.966 504.792 392.358 505.4 392.358 506.147 cv
392.358 506.911 392.966 507.519 393.712 507.519 cv
394.459 507.519 395.067 506.911 395.067 506.147 cv
cp
395.067 498.123 mo
395.067 497.359 394.459 496.751 393.712 496.751 cv
392.966 496.751 392.358 497.359 392.358 498.123 cv
392.358 498.87 392.966 499.478 393.712 499.478 cv
394.459 499.478 395.067 498.87 395.067 498.123 cv
cp
395.067 490.082 mo
395.067 489.335 394.459 488.728 393.712 488.728 cv
392.966 488.728 392.358 489.335 392.358 490.082 cv
392.358 490.829 392.966 491.437 393.712 491.437 cv
394.459 491.437 395.067 490.829 395.067 490.082 cv
cp
395.067 482.041 mo
395.067 481.294 394.459 480.687 393.712 480.687 cv
392.966 480.687 392.358 481.294 392.358 482.041 cv
392.358 482.788 392.966 483.396 393.712 483.396 cv
394.459 483.396 395.067 482.788 395.067 482.041 cv
cp
396.092 477.752 mo
396.092 538.31 li
395.067 538.31 li
395.067 537.563 394.459 536.955 393.712 536.955 cv
392.966 536.955 392.358 537.563 392.358 538.31 cv
391.333 538.31 li
391.333 477.752 li
396.092 477.752 li
cp
f
395.084 450.173 mo
395.084 449.426 394.477 448.818 393.73 448.818 cv
392.983 448.818 392.375 449.426 392.375 450.173 cv
392.375 450.92 392.983 451.528 393.73 451.528 cv
394.477 451.528 395.084 450.92 395.084 450.173 cv
cp
395.084 441.107 mo
395.084 440.361 394.477 439.753 393.73 439.753 cv
392.983 439.753 392.375 440.361 392.375 441.107 cv
392.375 441.854 392.983 442.462 393.73 442.462 cv
394.477 442.462 395.084 441.854 395.084 441.107 cv
cp
395.084 432.042 mo
395.084 431.295 394.477 430.687 393.73 430.687 cv
392.983 430.687 392.375 431.295 392.375 432.042 cv
392.375 432.789 392.983 433.396 393.73 433.396 cv
394.477 433.396 395.084 432.789 395.084 432.042 cv
cp
396.092 427.648 mo
396.092 455.036 li
391.333 455.036 li
391.333 422.386 li
396.092 427.648 li
cp
f
396.092 427.596 mo
396.092 427.648 li
391.333 422.386 li
370.458 399.288 li
369.572 398.333 369.486 396.891 370.215 395.814 cv
374.261 389.84 li
374.539 389.545 374.765 389.215 374.939 388.833 cv
381.486 374.661 li
381.486 385.689 li
381.486 386.419 381.625 387.148 381.903 387.826 cv
391.333 410.767 li
394.077 417.436 li
394.268 417.888 394.424 418.339 394.598 418.791 cv
395.571 421.622 396.092 424.591 396.092 427.596 cv
cp
.0173342 .0701305 .123598 0 cmyk
f
393.73 430.687 mo
394.477 430.687 395.084 431.295 395.084 432.042 cv
395.084 432.789 394.477 433.396 393.73 433.396 cv
392.983 433.396 392.375 432.789 392.375 432.042 cv
392.375 431.295 392.983 430.687 393.73 430.687 cv
cp
.0779431 .0682383 .132265 0 cmyk
f
393.73 439.753 mo
394.477 439.753 395.084 440.361 395.084 441.107 cv
395.084 441.854 394.477 442.462 393.73 442.462 cv
392.983 442.462 392.375 441.854 392.375 441.107 cv
392.375 440.361 392.983 439.753 393.73 439.753 cv
cp
f
393.73 448.818 mo
394.477 448.818 395.084 449.426 395.084 450.173 cv
395.084 450.92 394.477 451.528 393.73 451.528 cv
392.983 451.528 392.375 450.92 392.375 450.173 cv
392.375 449.426 392.983 448.818 393.73 448.818 cv
cp
f
393.712 480.687 mo
394.459 480.687 395.067 481.294 395.067 482.041 cv
395.067 482.788 394.459 483.396 393.712 483.396 cv
392.966 483.396 392.358 482.788 392.358 482.041 cv
392.358 481.294 392.966 480.687 393.712 480.687 cv
cp
f
393.712 488.728 mo
394.459 488.728 395.067 489.335 395.067 490.082 cv
395.067 490.829 394.459 491.437 393.712 491.437 cv
392.966 491.437 392.358 490.829 392.358 490.082 cv
392.358 489.335 392.966 488.728 393.712 488.728 cv
cp
f
393.712 496.751 mo
394.459 496.751 395.067 497.359 395.067 498.123 cv
395.067 498.87 394.459 499.478 393.712 499.478 cv
392.966 499.478 392.358 498.87 392.358 498.123 cv
392.358 497.359 392.966 496.751 393.712 496.751 cv
cp
f
393.712 504.792 mo
394.459 504.792 395.067 505.4 395.067 506.147 cv
395.067 506.911 394.459 507.519 393.712 507.519 cv
392.966 507.519 392.358 506.911 392.358 506.147 cv
392.358 505.4 392.966 504.792 393.712 504.792 cv
cp
f
393.712 512.833 mo
394.459 512.833 395.067 513.441 395.067 514.187 cv
395.067 514.934 394.459 515.542 393.712 515.542 cv
392.966 515.542 392.358 514.934 392.358 514.187 cv
392.358 513.441 392.966 512.833 393.712 512.833 cv
cp
f
393.712 520.874 mo
394.459 520.874 395.067 521.482 395.067 522.228 cv
395.067 522.975 394.459 523.583 393.712 523.583 cv
392.966 523.583 392.358 522.975 392.358 522.228 cv
392.358 521.482 392.966 520.874 393.712 520.874 cv
cp
f
393.712 528.915 mo
394.459 528.915 395.067 529.522 395.067 530.269 cv
395.067 531.016 394.459 531.624 393.712 531.624 cv
392.966 531.624 392.358 531.016 392.358 530.269 cv
392.358 529.522 392.966 528.915 393.712 528.915 cv
cp
f
393.712 536.955 mo
394.459 536.955 395.067 537.563 395.067 538.31 cv
395.067 539.057 394.459 539.665 393.712 539.665 cv
392.966 539.665 392.358 539.057 392.358 538.31 cv
392.358 537.563 392.966 536.955 393.712 536.955 cv
cp
f
391.333 538.31 mo
391.333 721.722 li
391.333 722.677 390.656 723.494 389.735 723.702 cv
389.423 723.772 389.128 723.841 388.815 723.893 cv
377.804 726.22 369.694 726.516 361.34 724.119 cv
360.264 723.806 359.517 722.834 359.517 721.722 cv
359.517 720.715 li
385.307 477.752 li
391.333 477.752 li
391.333 538.31 li
cp
.0538949 .14255 .277165 0 cmyk
f
391.333 422.386 mo
391.333 455.036 li
384.299 455.036 li
383.483 455.036 382.806 455.696 382.806 456.529 cv
382.806 456.981 li
366.116 456.981 li
361.531 437.512 li
361.531 437.495 li
349.774 387.652 li
357.78 385.933 li
355.036 388.972 li
354.307 389.771 354.88 391.038 355.957 391.038 cv
371.465 391.038 li
372.542 391.038 373.549 390.587 374.261 389.84 cv
370.215 395.814 li
369.486 396.891 369.572 398.333 370.458 399.288 cv
391.333 422.386 li
cp
f
402.726 455.036 mo
396.092 455.036 li
391.333 455.036 li
384.299 455.036 li
383.483 455.036 382.806 455.696 382.806 456.529 cv
382.806 456.981 li
382.806 475.789 li
382.806 476.258 li
382.806 477.092 383.483 477.752 384.299 477.752 cv
385.307 477.752 li
391.333 477.752 li
396.092 477.752 li
397.377 477.752 li
401.423 477.752 li
402.726 477.752 li
403.559 477.752 404.219 477.092 404.219 476.258 cv
404.219 475.789 li
404.219 468.078 li
401.284 468.078 li
401.284 473.288 li
401.284 474.035 400.677 474.643 399.947 474.643 cv
387.096 474.643 li
386.349 474.643 385.741 474.035 385.741 473.288 cv
385.741 459.499 li
385.741 458.752 386.349 458.144 387.096 458.144 cv
399.947 458.144 li
400.677 458.144 401.284 458.752 401.284 459.499 cv
401.284 464.709 li
404.219 464.709 li
404.219 456.981 li
404.219 456.529 li
404.219 455.696 403.559 455.036 402.726 455.036 cv
cp
.10782 .229129 .33109 0 cmyk
f
385.307 477.752 mo
359.517 720.715 li
359.517 719.621 358.805 718.648 357.745 718.336 cv
355.714 717.728 li
354.324 717.328 352.883 718.179 352.587 719.604 cv
351.928 722.695 li
381.486 475.789 li
382.806 475.789 li
382.806 476.258 li
382.806 477.092 383.483 477.752 384.299 477.752 cv
385.307 477.752 li
cp
f
378.464 466.394 mo
378.464 465.647 377.856 465.039 377.11 465.039 cv
376.345 465.039 375.738 465.647 375.738 466.394 cv
375.738 467.14 376.345 467.748 377.11 467.748 cv
377.856 467.748 378.464 467.14 378.464 466.394 cv
cp
382.806 456.981 mo
382.806 475.789 li
381.486 475.789 li
377.11 475.789 li
373.202 475.789 li
366.116 475.789 li
363.876 475.789 li
363.32 475.789 362.869 475.338 362.869 474.782 cv
362.869 458.005 li
362.869 457.432 363.32 456.981 363.876 456.981 cv
366.116 456.981 li
382.806 456.981 li
cp
.0173342 .0701305 .123598 0 cmyk
f
381.486 475.789 mo
351.928 722.695 li
351.667 723.893 350.573 724.761 349.357 724.675 cv
344.251 724.362 339.267 723.285 334.422 721.444 cv
333.119 720.958 332.511 719.482 333.015 718.197 cv
333.137 717.884 333.189 717.572 333.189 717.259 cv
333.189 717.242 li
377.11 476.362 li
377.11 475.789 li
381.486 475.789 li
cp
.0538949 .14255 .277165 0 cmyk
f
377.11 465.039 mo
377.856 465.039 378.464 465.647 378.464 466.394 cv
378.464 467.14 377.856 467.748 377.11 467.748 cv
376.345 467.748 375.738 467.14 375.738 466.394 cv
375.738 465.647 376.345 465.039 377.11 465.039 cv
cp
.10782 .229129 .33109 0 cmyk
f
377.11 475.789 mo
377.11 476.362 li
333.189 717.242 li
333.189 716.234 332.563 715.297 331.539 714.932 cv
326.798 713.265 li
325.842 712.935 324.8 713.195 324.123 713.942 cv
323.255 714.897 li
373.202 475.789 li
377.11 475.789 li
cp
f
374.261 389.84 mo
374.939 388.833 li
374.765 389.215 374.539 389.545 374.261 389.84 cv
cp
.149233 .138094 .259068 0 cmyk
f
373.202 475.789 mo
323.255 714.897 li
321.813 716.512 li
321.292 717.103 320.511 717.415 319.729 717.346 cv
315.683 716.964 311.793 715.8 308.093 713.699 cv
307.19 713.195 306.721 712.118 306.895 711.094 cv
319.087 641.296 331.851 573.6 348.767 520.856 cv
349.027 520.057 349.288 519.259 349.548 518.477 cv
350.556 515.368 351.58 512.329 352.622 509.342 cv
352.622 509.325 352.622 509.325 352.622 509.325 cv
356.842 497.168 361.323 485.931 366.116 475.789 cv
373.202 475.789 li
cp
.0538949 .14255 .277165 0 cmyk
f
361.531 437.495 mo
361.531 437.512 li
352.622 509.325 li
352.622 509.325 352.622 509.325 352.622 509.342 cv
335.412 508.283 li
345.675 392.289 li
345.867 390.014 347.534 388.138 349.774 387.652 cv
361.531 437.495 li
cp
.10782 .229129 .33109 0 cmyk
f
335.412 508.283 mo
352.622 509.342 li
351.58 512.329 350.556 515.368 349.548 518.477 cv
344.078 517.904 338.52 519.78 338.52 519.78 cv
332.963 509.377 li
332.668 508.821 333.102 508.126 333.744 508.178 cv
335.412 508.283 li
cp
.0173342 .0701305 .123598 0 cmyk
f
349.548 518.477 mo
349.288 519.259 349.027 520.057 348.767 520.856 cv
338.52 519.78 li
338.52 519.78 344.078 517.904 349.548 518.477 cv
cp
.171939 .310887 .412787 0 cmyk
f
333.015 718.197 mo
333.189 717.259 li
333.189 717.572 333.137 717.884 333.015 718.197 cv
cp
.149233 .138094 .259068 0 cmyk
f
644.197 469.614 mo
651.693 531.079 654.053 608.73 654.275 692.933 cv
641.81 696.487 629.206 696.514 616.463 692.933 cv
590.866 519.808 li
590.866 490.824 li
590.866 443.406 li
602.86 443.406 li
602.86 441.685 li
608.051 441.435 613.021 440.991 617.574 440.436 cv
618.823 440.297 620.044 440.13 621.238 439.964 cv
622.293 439.825 623.32 439.686 624.32 439.52 cv
627.568 451.541 li
628.956 456.593 632.01 461.008 636.285 464.034 cv
644.197 469.614 li
cp
.550042 .351965 .326757 .0161135 cmyk
f
644.197 469.614 mo
636.285 464.034 li
632.01 461.008 628.956 456.593 627.568 451.541 cv
624.32 439.52 li
631.094 438.492 636.424 437.382 639.395 436.716 cv
641.199 447.071 642.782 458.037 644.197 469.614 cv
cp
.594537 .380957 .360998 .0374151 cmyk
f
641.477 434.273 mo
641.782 435.244 641.227 436.271 640.227 436.521 cv
639.978 436.577 639.7 436.632 639.395 436.716 cv
636.424 437.382 631.094 438.492 624.32 439.52 cv
623.32 439.686 622.293 439.825 621.238 439.964 cv
618.823 425.833 li
626.791 424.889 632.843 423.806 635.813 423.223 cv
637.035 422.973 638.173 423.695 638.562 424.889 cv
641.477 434.273 li
cp
.0779431 .0682383 .132265 0 cmyk
f
618.823 425.833 mo
621.238 439.964 li
620.044 440.13 618.823 440.297 617.574 440.436 cv
615.075 426.222 li
616.38 426.11 617.629 425.972 618.823 425.833 cv
cp
.594537 .380957 .360998 .0374151 cmyk
f
615.075 426.222 mo
617.574 440.436 li
613.021 440.991 608.051 441.435 602.86 441.685 cv
602.86 436.188 li
603.665 436.188 li
604.525 436.188 605.247 435.494 605.247 434.606 cv
605.247 433.717 604.525 433.023 603.665 433.023 cv
602.86 433.023 li
602.86 427.165 li
607.218 426.943 611.299 426.61 615.075 426.222 cv
cp
.0779431 .0682383 .132265 0 cmyk
f
600.028 436.188 mo
600.028 441.13 li
581.732 441.13 li
581.732 428.082 li
600.028 428.082 li
600.028 433.023 li
592.449 433.023 li
591.588 433.023 590.866 433.717 590.866 434.606 cv
590.866 435.494 591.588 436.188 592.449 436.188 cv
600.028 436.188 li
cp
f
603.665 433.023 mo
602.86 433.023 li
600.028 433.023 li
592.449 433.023 li
591.588 433.023 590.866 433.717 590.866 434.606 cv
590.866 435.494 591.588 436.188 592.449 436.188 cv
600.028 436.188 li
602.86 436.188 li
603.665 436.188 li
604.525 436.188 605.247 435.494 605.247 434.606 cv
605.247 433.717 604.525 433.023 603.665 433.023 cv
cp
.149233 .138094 .259068 0 cmyk
f
590.866 490.824 mo
590.866 519.808 li
565.297 692.933 li
552.527 696.514 539.923 696.487 527.485 692.933 cv
527.707 608.73 530.039 531.079 537.563 469.614 cv
545.447 464.034 li
549.723 461.008 552.804 456.593 554.165 451.541 cv
557.413 439.52 li
558.412 439.686 559.467 439.825 560.522 439.964 cv
561.716 440.13 562.938 440.297 564.187 440.436 cv
568.74 440.991 573.681 441.435 578.873 441.685 cv
578.873 443.406 li
583.537 443.406 li
583.537 470.835 li
583.537 474.278 584.342 477.693 585.869 480.802 cv
590.866 490.824 li
cp
.550042 .351965 .326757 .0161135 cmyk
f
590.866 443.406 mo
590.866 490.824 li
585.869 480.802 li
584.342 477.693 583.537 474.278 583.537 470.835 cv
583.537 443.406 li
590.866 443.406 li
cp
.594537 .380957 .360998 .0374151 cmyk
f
578.873 427.165 mo
578.873 441.685 li
573.681 441.435 568.74 440.991 564.187 440.436 cv
566.685 426.222 li
570.433 426.61 574.542 426.943 578.873 427.165 cv
cp
.0779431 .0682383 .132265 0 cmyk
f
566.685 426.222 mo
564.187 440.436 li
562.938 440.297 561.716 440.13 560.522 439.964 cv
562.91 425.833 li
564.131 425.972 565.381 426.11 566.685 426.222 cv
cp
.594537 .380957 .360998 .0374151 cmyk
f
562.91 425.833 mo
560.522 439.964 li
559.467 439.825 558.412 439.686 557.413 439.52 cv
550.639 438.492 545.336 437.382 542.366 436.716 cv
542.06 436.632 541.783 436.577 541.533 436.521 cv
540.533 436.271 539.95 435.244 540.256 434.273 cv
543.199 424.889 li
543.56 423.695 544.726 422.973 545.947 423.223 cv
548.918 423.806 554.942 424.889 562.91 425.833 cv
cp
.0779431 .0682383 .132265 0 cmyk
f
557.413 439.52 mo
554.165 451.541 li
552.804 456.593 549.723 461.008 545.447 464.034 cv
537.563 469.614 li
538.979 458.037 540.561 447.071 542.366 436.716 cv
545.336 437.382 550.639 438.492 557.413 439.52 cv
cp
.594537 .380957 .360998 .0374151 cmyk
f
590.866 520.501 mo
590.482 520.501 590.172 520.191 590.172 519.807 cv
590.172 443.406 li
590.172 443.022 590.482 442.712 590.866 442.712 cv
591.25 442.712 591.56 443.022 591.56 443.406 cv
591.56 519.807 li
591.56 520.191 591.25 520.501 590.866 520.501 cv
cp
f
578.873 425.805 mo
578.873 427.165 li
578.873 441.685 li
578.873 443.406 li
583.537 443.406 li
590.866 443.406 li
602.86 443.406 li
602.86 441.685 li
602.86 436.188 li
600.028 436.188 li
600.028 441.13 li
581.732 441.13 li
581.732 428.081 li
600.028 428.081 li
600.028 433.023 li
602.86 433.023 li
602.86 427.165 li
602.86 425.805 li
578.873 425.805 li
cp
.149233 .138094 .259068 0 cmyk
f
686.165 331.399 mo
686.981 335.361 li
666.773 340.179 li
665.917 336.316 li
686.165 331.399 li
cp
0 .561913 .637751 0 cmyk
f
646.625 138.6 mo
686.165 331.399 li
665.917 336.316 li
634.361 193.907 li
633.266 181.643 633.983 169.28 636.432 157.215 cv
640.951 134.937 li
643.918 135.713 li
645.291 136.092 646.347 137.207 646.625 138.6 cv
cp
.0779431 .0682383 .132265 0 cmyk
f
577.72 293.074 mo
577.72 269.92 li
577.72 265.54 li
550.186 265.54 li
550.186 269.92 li
550.186 293.074 li
563.943 297.693 li
577.72 293.074 li
cp
631.574 293.074 mo
631.574 269.92 li
631.574 265.54 li
604.04 265.54 li
604.04 269.92 li
604.04 293.074 li
617.817 297.693 li
631.574 293.074 li
cp
634.76 197.77 mo
653.255 353.418 li
653.255 353.418 619.35 358.535 590.88 358.535 cv
562.41 358.535 528.505 353.418 528.505 353.418 cv
547.001 197.77 li
547.16 196.496 547.279 195.202 547.399 193.907 cv
548.494 181.643 547.777 169.28 545.328 157.215 cv
540.809 134.937 li
564.222 128.705 li
590.88 193.907 li
617.538 128.705 li
640.951 134.937 li
636.432 157.215 li
633.983 169.28 633.266 181.643 634.361 193.907 cv
634.481 195.202 634.6 196.496 634.76 197.77 cv
cp
0 .561913 .637751 0 cmyk
f
631.574 269.92 mo
631.574 293.074 li
617.817 297.693 li
604.04 293.074 li
604.04 269.92 li
631.574 269.92 li
cp
.0581674 .706264 .750423 .00189212 cmyk
f
631.574 265.54 mo
631.574 269.92 li
604.04 269.92 li
604.04 265.54 li
631.574 265.54 li
cp
.000427253 .623194 .669551 0 cmyk
f
616.583 125.6 mo
617.598 126.277 617.996 127.571 617.538 128.705 cv
590.88 193.907 li
564.222 128.705 li
563.764 127.571 564.162 126.277 565.178 125.6 cv
572.843 120.583 li
572.424 121.021 572.226 121.698 572.464 122.355 cv
575.072 129.362 li
590.88 171.868 li
606.688 129.362 li
609.296 122.355 li
609.535 121.698 609.336 121.021 608.918 120.583 cv
616.583 125.6 li
cp
.0779431 .0682383 .132265 0 cmyk
f
608.918 120.583 mo
609.336 121.021 609.535 121.698 609.296 122.355 cv
606.688 129.362 li
606.688 129.362 598.983 131.931 590.88 131.931 cv
582.797 131.931 575.072 129.362 575.072 129.362 cv
572.464 122.355 li
572.226 121.698 572.424 121.021 572.843 120.583 cv
572.982 120.483 li
573.36 120.145 573.918 119.985 574.495 120.165 cv
578.158 121.22 584.41 122.733 590.88 122.733 cv
597.351 122.733 603.602 121.22 607.265 120.165 cv
607.843 119.985 608.4 120.145 608.778 120.483 cv
608.918 120.583 li
cp
.149233 .138094 .259068 0 cmyk
f
606.688 129.362 mo
590.88 171.868 li
575.072 129.362 li
575.072 129.362 582.797 131.931 590.88 131.931 cv
598.983 131.931 606.688 129.362 606.688 129.362 cv
cp
.0581674 .706264 .750423 .00189212 cmyk
f
577.72 269.92 mo
577.72 293.074 li
563.943 297.693 li
550.186 293.074 li
550.186 269.92 li
577.72 269.92 li
cp
f
577.72 265.54 mo
577.72 269.92 li
550.186 269.92 li
550.186 265.54 li
577.72 265.54 li
cp
.000427253 .623194 .669551 0 cmyk
f
545.328 157.215 mo
547.777 169.28 548.494 181.643 547.399 193.907 cv
515.843 336.316 li
495.596 331.399 li
535.135 138.6 li
535.434 137.207 536.469 136.092 537.843 135.713 cv
540.809 134.937 li
545.328 157.215 li
cp
.0779431 .0682383 .132265 0 cmyk
f
515.843 336.316 mo
514.987 340.179 li
494.779 335.361 li
495.596 331.399 li
515.843 336.316 li
cp
0 .561913 .637751 0 cmyk
f
262.992 131.829 mo
263.645 132.81 263.897 134.042 263.595 135.248 cv
257.738 159.984 li
252.434 139.597 262.967 131.855 262.967 131.855 cv
262.992 131.829 li
cp
.434668 .14902 .467658 .000488289 cmyk
f
262.992 131.829 mo
262.967 131.855 li
262.967 131.855 252.434 139.597 257.738 159.984 cv
241.725 227.705 li
232.977 227.705 li
232.977 225.442 li
228.377 225.442 li
228.377 227.705 li
215.104 227.705 li
215.104 226.598 li
215.104 225.97 214.577 225.442 213.923 225.442 cv
197.986 225.442 li
197.332 225.442 196.829 225.97 196.829 226.598 cv
196.829 227.705 li
183.532 227.705 li
183.532 225.442 li
178.931 225.442 li
178.931 227.705 li
170.209 227.705 li
154.171 159.984 li
159.475 139.597 148.967 131.855 148.967 131.855 cv
148.917 131.829 li
149.319 131.251 149.822 130.774 150.476 130.447 cv
166.111 122.227 li
166.111 122.227 182.099 138.491 205.954 138.491 cv
229.81 138.491 245.798 122.227 245.798 122.227 cv
261.458 130.447 li
262.087 130.774 262.615 131.251 262.992 131.829 cv
cp
.406836 .111208 .4336 0 cmyk
f
251.177 266.467 mo
256.732 282.806 258.743 300.101 257.11 317.27 cv
247.406 418.424 li
247.406 418.424 222.847 423.326 205.954 423.326 cv
189.087 423.326 164.502 418.424 164.502 418.424 cv
154.824 317.27 li
153.165 300.101 155.176 282.806 160.732 266.467 cv
163.723 257.669 li
173.854 255.934 182.224 248.896 185.668 239.243 cv
185.895 238.639 li
196.829 238.639 li
196.829 239.544 li
196.829 240.173 197.332 240.701 197.986 240.701 cv
213.923 240.701 li
214.577 240.701 215.104 240.173 215.104 239.544 cv
215.104 238.639 li
226.014 238.639 li
226.24 239.243 li
229.684 248.896 238.08 255.934 248.186 257.669 cv
251.177 266.467 li
cp
f
241.725 238.639 mo
248.186 257.669 li
238.08 255.934 229.684 248.896 226.24 239.243 cv
226.014 238.639 li
228.377 238.639 li
228.377 240.701 li
232.977 240.701 li
232.977 238.639 li
241.725 238.639 li
cp
.434668 .14902 .467658 .000488289 cmyk
f
241.725 120.09 mo
245.798 122.227 li
245.798 122.227 229.81 138.491 205.954 138.491 cv
182.099 138.491 166.111 122.227 166.111 122.227 cv
170.209 120.09 li
170.209 120.09 184.864 134.393 205.954 134.393 cv
227.07 134.393 241.725 120.09 241.725 120.09 cv
cp
.0779431 .0682383 .132265 0 cmyk
f
241.725 227.705 mo
241.725 238.639 li
232.977 238.639 li
232.977 227.705 li
241.725 227.705 li
cp
f
228.377 225.442 mo
228.377 227.704 li
228.377 238.639 li
228.377 240.701 li
232.977 240.701 li
232.977 238.639 li
232.977 227.704 li
232.977 225.442 li
228.377 225.442 li
cp
.434668 .14902 .467658 .000488289 cmyk
f
241.725 120.09 mo
241.725 120.09 227.07 134.393 205.954 134.393 cv
184.864 134.393 170.209 120.09 170.209 120.09 cv
170.209 120.09 186.749 124.238 205.954 124.238 cv
225.185 124.238 241.725 120.09 241.725 120.09 cv
cp
f
228.377 227.705 mo
228.377 238.639 li
226.014 238.639 li
215.104 238.639 li
215.104 234.441 li
216.638 234.441 li
217.417 234.441 218.02 233.838 218.02 233.059 cv
218.02 232.305 217.417 231.701 216.638 231.701 cv
215.104 231.701 li
215.104 227.705 li
228.377 227.705 li
cp
.0779431 .0682383 .132265 0 cmyk
f
212.867 234.441 mo
212.867 237.785 li
212.867 238.137 212.691 238.438 212.415 238.639 cv
199.519 238.639 li
199.243 238.463 199.067 238.137 199.067 237.785 cv
199.067 228.358 li
199.067 228.107 199.142 227.88 199.293 227.705 cv
212.641 227.705 li
212.792 227.88 212.867 228.107 212.867 228.358 cv
212.867 231.701 li
207.337 231.701 li
206.583 231.701 205.954 232.305 205.954 233.059 cv
205.954 233.838 206.583 234.441 207.337 234.441 cv
212.867 234.441 li
cp
f
216.638 231.701 mo
215.104 231.701 li
212.867 231.701 li
207.337 231.701 li
206.583 231.701 205.954 232.305 205.954 233.059 cv
205.954 233.838 206.583 234.441 207.337 234.441 cv
212.867 234.441 li
215.104 234.441 li
216.638 234.441 li
217.417 234.441 218.021 233.838 218.021 233.059 cv
218.021 232.305 217.417 231.701 216.638 231.701 cv
cp
.149233 .138094 .259068 0 cmyk
f
212.641 227.705 mo
199.293 227.705 li
199.469 227.453 199.771 227.302 200.097 227.302 cv
211.811 227.302 li
212.138 227.302 212.44 227.453 212.641 227.705 cv
cp
.406836 .111208 .4336 0 cmyk
f
199.519 238.639 mo
212.415 238.639 li
212.239 238.765 212.038 238.841 211.811 238.841 cv
200.097 238.841 li
199.871 238.841 199.695 238.765 199.519 238.639 cv
cp
f
213.923 225.442 mo
197.986 225.442 li
197.332 225.442 196.829 225.97 196.829 226.598 cv
196.829 227.704 li
196.829 238.639 li
196.829 239.544 li
196.829 240.173 197.332 240.701 197.986 240.701 cv
213.923 240.701 li
214.577 240.701 215.104 240.173 215.104 239.544 cv
215.104 238.639 li
215.104 234.441 li
212.867 234.441 li
212.867 237.785 li
212.867 238.137 212.691 238.438 212.415 238.639 cv
212.239 238.765 212.038 238.84 211.811 238.84 cv
200.097 238.84 li
199.871 238.84 199.695 238.765 199.519 238.639 cv
199.243 238.463 199.067 238.137 199.067 237.785 cv
199.067 228.358 li
199.067 228.107 199.142 227.88 199.293 227.704 cv
199.469 227.453 199.771 227.302 200.097 227.302 cv
211.811 227.302 li
212.138 227.302 212.44 227.453 212.641 227.704 cv
212.792 227.88 212.867 228.107 212.867 228.358 cv
212.867 231.701 li
215.104 231.701 li
215.104 227.704 li
215.104 226.598 li
215.104 225.97 214.577 225.442 213.923 225.442 cv
cp
.149233 .138094 .259068 0 cmyk
f
196.829 227.705 mo
196.829 238.639 li
185.895 238.639 li
183.532 238.639 li
183.532 227.705 li
196.829 227.705 li
cp
.0779431 .0682383 .132265 0 cmyk
f
185.895 238.639 mo
185.668 239.243 li
182.224 248.896 173.854 255.934 163.723 257.669 cv
170.209 238.639 li
178.931 238.639 li
178.931 240.701 li
183.532 240.701 li
183.532 238.639 li
185.895 238.639 li
cp
.434668 .14902 .467658 .000488289 cmyk
f
178.931 225.442 mo
178.931 227.704 li
178.931 238.639 li
178.931 240.701 li
183.532 240.701 li
183.532 238.639 li
183.532 227.704 li
183.532 225.442 li
178.931 225.442 li
cp
f
178.931 227.705 mo
178.931 238.639 li
170.209 238.639 li
170.209 227.705 li
178.931 227.705 li
cp
.0779431 .0682383 .132265 0 cmyk
f
148.967 131.855 mo
148.967 131.855 159.475 139.597 154.171 159.984 cv
148.314 135.248 li
148.012 134.042 148.263 132.785 148.917 131.829 cv
148.967 131.855 li
cp
.434668 .14902 .467658 .000488289 cmyk
f
.0153201 .0126345 .0151369 0 cmyk
%ADOBeginSubsetFont: CooperHewitt-Light Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /CooperHewitt-Light def/FontInfo 7 dict dup begin/Notice (Copyright (c) 2014, Cooper Hewitt Smithsonian Design Museum (cooperhewitt.org)) def/Weight (Normal) def/ItalicAngle 0 def/FSType 0 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 67 /C putdup 87 /W putdup 101 /e putdup 104 /h putdup 105 /i putdup 108 /l putdup 110 /n putdup 111 /o putdup 114 /r putdup 115 /s putdup 116 /t putdef/FontBBox {-210 -210 1376 960} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings13 dict dup begin/space <1C60D8A8C9B8A2CE7C> |-/C <1C60D8A8C9B7DCE041BDE24D505AD899B909F8BE96B0C512D2B68A7ACF0B51094E59AB63DD680BC482A865C78B49A075B5BB78A58181260D82E07D22B728CE542E2CFB18F1A88DC2D00CD0AFF6ACFB2FB376ECA7F1ADF175> |-/W <1C60D8A8C9B5964B246CF3F93C7C897E990743447135691987C8CF531D4F8CF1A872591D6D375DCBCDACF8792B7CC8D2A4B4F4EDB1DAD83269FA8B> |-/e <1C60D8A8C9B79FB0CDC74AF37FA1E0105C40040A38528D4FE6D409FEBC491725EA810CE076AB8CC30034615A6CC044696CB21F737C8175A8DFEC4B470751EC2B6CE867F5A80F6A307EE3712BFFB520FA9259070486CF4EB6636C749764B1FF> |-/h <1C60D8A8C9B7BDE39A7C85CBCC435EABF04104746466EDA0C3C7FD6086523C6756DDD4132921AF05CE494C5CAECED58CF1A1EB2CA8AD0BFE7F> |-/i <1C60D8A8C9B8A2CEA912C5809FEAC90F1EF6B1C4CBAE67AA1464129AFD92> |-/l <1C60D8A8C9B8A2CEA912C5809EC990329B30AD> |-/n <1C60D8A8C9B7BDE39527F83D19487264BD8F303AB6F9ADC0D05765A519BE9E3C8FB784CAF31020A88D62C9C8F679D794AC4EAC88E1A6F71919DE3A5A> |-/o <1C60D8A8C9B79FB0C27DEE6DB13EF98E78F5C0CF9475C7976A442930EA4229B91C04A8ACE1CC6835E13DFC4990C73EC54F80AF380ECBC4220D605FE5F1B660AA7C922DE9066359B54E53886FEB510BC8AA231610EC> |-/r <1C60D8A8C9B831A983D1494AAF31CDA13C9E77E7113232AC2A3D3912DC627474C2CCF0936993786F9D63D3C63E829BC5CFF4FF1544CD6D> |-/s <1C60D8A8C9B7B3D0E4CD50FCF3D02201114AF514605A6FC4FCE9C30ECCC23C6A9CDF9554F1AC87E07102C2A6E014781F7C013E37F8AD9901618ADBB00D6030587746A9EB77ABF538CF9314FE25765B47627A45FA9E746AC8E8DD29A9BB89EA1DC97623F3DCBEEFEC> |-/t <1C60D8A8C9B73549CF2352D7D3DCBDD39D966C893D5E1E643D6CF299DC5D3C3524F28D2C36036AD7C89A3672A609C03CEE7DF76787ADA7AA4321CE8F6DE5C2379DC1> |-/.notdef <1C60D8A8C9B5CCDCB177753A8C046BF7A81AB9ED996769027163671D45E8418BC5400E4F0E17145EC7D5D420B76BFCC4CF249FB8BEE95840053C161CF2C97F5DB22BC2641A09D30DD2> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/TRRVOE+CooperHewitt-Light /CooperHewitt-Light findfont ct_VMDictPut/TRRVOE+CooperHewitt-Light*1 [32{/.notdef}rp /space 34{/.notdef}rp /C 19{/.notdef}rp /W 13{/.notdef}rp /e 2{/.notdef}rp /h /i 2{/.notdef}rp /l /.notdef /n /o 2{/.notdef}rp /r /s /t 139{/.notdef}rp]TRRVOE+CooperHewitt-Light nfTRRVOE+CooperHewitt-Light*1 [28.7736 0 0 -28.7736 0 0 ]msf309.249 66.1055 mo(Winter Clothes)[25.3203 5.75488 14.3301 11.2217 15.5371 8.77539 5.75488 17.4658 5.75488 15.1924 11.2217 14.6748 15.5371 0 ]xsh302.219 75.0229 mo
497.781 75.0229 li
497.781 34.8325 li
302.219 34.8325 li
302.219 75.0229 li
cp
498.781 76.0229 mo
301.219 76.0229 li
301.219 33.8325 li
498.781 33.8325 li
498.781 76.0229 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/Pattern [/502823680.0 ]]
] del_res
/TRRVOE+CooperHewitt-Light*1 uf/TRRVOE+CooperHewitt-Light uf/CooperHewitt-Light ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 15.0%%AI8_CreatorVersion: 20.1.0%%For: (Ayib) ()%%Title: (FR-FLAT WINTER CLOTHES up-02.eps)%%CreationDate: 11/3/16 2:12 PM%%Canvassize: 16383%AI9_DataStream%Gb",KkBcF)ddVG_g]JuN,Qt@9O@E$LOBrB`&r]P$=QTI*YPj[GDHp^[-'6A3ccuSC9:F7Mbt($*Sf=tp%bo-IIkok[K^]1E"Q:X?%i"P)>q$oL<[,B<.aOQ&/RN5Z(>b)X`!lo8mORX+c;QTVOC4RaspOQonm^G.$;"_!RPqpAi?rN*Oe,1Bf]/(9,:HP]P5guScm.ZnX%h6:U_4,Ue<3t,EWp`;<^P%9B!5E_/<r34'qcA0(Oc"F\"1'W5g^7d"4#[hPS5O]QiS:!E`JR9o!?iXR<,=0rhB+H@n\A5;AA1X:1%OPiJMR3pB;oRR"WJIcIHN5^ues3ij]l3IK`)K[t4AO@B$kP@?!mg:C4K[6]@YKp#I>!t/<K]:irN.CqA^IW2B[&@7kL)qX>TW_HY%%6d;$(@%pH^H2#UN;&F2)Dj)k/&r/MSc8`Sa]Jts!r`q,>Rq^@^L928eHu"L>/\u0f:X#.??s<0:^BYVs.oKmCf$u'(-MZ)__FN7%!s"EF!a(F\l7WT<,Us:CdAPYIGDg&N-WAlTQOJug0:@ir]Hfe]^#1j%Ik^#EVN_Zaq6/F&li_JTpROu)_>7Gh'trNeXU^hW'/>$8%F@'6u"2<5\QT?#SVSk\)L/:M6?X!G)S1K2;0VDPT'nF40B,ZpV6>%#eCl*!C\/n&Q!5@Oq0sH1c(p5/K;a-s(i:UO9oAkb*_k0;6%5RX5<LA%JXi>,5fU:k(_(!\Zt1_6/`i>`@LLC879d:!kA>b^N$!?F?G!'7$q(NM<-pdTO]&t;^r[kLhNn:39_%/hPIWGTTJ.F`WK%m[QabHG[&a.]mu]<aP0Lh06dq*DN#`dY:3HHbu<*Q4r"nR^Sa7Q4p/O'UoTOVF.bj-TkA^2Q0Z7k/.W^6(/;8!PZIgJE@^TKg=65%jb7J;L7nk25/fkto\3gD7ZV!t2$RHF7skYiCP;"Ys"=oE8Jpr6K8,m7(?_>!(Ljp@K5QEbV=92S:dWp3r7#A66Ee9:eOK,EIq^gr%)]F5"N3nfKjnM</#$l@R)Lh*O6@Hqj06..%r%=!.3MZfaA:sd(L?UpFL?bInJ@[daM?,@YD`%P/GM(;W["*g?kT2ZjkiP//-=R$I%m7n`i0(c,(*R9M"OctSqqPP%i+H<T70VpJZ6iS8q"t2s3b$W(Nd5U`Bn]+,^<sK@oJi!Yo&'Cds:PgT*)Y+l:.H2%QhWPpDc4b)=%!5K4mJ<@`7ATYEd,S7?6.\G6>JQ=+R^4<)52E)<MM0Qlt%>gB-T5u2fPa':T7+<35^E713ogie=,W<4F)dR.RPMs4e>MP#dDRA6T%LlWHnV$*J*f"<Re7$"A>OPYQ(8'Rtn@L/*m7?7(pgI&D<n\ZD8%0qCo3L9)flP+Ti;_9.Y)F&\O$:&ZC]]\4HW(W5>.^=++=ofN0%gSbT?;p.sFPD3M0G=?d`I1ungnkgINRqlt#])&m3H_/:].IfFFj3]Qr(]?@i)"8g`m]]F$08%"X/qc2N%=f"d.Ce[4MhaugO;WU'%(j%1'd:kMV!8&@@e)<L:2265r.QX6C!>KjQqc#V(dA'p1f0cFq@3?F1@fbDM$r_TD_B3J-ku>/`1VhFqO>2T\!>k`rAm;W$&gLdo%#13*Kj_q?B0lLLj?V-ZBTZ9J`^B(uSJjk;A`H0mk:Ju+tbRclti43:rLi%/R5JiBR'Z^H]prnX;DKu-D2ZV`RNphS'7h(nbD5.Zm%l#53t=m=@eHJ@)Oo]u;.h?%C""OR24LA.G9!PZ?5TY9Hh!k&<+K'u;NkO*j9k%2WMS*6pNYOgL;\d>79^+TCg@Xlc6+AVTRZ(5rc%QOLi2]Rh\[D1M&gUqf<s*Q!R'i#\X`@)MW1!rFj\^5`XZO"^d4#&Rb6"6hBcI>_I_=[P`uhjjQo:dAS74klr_oDDEuH`J.,.".RI%=2rWO6]^/p(_g20()_$KRf8F)OS&.'NH'e]?nYW%9h%X9)AksG`jkfhN/jaI@l=gA3%nct,.f)le>:dpEX>`<SY7Q`JN\i71F*)*%'*8G&$RW?";u',gR=*_ffs2n,&njenqKXU/c@AqUOmD\6A+-P,WBQ:aOBYbM%c^A+CGf!DW%eUSq.75<F8E@.gC953)cCVe+r6'4%j79r+h](P!Ttg?:_*:<ZOd*63rEo3i(ju5]5Q1jNT_H\-oKmdAi[`XE+1]]=ph&aIH`Hn$5i2k/?Yp_tr!,?a6*Z%n98`c8c%)EW%D`A7u!at:a!om![K"!jBmfG$_s821%WNe&E_D_0"]pJ&[0eVDA:bioH'+s.``m^%Q)2B;i#T83=A2KI0`aK9!&ga<p./\cAdg>eB%1e%P9`d:MG@-Cb1i!at]*6PM'GJY<5VL`UEV`L4SKU%.<BdQd:Ga@KqJL*,e17>(s!CB8DYqa/H]>$E//N/e?B&<,&%IHHdV>lAM%75:@QL,XLtG(;_H<sI$9[?qF\&i1D'R1.*Z,81J25ooWQO+;[<[QFW2-nm<XL/`f'fDuKGGFcaHm:Q'fbLp5q5s0/dDIM/3*M)D2%@\U?f_Q@+OL`6K/SYgQQ_LA-tr'tQi&s6!9QF%io!qKG8>dV22,a.p>RVk[1B/2_<;*@2H9)#>GBUW!5JM56or&N<&c$S&65uF(D%P42Y>KOcX*&-ZHn8123.(_DZPN1C#QQPAO&&;1YJ#6#O!VB[>tJiUb[:e(Mj8Z"fF"ITrm55:^?LJj76'FD=mGX@E!`KN\^Mc&\&%6)#;@Vbj^!&MQ`E^X9Kf^rqq0(JJW*\SbisA3,t+MZI[q#OLQ)DbY$/r'?!kA3'a;Pe5*$F7oC6-Y#KHku+2h`.\U/>`i\<XA0t=%r&2Bk&HDP0+[Q>.+6In)JH+&(s+^:I:?"OS-mEioA;EbX-L#5oN5BFjM3_i/N2'(kI^NWQ-k5O<)-\]EliS",nVR_b>+?l%7JULQ%\7_sGATAhY.mg,T:e\Vpn1S7N=^iL11C%'L,(TnPCU25CpW,`OK@?#L9-EmPrAZ#11q0M@1%t\6%+oXc,Zkh=H,O'Q8`9Tn(@R%m%ZX9P.dceEi^`p=#STm1`!5m&3!<X,AQp3;<n;[(hCp;1>0$(t9'2)!(/K-u'>#5$",VlWEi.?)B;Ddr]=%]'RK8>G]6s"66<m*)l%`1eHZ.,_nkM8pdA.R3lQ#5\/=1,0H=;A-kmisHGK^EoU1a$fLR**,^mGKeWQ\RhL76t.>X*4S&o(h03g7!,<I7!$$mPC#Nn"H[@i%2<9L@+QHgC]jWK+S<oG0Rmd_>IF*rbXZ%+;Zm`^O9oD'sMu9.g]d=D6NGRGQ;bce/jPNMf/*#/^lXX^h)akZDUU.@-Y1Y0LlQ*qk%La5Bj1MJObMMs@3$So94+er^6Lq'ai+T2Ge"/LZ`Li]A[3NNl[Lk3Fr=t/()6R64L7VHrY89r6GrcL,$BV&:;@NGU55VharHZ>5B%&V#XbC"*T-S]$B<02j\gK1:H.O!cPh6NRHD8lCUK90^Z*j36nB9Z/eISs#7^/u<nTjg]R\qCFSp?-HbZ,bjqI1Q>'eV,t@WPs:dR%Il1iMkuu>X\sin]Si%3a(mq"e2e?V$_5'!pfG@\/s37XSGWHO7l*ZXRdMks1n'?8X'&@#Z#YJlj8'+j9-+YD^n9ZEIO==:,)G*Al%E?kPuWC-k)%EEu:)N/?Oh4d/;P9eKZYtuVR?LMTXK@*U?66k_k3Y<U!m1##:(c:^p0L."8YCi/cER_Ut;)At_BR>lV9-^-sjPLTD%F>B<SWh$rM!prP,GP%%R*U-(*^/?URR,CWS'SLQ7PpjMWma+4MCPYY3Ss<mliG@1KAO,bfmC&hsZrq1X?_NUB8deSNBKie[m?TMP%1J1l2pf-`t4i%AYhR&.GK9`8,VT_RBNYnEH!"H.I7#OS3.0==>=;oS)+rZHVBNcsX&ih'QO"9*2AYi>@\P&``hpMg=H73&ihkVu'%Hh!F*XPf.cQ+'\BTsZ+9hs2=<)-<>_dR]n*e;"'dGp@MNjI)ig$*WqqmP,tei]tH%jf"(/;`$n>J2n'P2AJrM0TB"k+[bKFJ$"VO%VBS8jbJ,>iZ"Q6?=1V5B9;B:HPi%WI+J%P!V%6/Rb/6bW&]MpLOdelTQ$P-714KFf!1m2:QdIk_oFB)t";1C*j.\]be,C*l7FG!>%"-XlG:IVoMmkP)HRNtMeYHmd((0+Pe7[-th-dqb!C(2W,,t"XK1190<d\?/o#>2$DME2WONAOk9'0SbT8,!;O=f$H_X`I83a_3(0%XPZENUt2."-g1QK;dPj](5W.hR0Z6TrLA[ti#\or[4]$WA1S<kIKM?V8>n\m?fNW*83\CdMcAI^^RpIA30f5[^EU'.bsMD(R\\Ga%!K).IFU?pn+E\<Pen)KTd^jR>1I:BTK]q\mL2g#\;`'^a!$OcUTd1ni1c"&7Z:??n71LUtY9C0n^Ob7'="<kcJ(7``i_R@<9r=(F%YM90B4-]r7U,7W&'tthe6iKfKV;-\(Nd2lDDtI/:aBcgO]T]tHrdj`^/gMT(Wn\Y[3t,fk#qI(u\V0Ft:=$c;i("e.=Zui7qpT%W%n0eR^k<$*1J4=J[;WT>pMgE"Q1jBr+Ld\&8Q_2)YK>/UXI_n%$-uHk/'JgG-ripC_8pH#Q5dQnZ3<!C)nb4!\!9Pdi,]/Am0YqHR%Ho/_pr>%g,-:km_61`&,jc82<9YX<8OgoA(.(]R<Yg&Me_P)UN1oGi_6I\Dt%%ST!]jA9o[P/hm'eq]co!KW.ZZQqp@ZDN"<D:'H%j*Ur.\FB!p0P'[,NSOHT@:HdiTJNN.a:K(=!O[Z/htU``HfrQqN8T<-%XT#b!VOV>AD1,!?AF;l3%f%:'ZVskmgnn5^.(&oKd2."%!$Q1Z0c0I#a[oPg`JHWuS&P0^<J!_ViN3\S"-ORA4SJ?E075eI<Oa2ZV[p^el*-Ga""L[hSXjcrhI.GcM@Q#p2_kn)dnE$)SDj%a%^R,6]AT4OY0%*J_p;.!'%6,+Ui%2c&B.dS.i<'!+>X3Bd3Q7M0*OF\`_?i&MB]0*n1C17^cMT\RfJ0df&%M*0(I$co#@.%S'2qIV%nl*1d2iu7n*uOm+I\7(9k/IqUe%]Rnd\[r<mshSc3'T$YW'HJLr);)m[[euY)FaL(8#eqqp*$drI5u7(B'>o$VVq<!PD*s@%0`Fm%Z$AhVB@4N7-G'Jr%VpHI'#OqWhlLL=LL&kn=(Ya:EQt@G&"GXiI_#I[5ra@A:D2=VVGGg!%)nS4oJr4Ln^hCF`NQ`Ph#^a;=CFIS%!MoSOQNP>p'-#.M=@[QBs)'oEX'0#mY?CP(V%rNeq2WNNG-ZiVjI9,>Y1+mZ;!D:iaSQ9OJ_Y3!FPr`D&b`OTB7k3o+ISi5n/r#R%Yfq:3,8bD&bQ"eTq;4-",*uPi*Ls\Ichs87-!cXTii/`@k0H*bRG/3(V=Uc=S$@Q1Y4irKH]@14>oI37AQE=C[^PB\GTE7Gk`W:=%'Qp2GJ4.-Q&H!8_#S(PLM9Y[Mi/=f,G=XBEmgRo5H@Wc24\tqG7rI(n2@=&%K/0"6-.QuBi@IqVh?qJap2qHKG0P9h[%:nehkD8@%kKbDobA'7d8cIO.(5YO[$H2ah8/TW@B$4uqiI5=o&buP#NX?cHjE[3n+83FsU'(YFDJi*Da:NO^2iiuF`]'Ndk$PjlN=J>7mu,J`%>Pb+XiNN?NQT?;fPqb9Eh,\uRQ\irVrAM]8/Sl)1G2/C;FION>p1%XeO/m]IYP),?ZnLnUInCogM^#GEB6`c[S[m^(G=<m#_".)c%^ACjT#]N(<Zd/OE2WgNKs3Epq!'AMOrm!R?VT('UFYL/W2D:M5Skj45`nkDYZmh<;R0q3cFZ0fpk_idi(WYBc)&LBA(V^q\LC>kr%Y]j/hnQiO<s$?6cp+pl,fMja^V@l'\o:h8&*MLeUFh1)LK/9MlIlaQ!JZc5$qrY^r,/!LH]d"Ujh+(_Kd3j=*<c1+Elo"*<*'7sq%2knXS0pQf&q?jI.p'a<9bbEa2YoGRF.epF,o6<M-G3E@Pj8_)+s$.(<$MQD`,u$6Y%-&\DM"ud:V3p/i?O%618$)1u0fRT3[\)C&%hgiVR$b:0UK]Q<PJtqW(@;kA"3M:ppqo[OBWaJJC%?0lIk6M>u0_K@4]krhT@PrE))h+;XD#O%nKagf[rtI&im?b`-e&W3B-GW*G%1[+aW6$p`^ZYO&.H*2q+W_h_o-j4$o$G0QA:,2Dt%_q'lo>3G3-5>5!\IdTsW((@4O1u("(25Q\k3(9E>hTTM7.V$(=es;ERJbqU%$?e^DZd/N-[$eHtS&%<^ErPWA^AO_HRH:o'd7oP;R76,ZpB-9>=3O1ob^\$UR/OskqN":>_1u]1eBoI[B'-`PLMWA#S2fP\]k1Q/%s1#ubI#-oRoZ_O<N/QebEE;n_M)4fHQT0U.dCdPO.;ogC:\p-1V0"4T^1f%Zpom($$#,=:R,:h*k%?:Fh)rDq%R9*saP>0I&Y5uo%jt8.R_ie-lK1q3@P2L`%r@#1*I7!aRM:aPCk?5kb/GYV,0?Z:ji"ts$+l=(+D6Dr(M$H6rbdSZ?hIsEr$gG*]D@>]`Ut`b2>=c5W%FB_;FT-iC$gI?,L2TL<7OM_9O.Qb.][7e#;+r<q;r%Bi<2Xh)$=tl)IFIhp@YnI.,Ych?n!c$TeqFpg^\'*&=R^lt-^MiOt'X<>/%(PB'(gBm?DJfa)s)Spfl8^h)eFL/kG?AY],"maXeT]kC6$-aDr%c:&FF6=nm<J.7V(?a27_t@<ue<'G*/InfV`e/#Z5!7X)(UAnC%G55k[oTIr@_Fqnb?c!3MgBO:d^Y@[tpRg'4I#Hb=qB2810r9?Wc&5rp-%C%EY`%i-kG;G!%8?fLJq5S!7t0IkN@R&ZE?R:'<n,?[%K6+^i-NH+#@d"rEVBG$88Mh,l)!=[I?j@:U%\Yl,HGHDa>>Wspa?@rQ')`=/'cR^>*B5VnZ'eo1Hl:N6%M;2#SO'kX&+IR/4R(44%"S@**;O9So4DE5nIiRP\:o3cir@umOc:o5*U'bnFs#d4VcgD8e>jO[.p7E/uc\qbb`W!2(ClA7)"+6%*kJdGl>i%('*Te^(JW:;r%Y"[0\T(D<g>@osM[+KG+lo?`mSA/Y<5bsg*X$apMn'(4V7\eFK%L'GZZ,!&@n_%U:]e9W\0?l3+Dd58i:9-MXc\$@b^+)%.`n.r]%ZG77I6bWln7X%8#Iqc>[if*25M'7>:eoD)J&&+?S&V=5?i"dKGIifoNf@,X;gl052()I`>ic*cnLD,)fm1rLHlo)(#l#!*R3\>7H%=,1;L_)>(J[Q0pgSbC_Q!P5HM*@^?:.J:GND`D^G),eXkEr.Mf`WS1n1]tJ%$IEMDppTB^Z%IH(;lI":3Hq>K\gaP?oe;.0JFD^r%krQ&opsPcuYQJ0aCdqe0L7LB7:q@-1NP>/sVLsL;4TAh=(Z`/`97:S\9'1o^-uYLgEOuM=/:om?@*Ts`ZO#\EJiP.l\-V6@5VP\8%h2&le.C+S83f@CkN;Ko=@*SnkSF=hP5:nO&L*BP2ao@ged+$B(RUZc@Gh-1!+'DT+>OdW$+sQ1EGRjX-'P@8f%fB6W(<:L?)Basu%3I^l8,r;.c3:g=<kmT2DNmfo?6A9l@$=00@[8<RS^*3q"qMcuSX`0kSm5^JJ4YI^qEO+,U3n_[KZ7\n[)IjiG4,4o!W`AKNXjX'b%h!`4q6T>%)F.[p>_$/I]Q7WS!Qn8DK^5MrpY6/WLhaWNmIQ<8D"6(G$[=J1CEF,&UTuJsZ!^2((_:&ipid0IW^]f>^5NO,K^UQM\%=dYJnq:R^&0:]NokJRPG\.=p$nMU)c-u_,,i#>\R@8i:c!ZR:\m3\l-C&[cZ`UI=4h.aAi_N\5R3CIWW@r^l.,5a0nSjHlurg6L%%B>28*WLjh&^^"B^rg3cuH/>@4,5e\OJ'='\?\CWZiK(MVIm>B!5e4ts>.ANmmD:`+W]m)CF0:.f:G';>M&CT708?P,mkTX3)A;CM%b.J]tb]8t7B2Ef.BPCahfXfdF>SMtZhYI$+*d3Q!47$5Q#5mQa2!lf#T6qZr5$FsU$$;T55DM("a7iaHDp9uJ/Ip69SA2EjJ*ETK%)sj&9"rt?S_L7?rqmf3g\WHLUIZi4?i$B1TomI&u\M.!O4P.L&?`<KRe@0hY3E"`I9lbZNdQ`R6<JPs=a8d)9LS;_[Gn,c@F*u"+%poc^WjdSTQ@oT?X_Q\4;bP*f5d.$"]nI.86#A0X>J8&mVcr:JRk&?9q@LIhc)-[p[9VZI=2D?7QMnoA*"obdUTB7fp:OI<Cs-l^8%Kb$.Y5+iil\F9P9?Jr[.>^1hWmP-<+^tJ2YZ)s=G(HC#Qi(m'X>PNd@kQbRh!]#7S+?!m@2fR^[0&46r)n9hh-R>!#q,88!2iu7n%.iA;;Y+Q/ik/J.Kj1%R:Vsm^G_@N/P5O_0LG_'^Q02A@2%1h(@klGjGCYsN3Yd$/qe..SZ#oaQCk-%!Xj'*Z(BejO?kCn;+[$q).%Xa"c2VT)I*m^?3pM<e+5cJWW\7@[*ir+5B8i)8mE:BYl_8,^(SPq/NiKr<(T&Ef+NIV-sV*JOGo/N`hG)#\gi69p<Y(4N"!S)aAT%?!`muWDbF."l27I+4%n!Pf3Ge$QP)mV8meLN:20TLqh[s:,H@S477_<8jNQUn[1"T&j(e;)"LD$::m8urC[MOGQLuPhTIu6MTbC0%_a!m#(c$unMq%bf]qL?9,,P7)05gphYU5e>?X/<92/dk&>Y&a^k@mEc`7-8[OKL`hZ_dMZ:(&J-EoC!GO)o"3@8jmfB5Hg.T4;RO%-IV+9ZYKcfF*2=)NkW"W";cgNJ(P;Pj,3)NGgcB2LtdXV1hYCg_Kboi``#;=&bBd$rQG_'0gtc;CSS()[\!G?R^^I&rX2TrY!Yk,%HGHCb?giUVLr43o>!Sf<%>[C2KGK[%9ETl"_ReVJ_'m#RB_Q0VG>6;F*rV4HaDN6]1Ts68cJXlN3/)Yo.eFZZ.))4@E>=@L$S59@%XKBQ1Kmod(FXrtp?$hUn=t__rcdAEW'<5AD.QPD4d6EtUo<T_BDBAC>(-hHpU`Xj)4RV/`o9V!%o8e(k\Tdp&Nqf.I.Gpmc=4g#-%b_(9j]nH$-ZVS^s\0.PBp`(Y?T*$)flWWZU]IGn=>g9T.aDh%p"p</Fi:qk8e;ld/j\&5I^PSZHqachl[^e6\B8QhAbb64f'!h@C%QnH+e2#*R$_7Ui0nM=)E?/'EbQ]Ym0*sV.35ffs4EF/DNfSc/MjdC77,4Vj=Sjrlf]4BQ*Pk2mmo50'Y3"6%*m_29ajUOK_;3Y3d%k5eT#?fQEfGt,I!]*J]9>B`A-h)jM<&D3)H?dG?@q/O=g8pUg4ItQMd(?G2fj@9,MKNnGF'31,Y"A`$rne<T2nSc%,*U<ZmOcse/%\61aba"1nlLU`0Hg5O\>Mo^a(JP\72NaZO-Bk@Mpj3d3;%<RPSI.&&p\\cLU4!KNj'&-6cZ@Y<[i@f-4*.&"'5_o+;`LlaDX2AZo%Gg?3U8P4ANaUH#C$Zu'#a.I-d2;4P_LI0aB7^5pNk.MRY"3f0lR9+c<TGXQT&iGKpZH@/\)#PE*gEr!!)r?Z9))-En<2L(e`QZ-I%XerNM-8%_r?BQGXJ+3IM0jA@ldnYfsEr;R3cX%DMi=hOSc(ZkA#Q6ZKA%`0]DW./h@Y"AZl1Ff\/[lk8(EObgORX`d*r%[WLrRes%3#RFQ+V@<o'<rg>5"+D82#NG+,pGqL4loP)Z0qXD0?<"g#PdOBJD#;3I<m'L%Iiuf2/7Bnn:XYV3ZpiP:,TBB-DPW;h'_\B"Z4/U%rHsmC2>DYX%5:*sO\S=N0]u7V)2fd`'T$KQ6,^TpA2G<Zi.M),OZ<8mN0*Qt)L[-$h<499+Y@(fe-!cdV&`&-]VHBj0VB"GQSeb1%1'XsV+rJa=)SqL\^i'eM"<!+FV()85Y/1"PJ4K-UJ1cN5s*9R<HS4WZkjmW)o?5Leafn7N*!!"q7=G!Xl/1>jTY+s0h,$R?P7!pQ%2;@W>gXinnG2S@im/jp$4!D:HTR$^I\nk(A^qq^+J+2=tq!V`0a<#UDPb@/%i438<-;9<7_-Z0$,jHqP84:OPa@*",,RT$ZVSNOW%aJd0\E.mQ583GlpJ:2e9]BKI^9jAVmQB"A.BRVB3;*uV#-5%cWAL`ukic(nH0]c78JHPp"G6p`&fSpFkcm>)P8j*g/,QJ];GQLPe%Kt<:4&ohoS#S"#YFGbmKY2_o2-$KX+"s$1]TYh&'<$jW.m!rAnT0S_t36+Q`m4nlX(PNE_,RGUo^I4h@+qk<fYquK:9`VgqdSbi3%[/c8%&cs(L9ALnXYrHJ;:Ii4tn,j7G,B,]k83.ZE'9#>qS0;@9"IW$#?_T9<9I?Qqj)Ca7,j88qV.'<IRe;^h^]^BfcB?:/WF,[M%%&)0urM+)6ral7#'m_4dd8V%3C.tGV82<cZ.k&kd.MbHg&5%f_/MA9a2a@D>M&7/o19ZK_=W4hJOJb@rB]\rD'LWDMdDWi'6B<UG%HSph7h>BKs\Y]>RU2t%O7BSi@dHmMs%4I;+/M)AVl3)Rb\e*f3l<T?4Zo$2s;qXkEpK^IdIgc/,pL`Rqq;2$bXRPqAie?b/#BLfj%Kte!2m:8RfR>IU62Q,1.`YOPb(l#)8Br?kBd4F@E>MffiXi&"[0M)]*!-)!%_)VS6)*Vp'.4tRQR'?0)I;`6WG@8K3L[Z<cFe0F5%o*_&<@FK.lBF%pm-k*WBpI_`@7u%t5JpnB_H%<kQaml"p70R7mcH9+8!ga8=h_V?n^R5N6VGj+2=\O(Xf/1J!/1oGYI^dN1V?f[_%ro-36pU_Tb!(=AOh@U\!!rD?gM+g;W@?PQ&G6CLJJGrarnqQ`UB*1ng)Z]P\8iHtkI&D\lCE+K:I:ia`4d'gE%McRYrnDQYcq*%W%KcWCM)Sl!5F<9ZQkHWHs@LY<HV.m#pqg!pn)ca%jX*1RoFq$lrk%S(LHGFJWMRfV]6Um1.]"t26cKI`1f^iFu!lk_G!4$V!.sFCE%?6rJNCo(Rt>@q9AQ)/cp,u4p@^oMd!A6bO#mO7HcUP6/NRM#f]ht\@O7;G@+hhVoV2_Ki;rc$fbNm.(`K`Olbku0],hS@n*3t8C?%q4EUr81]qP[&*O`NMH9'(L<osNHfa%X%pUndC=<l'(el@`8K9`9tNT`oKd/Tf@AUVi(sLo1o-7(XXEhi4s_@]OIOXNN4;(%BG^s?%;*rkW!JN]rd,5n'e`_3DL,UQY,>##)e-O9L=/[p!jNS,=S?bKTOEOd0hW;P)[UAlNUhSQ;Vttq(KMHI,;!J*D/dMBmWJf`FDONF`%OB1;MIZC>*,PD[*/T?))0XO(F,=^U@dG?AOBAb@!3WlD5@60%UZ<iNfU<:h<3u'1;(F<%f37Mn'<%f/%2URsc5SH6d_omLRPbsc\%!)EqLoO"Fr1p.6Y%Wq;8mSm]1)u<Xo3tcQHU87"Ub3c/66$ea:1au2tP3]=S-kH:.6\aa2\l#%eYp8lYlL,V09@W3m4852n[:nWY%N1.rF[Dl0CNCbu#29f+2CN3T9O%Yji"+W^6,Kcgqpb.a6r?+lP+\iQ;RA`6Ef[c.!dG@O!YG$HqrfZF&l%F"5%Y3>\K+!.M:b7%L%&NV-/<!Lj&[XS\Ar6/B[Q:`DoDi,N?,%Ej#nmFOG)rMdFZQE;U`^aitr_r7SK(KBg0,9E(%>lL)7jaL5fOR#QqM::@V`kg%'ki=N%r>@#@'71Ke%jR:RKtTh)3OYV!2OS^j4Ab<HaHIn+P)0f\FN(IsTE)-eJ6'#hhPR%7qm)=DIaNNbDQua<&8j:4Xd'7!ENt\,&D)o`%,;g/4"ZcZ>)H\^.3kWFLRWYLV#;R<S^&A"#d/pC#aNGH[lNDt<,\a37I\AjRGukuZ5\J5sgA*)/Q!kco;t-MeGjg?F;FsrddOEU6%:?3/'&<.qK8NYUE/Z[$MC7?([*caN0F6oU?#pnV4NT&;#J;5:DeZr75r'd6X.s`nH;888/#mL:XOFk"5T$kAe`dVoY/\uO2g+*SV%Y,f'6`ZU8dh5\iG+Z07O)%9727n#]g].I3XEcm7jg.0mugRnlg/K@d=@Uq#XKF!Q[hp!1,LC>E.K3NjE0L>2Me6GUZ^n]OJ`s[tp%$*pC>[gEjKo?.PJ"(7E3X\:M@<WOP@Geag@TUhA^q7F5gZm67%$"^,3kL^Q&6)^a\J]>X:S-3T+RtW'hW4Wa=f`J(:8%(O_p8Bi5%9q/0<B@3`Z#urqlCuq6NUTl4^0!4ST%4[g5(=njqgY35:)pkp9LQsE8Yn\c'I^1,.O&fZ`%9/;?#X/uqM$P!*BrI^PCH@.Y%:gB8%Vik*Z,')+Rllc,"K/LjuPTnu0K8P?h=YfA-J:%`q_]'_t]GIXc=Ie4LYhN1HBH%Fc#He?g)"$)t53E-]a#]i_N-KmYGJI.:%^]+_%[NRZqG&FkcdO>kUE&R23jQ@@edZ6eB9:$CF6]#_AO/7%[iB%j=XK.f33iRtPE$7_4.6upe+;k^A>2s%uXZTu[X,F@V6>.=/Q:9k'%(NP**gVm;P;B--T!)0S'?tVKu=`R?F-ijRTbpAAu3q_H9dFu`YXY&^-UP[XI=[+8N7i7d0BuD(DHDJ5*V])Dg%ZAOqWV-CK6W=C$%X.e9eSSs0XV0hEm*p]S\lE"BTE5je1!(`U>s(@E5`b#bhL?aQJR-f>_[GtJ[2AWXf1\JLTaO%:g?h0%.7[%HPLsrg*XST&*2oKJe%=<3j]Gu"(86]nn3Yc(]WDF.+Jlq:ISfEXTeLM_&Ac"^)L3jbS`BIc]Wr1cQ<OV^3kg7U6`ohiR=S0#Xn"g6MenJ\IaA/7m_&8Em^%`PRP%bu=s'Wpsr;E[nkDbQ6>)L)Z.$$u7Uk@"=p;c=pr$\/;=cT]2N`#?no#MANLpX*0qj=KrT[WIW]D+CB,*qL"LUlD2gAp3B3B%PZ0LDkia?m$$l"')N]ro=D2rOrKY!QbNB?'09bB[h:-bE50l)J$uI6<?lRMFYP8$>D8_4`O;kQ@?>o*I=p!)FCL[cbD,_uB)\-gV%#`3fNr(X*.n6f*r+<h%EkUkGrZl]si:fL'sA[u$RjVtk*kBG*Mbop:MKJl?T8@hb3Y_37-LLOE3hTW4giD2\6mR3JF,%r)iE=6ma%\]hGk1D9tO\8F.LNgMN?L(^%Mm:B*N'd7b=bqTWd2#XAPA2R+(:Ga:5q@,tHN!>*&WNZBhg?AVQU(J*==N%5=G4.Ye2V2</R7;+k%#ZIa#`t`fsV(Rs'qo2h<i;eqPS?<g)Z#6B=`XgW9W9&cCp=EO0JI?$eI:o(0\cN_l->*$%$Z2mK5bDLANDF"Qr]G,]o9cq%)-^:O%P6@-hTh1[j@A';Kph@$/U<HF[L6ZWpF;W!X`\C%QeCY.7e51\+r`K+c=jCc1")DUH$+8'O8+j"GP1$]aANnc>fq=$oMfhk?!8h$g%YaHMH;!4ok$sZtDo@rs=_gRcp!O<]F0si#p;Kp1s[94aU[N(qCFdk8t#otEd]3T5FD*j_,coc/tE7fsfkc*"[_@],B%eS(`]41"?%V=%[D8/G#7Ha+/_L1[3n!aD?,"0mjNmuAf&Xn8j9Hk32O>Jc",.[%E#r,=E7[:8#-bIZ7lJM(tc'L0MpIC2FY/%a]cmEWhWGh'U>%2T1.DH(,(lPETl7+rEf+c?J2q*k45C5]`krg:!j)mIYtGa*+TTW?'m11ME1)4$a^X;2,;%?>Ch2BOhISn69b.?^>3)Fp'p1c(^."%=W@NHEHPXcZL`i`/nr$kbMC:^;5[f9jmDT5U)k>bHfJV_!:9Qf=FQH40THu^LuJUY&+_IT_?s7Lbf8kfYaMLn=$)ITDb&_B_uqEs%e\hqM77Ra>U6ckKOb54I`e=iA)96dj2UD$rF8fdjoR16=e,Q4pdQ>0[C_dA>k>=J_TVG.iZ"X]KD:JrbFQDh.dMCKXYQb5L)5s?H%W/r;7+&=j)"RdM^D15V?a,N>/2Q1@A*kM_Mn]RpZWsf)R.:uq(%sp1"l7f4t[0<=u.KgJp(:1@%-+!d<;Y6_l`f5/BaVnZ&5Ho[^%#m"o"W.\rd*oqmjm>`qE>Ta/uF+!^]nU2D<SNO2WZi9\=f=7/S/CFUXF3<2)1O27o+6IMdMZXYNZnYF9aJ4]c.c9L,7C^gV7kms"%5q<4?N]Mdk=0BRAZ3QFiQI(j6j/,9KAu_a*J:`?Q?lB4&'i7uRN^Y3c1uT$fVor<ZNGMKQMgjt#P49s]Vu`,KVqI1a%X3;BD'.WB%_NpEc+c4^)KuPo7R$#g+=N\d6SM9\YY0M)GC2cfDV/7H]QM@H%0aW1L%8:2`dacL#W-;m:,;hYolTfG/j:2AcRc_:c0S+WRLqRt#%=OO6OGH6jME'Z&IT8m),*)>kuE4^,7bUZr7@NZi<@F=XI"r,elL9Z^g-]b!4s4[/b6[DFHhjj'V@*nQC%LlDTo?([$*@_LYCN`E@%Qo_<Cn6F?U?to)n)U(=+34%<CP/7Tc1%1c0H_n6S(Q]XomKN(J2U-OOl5/MaMY1^9A&rXr8q9-aB24!YPiVIu(Dqq39CQ$?fjAX\%m/q^m$YYG6I0_[:fNjF#Y],Y+1XMF(%&U\[!a*,<%X(^I]cFI'9mIWA02.$(b5`AdUg!j@Es8Fb`"l3D9'o(fN<LR/S9-F9</9oJ%hBCX-a!HGDNMAPlkrZfqF:3f)ECBL(SF=+l^po$ZO+9:sXW2=u?+&FI<&>)Hpd_c^\jg1(/V"#>MPa$4EMN0^(fPt'1jbGr._3"`%NpP?Z.YXXm<4kc>[=]!"q\O$DJXsF/okiuClSuJ!&^4n`K3gXg@[E+u93_Dg6AGmSX,3=`;IUr9]fF_,MsY.PT@_Dpr32bDQQg&k%*uU!=&;3mX.(6R?ea3!FBJ[9,eJGO.8L3ZmA[bI%Ge)5l+Q#5m3mI*2kXqPT]2pY?6L1b9ThZO;@(^$Tm)pXr%gL"6Q[J-S\<ZB"%VaBgM12$pd&hCk?0t)Cps'XFH4MG9g33JZm[[KlKPIFUhcadd6FDF%<[U&#A]@/@HA2?QN(FX1sL1UBNUZq:lA<l&'4t\a#mZMiB%bM6a!q=^K.:-Oh%FM+dllf@;CG%Z=':@&3Z=X^qk?9.LhmB_&e3*OH0;]i'N8oTJ!kAX3SL)s^u_]PhDlL?BSTcJL7hT>SfCOuEZ%epAND=MH:$ki([\mI<eq]3_DHn5C]2C7_lQO\$`j-2GjOH`$C\grM:crUh9TGTQ!B.r1brrYsPXj*&r495NM"A92R8]bf<agC>TX%cb#`Y1+Y8W3PKr1#.b[Ml*4PW(2a0,P3[5\/kRrUSO/\FlV!i:qL`!oSk38^6jOi/IG)KbcH9F,.ifGA\f<jZ<q_[[mPV4igN^k/%C+Cs9gHF*m!8:(^Y.u?/9&(_q=GWlgI!6eIPXtDSECu<G.qcgT[Bin?$9[luPQZC'ML%Q_4?fLJHk\r?"+0,Ml-mp`ksT>ofIFRm%SOFSD7t>^MM87tSBe**:Ds^0qh!ONG2a5Mod7Pl%#5qigj3f?K;>s[c^l(5Sd_C,<)ppD4>C7l,Hpah:;K+jdGYEM7F4K8?T\'[F%I$Q0qI5RXqh-?d0IJ5\2MaIEKfW90YZ_&n=QH,>Q4]L<,A3M=YO/4cjE1;pEk:XorO1Vkfk9CSqDYAI[EhU$8!X.r)-^3-k:)tuf%q<X[5/l"?$b/K@[M23)gd3@t1eK=EN=+U<Sl;Ih!09N!7gXX,\Y'N2INe1lYX9K4+6JV0*E`X!k3>[C#a&dS'pf`gSSc'a0Ia1Cp%$1,=nP`(&Q2R`a50)]Ni.m7LP$S*l`83-Qa@>M,j@+!uuq",^'G"a*;fa7;[hol#]8LR*q<$*>(X04VE7.f\6%'S-%ftZ+q.'sZ>%h,</f<)tF_0Ydbq,tt/bJ/"FU9\!>LTWN#E>4%K7gofO>kE:mg46%5a*\t49^6]@&_6$npCe<&\qP<'>jf2sQ!0Am]l!jYaTkcPj%e5Fc`i$$bV9N-f[Ob;<>.-1jib8ZelG.AH>N!/hahLclA$5\5mhCP"NnROfq]XUB3-U]$4DP9@SiV3=`raX==jVdcXb>m<kX.YB7%JC6`u[)JS+b%niS;sq6M?3d[IXQ:+He$^YV2i>lQ_ZZ>Yf+t2jl1Y*Q(?&YOPF$$kS8IZM6NR3nXMrn;\Jnm]d'm6&?!!Yce-?ZB%5nZml"CMr:3Hn0`jLbD?Vn@(9qDGSWnTpDIiWSHXNNaadg9BYqrOc&dNSu=ZAH*e*!n3np,L9<WJaF\U#pa\B-(ZK>bYt\8IU%u+%VK;4ZS\mc"1jQh>;W)XK:Hf9GEg:&jVERG.JK+bVoWij-ZR2i@Q9W7t48Tft2L4+pq8q@V9eO#cZs&&<>p'XbVcie/O#T<GG6tjH%fdF9,Kmi'l4nT8F:Mkr;KjXFJ'Gf&Rk\Ho5)S(GqGK%&Q!=J>*]\$A)-Wj-`K>m/tgLIu$S*Zffn8$G3;l5n:NR$('`)5H;qC](r%jS+lt[S[\tRnGRa"l()dLrY:d'ENrP8mWR1<T.lNW&&Q1e:eK'ns#,dU9@1='knBDD=l+3I#c"p=&FgCUZmV;A6[ei$486gT?8QD%L8>!QY?r]AV&a%h%*KcQ,/+/AV=ona5^:_P@i%G-IRTeV,9N;s+_qG.T(A,$;b!CD*lUG<?U_7#P2D-N/BIrO5#n7R8];BHkQ.@;%;.T'OYThATdBTah$l`Q@+k=B-$3GE?N#BE!36CBrf[nHHTStGMZsce\=QMS/am*X*<cq37>1=O$,%nbBgWBpX(#^;K.=*-,53g]^%WpT$STc@JQodnLXR/fXJ.BMco%)jMiGY"'bBTC]$'Y/475)JKY@%bWZ5EC->D_kJ.4^lOeFh.o2rFSHu0[_rskfVIjq>KY';dS/d%!A+N79$,dN\-adR@Q/YCEmlL[?Ji&bHM;JT<+Qth,!NNDG%\0o8)Olf1VagU4#CWF`E$qf?Sq^6O#ES0*N/M;Lm@>o\j'J6&$I(5%-RYO3/O9+j3d8ga0=$jE^'6,j-JKd<UBH\IO?"\U\"2H(R57#905irR-hOiSWc(nTq8?;ZW::hKI'$DE2bSq+D$;Mfj'c+[N+@W*%V_0g/S(<AqXss![dnH0FMWWS_#PTtB>*',a>sIN1]RZg]XS)AK,gH^NCB?)a$(V_<f0lq@'FG:9cpX4'kPMu:<=^CpK_RoK%;pQ!%aZd:#c6G,G`KT$+cgiWK,;&dkLX3r'Ht"*)YYiSNAY1mP=2("%15DR%8=JI.l\cmkhb0JmMFSa[8js]g/0Npto]OlEj=PFVc!B+p%!-/>".2&O>&M'bG`91GNZ)KFm6(UZTSriX6nYu6^kX=Zni^)0d"89=[JO,8Vpp;n<kV(Q9l+hK/>i4qJKp/gK/kVL`>_U9(^tYte%Z@9K:&]rl\V'SpF\k*!7F^knVJ)mlH;J89JA\`uVhW34:#m#!4JG8ZkZN+r4/t4SL5r-eAGg1FW]1_DkL"M5UUW3pbR>uDRE["lI%.6WHN?BXF%Qd(e9M&cZ#N;1i7PXnq]X5TsUZ@7+i^UhVjD=Pt7QR4b@nE$gu/%<mWQ64n16mWgoCIGHiXBcI:r=F#m>gU,lA;MfG%@o%G^O&$q@EgGnC2mLT[h*)`bS(QVILYc<fBVl/-R_CHOq87SrQm]tW)du=I##DG5o_(jQGu0KKL,q?UMj:`Vr:9AdH#mIG#/o%4%n8G`R/C7/Djmq0G;B%q@c0j(fg$INp?nKh;<'!;?V*>N^CS^Pm!95b84Q\T[72d,AR&/6&fM^[8?"\E;)bK,AO9UAX(ao<BW^0.%%maXu6E\DA8\RqN[F:p:-&:D&9N_>uJ6]W'j^8BYc-(qe[mYq;>jb,oo11Y,+f_jijLW`!OjFM-'bIDn>hC(:.kq/=ur6)lOh^=;8%_\H#d"hCJCO;J67UM"e_nI5B17S@te]F<tkcnu+jXg#n5nG'p6cYl]7V70O`':=/_.JoN_od^r]XjA)M\qsE/^dS#)lC:nS(4PW6%D&=P'T9/Lol0He6Y`t;pBDm]oGDe&:44+[HHG-8j!S_-($Cp6JW?*1RF"r1@$AcI/P\:Fq_ade648UsP`M6c&.3H=<&*9rP03c!Q%C&iJo#JPhWAA1\pGcdqh.[8b.n`]4Z',hhAW!SR23u,*DVlFO5Q1E\Pg-`+On<IWaX'<PQs+VU52[]!u9;:P6!h)Y5D`:`JD3I7q%5`&eTV8-];WE!kUXnlu3fBhni@%`I+$C830PSfpVY5oriX.c3SdJ=JqoQ7;^FeS##'VR\eBJqZ;orBlVdV\*g`J;?*1XL72iW5*Y%qh9BC[VKusR67Zk?Po5Je#s]r'M$?:\$eAp/ae`(Otf_o.e3)Q6#X!<%blEQ&nZfS<Wo'gcJ#!9Z_+`l.%D)kpC4JQm9]9T:V^fG%]EX:arR=r);HH6lT_GVXnY$C'P;NUHr]EatG0?M54%89gXr>.),/132'q:J4Y0^<XN<@%X?0'YO,L27&i4;1J]AVuQoN<tDjt8Ec%PO*J,YI2$>RI0dUHn[^:1-(gs^,4,nc1H@moLKMD%/<MGnEX)IpKo"_>l.tD?qa?IMReDS5-'kPPM/7L:s%R3,&0Ril#*Y'bpCij%aD?5S2Qm7VO[W+jc1Z+Q>faUcb(XZtqJ^SD4NaM<h4/bSgu_-#[X(?,GDZLICk*d;=jCXIkZ0UlkMK*@Ec`#Rcu#Mb!`X9p`e@AK%oCT`_*&)$=^g?Ti&EoJ,a6a+CTqXeKQ38&%^B2pTZ'N(?<em-XpCbNa@d(B8b\#-b\f0TKr2D$/bA9JuH;W>f1C(VFHk0mT*W"BU%E1;<)QVgJt[-0K^(`!Wh"eiG+/!kE;<dcoW(*>a3]o0T!.(rk;"812mKU1%Ekm)5]jo_Ja2-aruH/S$$c(9XlO+`ko"(-?<,g3C(%%Z3u@&"*uF)JICH#2ItD0,L)S;3cPTrrj;G8Jm6u9s!pNrC;X!`4PEr_4H\l-:U$>`aJ,AO+PgIG1hAp\:`)g1R&LG7=+,3\dH?*%l2\u=4OHn'7Ol]%hZ9eAi$3G3k+f`:hX>'#pA-:C?Bi\Wn>R#N@$)#/*YWlZYu31q4Lp&qJfGd72*qt)/Ouh<3bc-Pb*M=4(5s4A%D3uG]4dW7?Q,+A$>irP$dr.DW_#-dHWXD%qSqpG0/._uR[(<]!`Mko((Y?W`n<Mon0`XmPATL7M^O-3@lCB?R+8C(8HeA@_)fK`C%TM()oFRYB'd)Mbi>m,>3+-/;3!F"Y4cQoitaH_iF1)"VJ+h9Udo&;\DD!pd"UtQBug#3-tB:/\1_1>[%9V]%3V&HVFY-m2a*Y[Oc%*(/+m=(2>Nee#B-mW;:\](g*_Q;Vq*bZ_&ScmW\+qJtR!GVVp>\WjZh1`@=*LY&HF;;Q3af%,B+rfL#o+VP7A$qT__#V@qO`Q"e-%^+0@>ecPo'Y<fdDHY7j<:KG<QjcJ0:*hP4]?$:uPDeO!,@qQNl^4S!7=ZA(2hiU53lj8_e<B(%o#sm;<?Yqnj&*5q/=ip#$#-H[Z%r5OC'5Xm)fD">;?b,#T$!SmM]QMnk?gB)ZL'=R/L=qADr]qHHln$@eN819\rla0u%%WeUQ^SOd68Dl[<;2;s<j,!*bOQMOsQeO'G%2/al^_h_tg^;MCeXoNg\;D)TdJB07YC;ZHg'?KE,G^t7Y)'GQ`#d?gBc>o2P/6J7i-EA-j&SJ(,>^jkmJtZah&1.hH"k4,Wk@<=;%,B8)%Ego\h(Cgi?VoCLaYa2UW=4,XZaiVi6Z<;!k%G50%C9<`VI^oJkBC[N;7(,;F5fu<7J^/-+F4X+`:+(^oqlI#A^K`l]NWQLn%anO$_Wk<+sq3\7t%9\`&Zn1PZ>OfZ&cIVKqPM#cf/-.D;o<Z).Y"R9Ca<sD5aYHGN@tNc@>cn6RZcV;QarLHqGpt!h%;lDQj8IN[%TGlV01`H%%-:2QUk*[>p4h-!SB>M.fnnL!WCi]MY)j]AgL2E;pZ&X4,+M1X5TnUiG2?>Jo&Qb_F%c2bj^[^L>>"_\&S$'f`8.XrM%9oaq1gKS'u^((/F++->T>n,>^,)tF?W]/&"MS!shqf)rcn(m4pQ4V7.G<eUi#pDh*SG+lq;1u%KqG+H.fa68S[N837\^]1Blu0!.%?pVH*(dqDlQPW/tn4LK`b1C\N-\lZQ[.OFh&CF5:C)JE)qIuG1j$&"f)D6I5b,$rH.D=TIDh,V05+"0V:Y]2;I7P"5[/=anGBm]&%c'@RNNHkG=A##5uO0/Q2'/rCUYCPIo/$B%q?@=@.+&]4gln04+XFB>TX-K_$L!@R!$+7MUHt,B[Y'*A7GY0WY]7=7'RI4t_V=Upc%+Z-#;jOOF(e$J<`H<"Wk)o:MG;n+W^Hm3V(]MeHqjATGl/g%P^%K*dsGX@N$*U&!m9=8L`Y"D1>aH+\e3,G7<[2^?89V[s^oT>n:%6Q^BkPc4>;XW4sfFBO(e^I02#4;X'FRY3^b\aR#ZmA#TWlU9n7V?UG%bE@\f8556_a$^<:4tuRd^];^7=FDC"nq*-1'MlII8nW]3%i4?]>i1[/IWp^s[Y&;heX6H,%dqZI:#CL&9ZU5Rr&&%,*mJ6h.nc/<IHF!mY2"P%H6pndp7&OqgWm+".#@lkYhIKMk-`HE'bsV3*%.@ais*]tm*':Tk8,1?0mG%sq/=H(h/=S_S&LDi"U]YP*4AV<@JY+CM!fAI[S>q`j_9N-C1=<aQcrBBR]%\o-Omjcg?qJ=4]3dlb.%R?oqrNkAmr4=pj\j>>eZj,GAGO[51`5qKU]<bi#4As$Sj$4RXmjkSk_;2hJu@d:.)K*W*nAqO`+aj3't$WHq\C!'so0E.OOm,-C2%6o].o("dF8U@;),[W@^j.M&\H:[#W<FMBlX!sA%cHan+090pm@:O*ibls;'n9E$'AZ*`'\\FoW_!qjq9P5f6;FXd)j\m#O(U2N[g%ROg%-7EPj.>8u6f.!h=g!lDS<M[@e].l<C@rl+aUEVP!q&#Yg.D1%eu%nhJ[e%=V]d8ED^>3l<'3\82[e*kh>h9oT#^<VIeekYAh%ngn'o/FL!VpW6A_^X68d'OHfe@d3,?5`ri]AE-=:N@S^>7j*AX@fUS`?i>Xc*^Uut93Z=o-O<^`aaY^T_64A)BO$n"<gVb4FX'[=%hj+V#]e5p"&$n@<`$'81<$qauV%DFpNX:isK[gus_o'2i8"6"U4MNIIq<,f#,9e,.ppKmEUC0Dg494[[H0)VQ6t;3E8@VL.j^/:%%#P=Q*#5/Omf"a\,1PB=ij4$@Gost#%^)eudh1q_RctE@>m.j6o'W'n@_]C(1j-c[oOQiFAX66CHK-iW,#<q`FGF&.J+"r^>hAk*>%ni=,ua_[CT.]dQZ"YBq<\,FhQ6V/:4XG^]CfZ%u?-doR]*H\ji)I'c:1T+i;''9$_emd"EMT<3Knf,4'Yf7_jM/r4#@Qs"ld`rbV%r)PZqo\_E$<<i]nU.91`ENf5!"pJg?/*U..Ndi,<S\dZO7aQM?Iu$9Cj9?GX`Yesalgf'gjJ?9<f@LIa`oFbA^=Alpr(EN]=q$jr%'$9\oM$EYJ7S%7nrRu#5_pt]8qq6ADSY[-2V+k<d%I3HiWN3nUhWJYBe-spD2Nuh#(c:++gjdOSQk(*^GTb.CiZ&C7C!9+?XlSbi%061JZ-rGG=.9d4L=RgOeZ\$l'?sURP'QLAMIVXi!jT?^9:A^4cAqTZ,Q*#IKd"e:OJDU7rfWL$:O,khTGKW$L+*WOiA<;IsDN5-O%899W'.Mr2=-Mp8':S/[WZU'`7:TPhRNUj+Ulfb!1ib\34D*I12B.!MlT3n&t>1m5CU-YKU1r>\`3M@s#_ICli+AmF==>h8njH)QT%HJJ!/#)0l@3:-#ngTj(`@\qMeHEUH\H9g8WoQSLa4cT;Ub1Rf&S7MojD?"k6EmWRMKB7[7TGPQ&r^kKk-l>Amp2$r)p3QE&@QN_r%7JFlDd#Ws,UMM[KF,G2SQlso"B!@kVoQqD=<7H$:\"b']3@O?s"I9IK,/#Z#l4$VUoSuWN9q;NUQa/9\&f<IsBk3[k>OkK,ZkhIO%0[7Vt.CJCP'jP9tc[VmKoos^YbiI]T>D>F0[i_6Jd,3rEK*pDfXu,?M5C`r,UI_UA4]>,qih6)PnjkD@[s6kDD[?ml)O3la5oJ+f%?pkPI/ggX#U1*f<PFt2UDY7N&U8EdMAdTp^6!&?'Wj-M>_?_T_UH(`W@*mp[1ap^[W[a'ZA0amUT=G:H&A667mo<5_daVJf5Gc8e%[9"tjq:+GO\0?:/<mTO9$M=i[T*!DE>dJY^<a[LUn4D&kTKhY9iHZV9^<,s^\gcZ<[_7',q)!ABP^,/LeZO?NZ?cCdq0&c4]rkR'%bsg2)l]t=0^=*(o+0g3B>.\Hc><]`&Y1F.8Su*"L%X2dn).Uqaca;ZuRm9J%:RgEc`qZoa>[]4VhA-3!hXFL&Yrc;E]O^j3h/b<W%C\dVYpR5?pI-U6M$nhF4QI!1POo1L+dpBMrpM0@8bl;E>Y$c)<q/I[gGAm;#SZPmeXe)[IXW9QC>%;BNPWPqnQ>[j8p6S@OVn&YF%l:/eQ.HF*q[(@bSSagV;Sd28s_S5ZL&DAj$XhGlnk-Roo>Lscp&GTT9U9X\s;#HZ(*s8/0,p0\q()KD8SeKDg:Du5/)6<lpkn]S:%a6<im*`h6l&H&ZCZrOak^d!%CpEoa%U6LbZUTX3om,OEWlarKL8YQ;O7jE!I<hb[IO*c[ATV&"<L[\H(>pmM$pHp',Qe.<mDXJqP%i_$_e>MB/KBt;.mha9]#^srpPr#CV\'._GUH.(DVg0nJ%O-YD"2=a%:%Z:0(b<\9TW:]B;Yf7_&g-K56<R%29o6`t_BObmr73*(F%s2q!38BEmq6gJ*1omkF!]('/g-p[6=`,\\YqU#4CLGcjSXoDI\5p'F7+^H].0qCJ)*u8#ZQ@hNi^MQ0uc;M`(:uEWOQVZ3b@7<).%je0ttW9Vru:<UPM:XV"CHlId[7Lu9U`p9kL3jq\_I(kp70+@4nHVE$HhNmA#Or&BDolCVV1W$ZjrZ9#'[3e/F=!$pqE*95P-(1jK%#^75se3A;.J"nL4#iqr:?@QI_YOq$K?0nBu=$P%Op<j1A73K+=&f`p3$78We>esBUTCcd^N0=H27^+'&#%ds&g[0nn%'_0&o^^s!%?1]RqY4WhXkXWP%TQq-0EhF.dEo[^(q;r<;?%`-nE)Xc:BXJd'F(#!6CV1K+;c'F34E2A8q9U3SP':(chJ>g?oTA7"OT.(@#Gc^T%'j9EA1m'V/AhpV6UdnaGq%EkY7o0]q85g><l77p6'Z0Mh%/A0ka7ZJaUF'a:b&deg'_jR<iIf/9NW&^!E*&,WUJO$_BtMg/,'HFn%k!.!`S`(.WG#6/iAAa@#=U39FcC>!D(_5\ZEUu-rk:!tRO;5l%VN8bcQ<s3"(dsG*#NkV]dP#HZgsmf9+7WM;aqI5NJ/T-)M8I:Q%GHW:r]b[s-.W(#l,i"5b;_tS(#VHtt[hDi;Gap3r%gK19<l5A[dJ_hbR1l;*:=bZc"Oj=a"#s-)Q_?9NogahO"@fr`4?g+%EWm"r%k3b*J:rJu4_Rsfg)>6^FbI#eIWR^Z/%)c8B"_k4c@>U@jRg\T*[%gGQ$L4#=Qo++9_LgC-T'nR-<BaEkj>r@J*T'`;pI!]#>TpRo%a=[2M.A5E5)'KD2)?$BFqZW8aJE9bJd%drKi.Ed]ZH#Er]=:`cV3r3OAT2$<YJ#RW?j.f,p8&!Qi=RTaAk<'!9@>f(f5VjIiA3gL%h3;;]&D13GqV;;$**>!m"'``T]"TLn4Fe8/e6B-]`Ir(k2%K8!H;lHs_Y%RVYK`jIqo9J`o&<iANSTgE]e<.'g8%Z5%Vu#nQ`ja\%Xj&NP'QuCLDZ*ZZmeV3V:<5K+lqL.^U.0m.<S2"_(/QE6Y2i.B31W4b4#-.Wk$ZfO_q5nm22pcGRVRlTFX\+uI`-4Hm$S2(8W1-a%NXssUK%CcY/:ZP`_D&2+T:9o`@"3H:>a`A,>fCiM,oVtjA50;7:S+)f_Tp5=*al'f6L=%FMH[H3'g/cr@;Zu)3XZ+]M#_l2gVpLj%Lk?BAY[C-nDd/5V&Vr.h[Q"!B!=Q$_3eX3m-SnXd^6k=,-uM\X61/Nra2j08$YdK2i6r:6pl]KI`&N8]ehH(n=FrLu%?9jRfL)"]%+\kWf4Ri8WlRAqqq>8eGi+:ia?oX"_Y&+?XOW+=/$D6\R!smN!7/@237kFn>IPF[$PqE#U"?6#AE8a/]CWdGD%`m(VE.B%VYjfat%5!])6kgY]*cJZ^p"W"DF=PT&V7"-k%n`X`!)qM@jZ'!""S[?f.dV+::;!mhLZ%QUS8/A>AIQlCZ7IO>s^KUgB6nROD.`dhHM*ZbP%9]kWad3#e)DsW\.6bQY]6KQ#iDu_roN(a;78BJms>'5e6:[]-<mQR#37BaZM&`XSk1Pc+cT-(<i+a+J8f[5KV?)0c)8nWq#Ph&:*%!?L)$':hk^'8%`N_Clb9b?Xl0B4FbjaG)ENK[KafjLR-9@&UmTLbZRe*"0+_HdFklXEu^srnPp^U?)<1;=fbNd#q_s=iU;S"i1+s%00Z65d-1Fl&QNJ((h[%gi'sp6X=+t4QA(f.lR76M!u:UU8.6^a+"#k[^hc=W/k'HJUO&m-/&j0^Z*iD9"cb@7GUo/J($iDlacL4U%2^o0"W`p:LDY?[5KAo`]H8dUZhaqq=Nthngp#6i@Bi4_pFJf35JnRNqK6=*f9KU_j%pE-Q=?@7J"4t!ZH@)uKdT#UX(uPFk=E1MG%8j==ph&-)_fNBK\Ef\NZPooWF6Da:bBXYHg-(<3:(m/Ju2kYIg'3PqOJ=,]$4XrV?f%g5K`"Ge(^k9q0-IH]>&oB0m$-&fI8MhsS%#O=8OM$A8l'$ZiaSGR;lBHF7(-Js/=rRgHAD<:`=5#0apF7]iPk!?%)VVO9i[o0"i00'CPGW[4UEVQ$F#4+<0=)\fm9*cu4RH`RD%!V#o=]k#(;>_$,90&c0c@p&C-2>b4k.ut4eBtV3O`0XNU"g4=<X_AcK!.,S@lr=sFd>r>UKV93G9GQ'<KhLfR2KIf>eIJdb8T*n=%0p(M5\*j?F!M_OU^BH>Oa+L2tWT@p='EN$2n,@3NpALPM/i9=X*,Tr`b-feh'Xb"<r&LX&Dcel2P_o8lf_8li1";7'qqaYtTme>s%mpRl8\e+8C\^H5YT6>$aXpapZX&0hMNU@LuhcqN0>$+B^!b(5"WG*38d(f+dZ`maK/Li>g!A+i<>Oo5^,NEk>]mEE(3i[.[`SEL_%)e'56`LWPmY`^/&S(AoYbrc\A!;O29j&(JNU_c`4P9S5=bG^^6+]skA<(r"-oor`BBp&=A@q_DpR`3?Qe'H3`(BC/W/5+6N=DG_F%Z>F#_R(G9eHT/10kj%l`kqjS0!+SU%Gd>lVJ:9*-E%HFB.n^u[@3f("Os7--UnJ'"^87l8<E5[Y`QqXbcU(e9nLT9Jcrpd^=)U`9%\$%*&50POYS1D.MTsLqqK:2G^W1gQ$TJN+p0QmnrI0H0T_+n<(B4!s&Y8/+mL<dMbc;6)PFq(!j"eE[mSJjQd$9CP^i7Ko/p(_]=%XIEqRd+MLI+l8hX%Gb\ZD$?Ko=\N-hB:f\tZ<oV(%@nXcfq>NCj"NohE`0>iHhDQQFWD%a8i0][B2[kjZHo-EL7uY$Sm,/fQ&SA5%Y!PgNS]%8MrcQ/CQ#HP!7+tsK0f15K$m?r24K2F\cA+-X/DJYdX@]#:DU"5>$7;>VEB>1eZHU57pb/+]FKcd-&"aJ70GM.`,?M<E%\"-FLYVS$md[_R`pAAB,1l#'d-^1U$3G_!c-"C9S(fA&'Xb"Mu15KKk#RVO27!^T)`hbCg61hhi&6s2i=Z=CkBI\gP-DXSFS*O#b%Z^Sh7rktK[=J$A;Z2%ZJ`]=jQk_@0CCuL27lmoH5I@@l6Mr:-Gh6X(L5+UmW7m'UZ9b"9f[s)@CCJjC#8rq;G"59crPZg7,XZEg"%S68:,!O?MS"#'dh]!*>_rGJWR#a9eJDl-PF",niq-+g8]P8cFjlnaUVeaX*>e>/!`^7'KKbDIocAR1b5CuBa>ikj(l[9'H,PZ8sO%@WmOU$9I7`]>u10*9\W7->#(-qXK</(c0pp7;#@ZL=DKgO_m.#.Zn_@Qa/+K4*/KCG6+M5@V.BS3L5N5_3i\K#e'>fZTFE:RJd"N%:nR#pBO<oTCWceXU-sF#RGFS]bc+bUSODG`7<dEn%e#N]')m0cjD?Vir,?Dr?L,trm$Zp?.*eDq(J`u+]E;0NZjrW:7o<@AD5!Js%B#JtWh[!IGb_l.'M451I45nZ:Ker6LXjQ*,)Jcl2UR*Y7+@eWI70@@(q(mV;7B/4G`ISucf=KDN%.=srlqi/l(u?uH7%*MW7UCb!%V*9*7Nu]Bm\$X1\EW!k>)93]_0g%S/$1A]>D/F_WX;hUDLBJ#\+f_`aT9Ods&_ngl&Oj;=1fk8,gBtRFPjma9pM)W9I7,D=)Nj8)%gIGdDC!7bFF$*#^7ZfCcam*sl1==V\FPr^"(DmaPj(W$8JM-k!-lJ6o16\6+"P+PK,3/4HQ_@+nOb*1<0rHE>*b(XsF$,iO3Nu%M%cZ3o$9%<_hj>tfhl@@5#b9p&-W/em'F:q#as!FsZ&%*W:oM7#*3beg$T%=%.$s)Vk5,;\kOTB,5s2:S0k,uf&j&"t=NR'YsA=u_c%3G_u&B:ZVa%1l.#[6,DN79uI*[[pFk+@OF!V5%3Il,5Icl<%;(9[p[2m\:t.^os,p&%7A@\fT/IH$s2S_jTm<_'6>Pf#(3QA!lq.%c?0oOW/$!eM5(f*@q;Olf#-HJUeXeu2c;4eAgOt?PZ6hn<a&8#*_s2Zn%)I#[iQ%B*0SG0iUlF[=2[hF*_nqW>S/pR[LTBKS%Q$J%W]+"K6YI17O<s70.QNV^_VB0X7s`D%Z)AtWFZWWIL2(-R6"6p1FO\XfUh4[V1nDI_:>ECPWDmme\I@m^SkTtO!9;1e!AX<dcg.3m%,PfXNT3G(i$RQhLg3_2h#ulqm9U"hjl6D1jZY?6_5P.r&*8;Bepl8'dN>JI4)DLG&34\d@qJfmbS?k9aLAV8MZOneAK)LhI\>Hsf%Q/6pE3IB,l&MkA1UG4<%H8b%blg)OZp7GajcQ*'=jOe]I$X7`G[QLsT<,/sU*AG:38A1Kf7I'L-1b)C30@QjjL%Sp(W(;X@9O<hg%HSJQs=rd_4>ebDoG%dm!aiG^I<jC:2BYoMu(i_./Ctje>i=&oVNW1B&E+\DkrDGTcY2_]C.GP3Kr^eQ/ZX5_P;E0`dM'Z(LL!sX%%TOKnTV/R9+TibOt?tUCh3t]1\Os$IU)0'"bBC-HPG&3CcZ.QC6SRJ)=AXa>]T@+-/Rlie^@I.D?CG3eTErhQ1iLI*[,4/H8W/$gL%[tWj;3BSE+q:Y=(*:+YEQ$_J\EEhQc,gmU(9.orkg'>hRoi>=3$qo^SCA,&?h7G4L_h7VK\[nD\-pEq=Wl<!kT?SB'WlKg@W*Un5%_^FpdJkBBN7R"g/K9]n@qJ%RN]!Is(-gR8V;HK8Z/Ys@8liPr7M_f5F=Yja(^$49SiiMFjmd708CP6OSm"f[>Dd?f7]BGb^<eJ-@%<nJDqe!`R^pR,RoJhj:0fI_:(5#q"s1_bHlqe[hLpu+:PZ5b^*Ze_sfYY2(!HmXToQ5+QR:Ngkn4hD%_Y$/4QeDjapV:uH[$9QtE%QLO1rHI1+9dt'RDaF/H:CioR!C='!n;?H27%?E\EFIk3iIIicZ=?XZq:GLRs41I4%`KjD$jYUCTMTUl^*\p3-C3PtI<g.BYH0g$2%*D)I0>iRMY2R)VS_E,V@'/d&,a6F=J;E.T13R6G5kA%Z!jNO]4bL7EM^.E31+^V<)3SfpTM^SB98aLhl,0#Te3Wmk)hR?'/OY_*U%P,<'5N3s*u`40Ud_<8Y'Pf$c/N`-S`IaN!fV9P7K,0/a6b5q!L%?Vge<T9>o<n!J]:h.=:WLD,Vg=G,K17`/@Z[`k)2.O5JF?7dE%=urRF-f%kQR3dC)qj$=7Bq/p!ZW]D7n(Vrbl,J]d];qebo@3Ds4H4):=gMgXknN!H=uDl(5)hkF9VIp#b\r5>CqA/=<dV%!XemnT%V*huL<3,9-N#NIdR;+UMg$2c:qr:c,)7-/J/Y0e-8Rk`K)5\ZJH_t(CB=<9/PDprnVGl*mQp!FRC-&](jSI$`<RWtsn4oaIcE*=L%$5dik$/Jtt\!dd7@hVqmRFT`"[+LVCl-*o,7W-A<\=1^E"'s0m<3#3,C?\E,7OG461UEW(^"9Nil-p3mrD2a+7E;O-1Ku#\lDFrg%l-*o,*;rK&FC:Hm=REas<)%!*aEXSqX(j]oPai^Yo86M\"),"#qJkT]kU('ul,`+X9'f`_cXg2/"kJ*EAd%A8]"kt^%d2[Oa8>.@%nMCMbD@R:rrpfJW*&niPL(e]GY&YJlM:VWid*4,e=4Q8qG?S6;CK`1RJ1$:kQOQkKPqY_:W>$t_"J_T6'#r?Eg*_pbK1?V]:%sY#%8(N"D-4K&5RQFH,))&Q?5@6agk0DL?,@b)%LD.9ZT(na9FRtjJ7<b,QFOg]P@co+7FNpAFF(KF?*IaE>`AMkJ2bdDM.Cd.T%\B9Z%GgW(*[Z8tpiLUG/5FK0aErUmdl1N6P$&Bt=Psla,UUu"2E?7;+U\eYIA+DrIgWW$t>\d;02aL<'>/faDc=s_f0/QJ`E)i/-.h(OH%6WZii-?l6elsLRE@+Gu3^9=X(Z9+jc4MQ;@*H/^Ui3I"f?cFW.F1@OR75bkD$nE,3.iSh;L6L#%T3mU(hc)'Ia1>bYRrKhM1N?,@%l:%cE9Vj%I5LrD*Y3nlOdRBA`T#@TDelG8(-GXQK3u&<KAm'&HYHPmD3!$A)&SBa9;8@K`WgKa73g*Mj"O\qBS"h#fXMp[uC]L=.%Be#As`cI22jX^<>L7kkOql0o<2].-:QPc41:,ht4mJ!k9+'fU:=Cu]mIO<q,7G#=LIS,.CO/!<U_<XV;L<^V*=F(a=6(CObg_;LH%<$p+RE]YR*1qDR_XSPQ@2r#QK[^kF93qYlpMnnb@4%qPS\D[q4no9h=,5k5]PI$tY%<pjgPipVa[^mp6RLR<JiQh7`ZYA36B9RIj%=]g$+Okta7a.>LC2KQ75Dc80fIJu'JeRRG.%.NZPQ?:<ma0R5EV1W)@PNQ2EIW0Z_%n8dI]2'iPFCqV/[4Gg.Wk<o7jk8`D]!$%u%ppW`F0]P*o9\/D"@Bne)q][@s'M`!Ip1e;8\gq6A2]-0)f$RDt))e]LdqFaWA%5$u_p352dQ29F`u'_37uZD.hFm#\iHAfV\DDK-%+sr:^JQJ4!<Y:NbNYtMXPN*9QrRNr_Tuh_1L!Z(Tm#XYpZ=U+\7U4NS51o>VLj.J1f!mo&Gr1fN3EH_i]C)pNT^7Xeh38_ahn\dG%3jYi+*D+.fH2*6AZ[e7._KCo;":-WtBbHD<P!^F_I^%i!E49$;P(e;Ypo_+n+'4?sJP('OHOhC;Vh7XI[dX4+gk`'#/Jgjp"%0]S%aK_JYFCf^[qq'OfFnK^jb3d*C2H6NfLFlGLH8)CT'C1g_bOG;cH\SmIPUI37<gA/kQ.=sg`f&DpeJE$bgXZ;rUXk&=X?>@,%I3J?%pTP[g67o6bfJ[P<dk9\3ol.coEfJ]3>"9$%NZ7ur-cVl;D8Z(e3Qe`"%q&(!nB$^%Wl?eV?gPH#DH.5AAi&YeC-oro`f'8f<ZWgs%9c`Lk.uf0fRgk7\D@lc<gfbnh.$\\mqGggT:UcQa;@2K)F#Rpd:955\[>Yk,N#miMbtJVB>p.#o8to"FCOC=J@`GJQA\5rMFV\fK%-UlG9gh<@i<WQ+Y)uAB`U8tXmqch9fm7Wp<+s^4>5N4(D;QHms<3XY`;pMhj.W#g<bU"@9@7C=0/lJ_YGZ+4GF!d[bSgmLgVV"m_%\>`Jo,bS273TOj_e!!q#el]IGW9VZ&Q55AN=\d+%:Wr^$N-e,0<%$C1Bt<7?cDF36Ra"B@XRUrT0[[R.]soOd-cV+rjToA6d,C9K%qr!d0]:U-r%]M.JmdI*-R6l/o[:D8?At8X`qZGkPj("p"Cg"N=eB"rG)+8^LJ@LB].]8`),A&.'`B_O69W&^TBuFP7(#E@XQ"-K1%;tQ3OnsI7$P;kcX\?iHH>Qk2-nn=QNmE%`lQqH^d,_;VXiXM%,8ZLP5Xg\LScA9i4!]o"OeuNT-<,!=[e2#u_18Qk&FlX#oPA%%?%Fdq4/W#4*qDGo'-qWcM^YFcLL"W6X0:8sK,jN\_)R?6'tJBjKfBt=pe8p6cYheS0003"&@40uHMGRP](qj!@Rbd!JS%E9B20&9s[%nW%)q5b>ue/MT.]/o9dr]"_+gj-uhOd)n>WaA<n`$;`YdRi4QF)BZ-i&@Vkj/=qf-"_^1',;k!p2m?M/iVl;0@lBR`.R;c-^l_;*%=&jd\pb_2,QW8R5"Cb72B^[0-<<9]#OiOI'b_i_EL!'$c4roX]ZV1,\.+t;/bJg<*2CD?qnPVPMPr>1K3,L;0e*cf)]1_rhmmm?n%Qh"QSi?l4%:D<-kLR7SR>3t-Qb%H(X\.,#B2RYE1NUth"A)-C*I5]SCp\H>HG,DbFNH7"BftDk.TiC?XB6X+H=b5_-4AY2Y1Rl8?%Caf4.rTpTQVJnF-]%:j=op(`l6Ki1ta1p6P@'CSfoi#c`RmKBlnl@uAQ!@g2/"0LZNH).o"_c>dIZrPoWP-o%m'rmmHi<;Lou">2%!U!cRHd[#[:rU*!&#6jZ$MXD=fJ0Rs0iISPp\NS#l=XOd\\?\AF]I.[b2'J7qUrpbnaH.?ON'!Cou"A%DrR40qcj$ShT%RHar@mP%Ddj25]@G5Ba3*e_IeIJnk4^44^XpfG4@RsuYUiQn0^n\@:F_HD1*S'Yf2%=Id9HRNejZoDK6=AiG*LBYrG:II[L(R*Hi:se8t0"0%-e+D[X*_(]e^"]ngYM2YmQS@)n+G0(@]Z.<pHCcr6?MSkptX]kB@TZ-Ark::]mf[aqMD+a9n':<PQ*D/Hi<H7d\b$=,IdMXa>'cC%rPl:c?/=gZJ#hIkmc/@r+7/n"-=S(AI=)^al_jAaHHb8;A]gD7qUp3%p*].`hs4qD:n+(rkl+mQ;j`hSrN*\6GPCseRlMPV3aDQ/%rGYPLRd=?F[2dSq$?rTKpfp=qXR>+iH`s&e06.nUJt+@I]mca8Ci)Lu-8n'8]mf[onG:sonaH.WO)$1gE_Ue^T:pYVi+qSbf_G4;%ft6X?Fd_H"5C9kF_j(nklY"!MAgX>.Hi9K5b%]YsLJu/Pq7V7N\,*p<VK&fsT'`Y/ibA"Jhs4o-$KOnsF?]^=me*pDYn8]Kq7V7"%]M*sAj4H%tp\NQ]/m+_UjR->=$iZB.ou"q]`4Kd2VB?XDiEVt>&iNSsO*8\)i^S-!P"fW!4`[8@qTX<s;jVa4Md;\c0'_Xl`/,DM%g=u"10ColP2JFSS?AlLP3#+/9pju6h(d6LHU8J(=7tgRK:b0RZJZ&*>,(/9BMG7JAe^Ea9hGK*uZV09R;a2&ZgW/D=js:IQR%$g"%Yd^m/s3).3Xn1>jk:iN1HDVTXnEE+%Ml3uof?Q!4YN)82LSnZF'W\.Wb4hTn&AJoD4c$f7YIcajNQPD`Y$ImMj.Ef0]"*-RgP?S/%QE/Ubh$gW2n*tDi^7Y@O97Ha4/=SV+\i\eV?]Fmm'#*MWdF#t<^%)ltT'6Ye>#a1cG>kX!/qjA1fqh7*o/<fd?-a/Fr(3J.2s\N&%6"95MkMOa;?:`lm#qN39R`?eoCJU9h.:>$;)\1_YU8R6e\a8].bR;`:]PK46@P1#ieYV#]Vf1g)rMgBR7(NF4jhfCKG`SM91RC6f%2FA6H#68tP`q.U.-!NppIVPFf>e,9am]EdB\@`T6[>#a[$I`*l^fo/r\N"\F\CHY2_gJjJ(=aZ_jiZ,RO'&4ti3u?SDm8sFliTMb%/8.Z<`-ASd.lI'*!jQ?lM7nSG0J#DRl$IN#B&Vk0qEAn*BImf6K:V%==D2N;e,Q&RpKZ%>=PAIi5j'6l#"Q4F0[Z12#Y_OD!/qS!%Ct[b9Y.ai$A,lD.d*qSK,M>E?5JHH0(Y8`QekAkplDj,ArVi"!0E1Tts0YSUZd16g]lEZ,F'$ePqnuo\r1hLX,JVAUHh'`t1?5KD%^\E':a9rp:\_ZF10@,(>dnb0`?G(:L$@Za-rV#IkP'0X+D=+ZSlNNiLbaDPQ&;tN%Q(F,a`3#)f-_H7h(tjr(SE+>Mf6i2@IN-28%qKMi0do5mSP@A`BZsU;OoX.>)/mWR+Qe(L<F7R2IUTZ<k]5mSE4n[3p],)POq5<4&TB5+HUVGFpg\0[pa7mm3p4lF>%Y)"__=jf'%L[ER>+5H\Hf0@kO>j^GGCA;*s]q55]lCU*lh]-Q.j7s@8H0;kf*BQ9'n+*Yd&,IACO+6s%X9!K6oV;2@6&s?q]omOYXiiY`gV3^R%dGFS@-i'J5Ip6UMhjs1Go7?f&ZXX9MqJM35H'#HTIPhB?HXS"$\OO>+UCV8"Yu9u-S@Ne,jI*3$GiIK8Ilp/LGK81cL\fC?\+hK9%p]ndJV`u07GcDg'Zsdj"0V8#mI(gD+:t9JoZ6+qFVmUd30J+oaB2jM[(@@Oa?[d%dqSt8;B@k$[kOL8:O($q:GK4Y%E.j%DNVSV#%$ic^ri0-rc]6*fBSZgi=f+4M;^jeC&/XX.hjjPebQ_1^2MD!\uC*C_aE#0R#Mt5?GlV;nTIHO[0:u'%Mp[61"mZ3/.+uaK8p(u@-%\$qI$n_DrK\mss[G-\XTqKlrR\)TD/[G?!nIt%:iiEuNoU$p/$_cVBbl,Yb.c,U)gq#:3?XZoRNqt@kp3u>WBHK9kOer9%@g$\!R%%gSSV19U6Jkj,:1oV90kTjd^,h=X$]ocJX1-d#4$mQIH1BZ>Mko&PedF0#8M[f,5>QS(CKn%lR'J,K,;Mt^"snIn=`-PXfPHiMXR%M>-"7EL8Qd[Z5erpo+J+Fo]7%p6TR@O'V\Jr7>;I5Q:9YMA2j:k:`:++,OoR*1](Pan:RI5GFi1[T9=tm;^t7h`dB8gjF.*fC]!c%?XK6X:YsheoD$";5P-&Ih,hT9gNqQK=Q>\]$;U<Gp1lW_C!QG3cX5V^ZR9UR*M7ltT'?^`F*lpO=NZm\dd%HjZUK$C0HjO:Y+41o%VKBd.X?QXQeM0J,raS`lB><]JIs$?gaJnR%pH*OjYj3&]rDfVPI,iAhdI#h_S9m6UX#n>>qd3bT^9StJ4T>pkW'@G9o<f+aH;:1<%"981eBN^\2:GKkpipp)uV!XL,=auulqVJPOp<)Vm(/9a)?hsVHn@%d\]TrID)C%Sm5.rKclr4^=L`H6[RifC0o/PlRXcHhU`c-,T%gJ`TnrfT0$pD`c,TH/M@*qdW3FSEaoJ+US7g]$!IYGum?jD8hN?+bT&br.alVS2-T&/u/TrHLN&9=6uIo@KeDR7H_b1LgUlTr=LN%SU#JPfnK.pMj'pA7881#q%#h+=+<EA2)R\rd:_)"Sq(/Hr@9;,f4Up2G$^oCL3r`F6d'8rF[*P+^)YXN<rG4m2Dt$\8eVY\4_ruu%LK?sY]BqX_QS3PobFSLL+iUkra&?&7ihro=S`s82-)Z4e#?o7XQ3M3th<pL'iM?M4f'_Eda_PC3rS+5F28#e)hZ)O2T,Sr.bH(A<%MqGms\EH@E1>Q>t)ps`)&%>ZijdX/[?N4X"8`U&OFZFsLX-6^oj2s#Zn,7CBNSrlop<g"k`*Ck$DePFkc'Zi/Squ7j?<^=<V5a`*%=H90"HeP*c%`sQ9'(3F%pP1LPI0u!QhgY@$:-n3j3!J7_b2qSRpiW)0pW%K+&oNboY]>/<j#V+IJpX,;ZZ1)U"FoU6/OM;<0/)d4%N?92+ON=tBh^R3HBRf(+bp1Q\>i\J$EW4O[\"a&:*e4OnooWqqNeEaC53u3eF..\=Q;.a4*kq0Wcf38tOj_K#;UPberOkOU])$?B%7W%/JIh(=j=_8#+pc@1am_<#\;Jdt'5E%f;[MhfNo&mau8(6APrF`Zl2@/Z9\!W"j+2*'^0M[!L2":>75L3u6`6Z/GIUpc2][]u1%qr0bUi7@>GJ@Y7DXU"G8]Cg6Chcn"8RnLM$=U=7R*0!fmo#&i,UK:(tXO>b89ftRZBH"MQm#X&IlhR+]$oGD2'DGkHR6YZY3=eMf%IkFLYgJ?q?:L<MI^f7XUY9n/CI>dL(DZf`(.JBs"EU2!n;`S(-VN:,X)Ro]no8__C%o7F%GfKa=0V5t,>H/[NMcg]HrpARh#%#&'%ompcBTR5_mqsV;!&+8Q*UI7<:d>^A?(n8$bs,]"orhFsDqB.T&B.qj5nE8O;eOgqGh"(H.Q\QgPqp/S#9kBg!\!0:_M1=Bd`S\lk%n%V%A[eSeZpL_0hq#9X3iua5p55FfBfrn1Xb^P!6E^!u/rcpBup!rBuf;J)`3qDp\=\#&)T695ZW=RJgI,u3T-$7u#cQ9->>N"/)%'B.$3]+8g$3VC_U4%E%oIIeAXVsU%kNekpN1]9$"rT_LdRQ=<ljL-\CZ!0^n51o_oa9NO()792;OjiLk&&>=gH#NT8H\6*Cc&XTf%LaDkiqiV/q#MG@8Z$`XEniq?;gWS2eUAj13@R7O%pK8N`]midO[O2RDS_M0YZ11NNfU#*Wq<3G-kgT##6&S0mqTiUCMXJ^KDh#G'%qghZjp0b;BF`!&jn`Pf`l2%;j\'J@[nDe.rW;PUm3ZZ/:pE+j/iV'*P5G"t8j7h?rDh#@1Nu@Q=mH?/br4JPFI/gCn)b8`Smrm"O%F"\U78>55&=]O;R4"#Jg6f*M%f,SpJE,STQ;'VNj-]8-0DM%9bpY;@m^2k5&gt$_;\]8hJ?R[kL=M\=#hoa'ed^Q]!ODNoXMBLq"%*.:mPi`Vf/NP9bk?1aao2IE$R_n+a>q<;'%k+0[LB`9K^HLo6m>.WCbDA4YI:SV(f\*'*WONYcgg:Fd-?_'P$c>e3rqOR6F;nG,-%$iB;@j-039h_20hLP5gg?@:ssrUK@bs5Cqh5+u,$(J`l`gn)*(,esJ'CHaR1LRf>-,!P#GLLd^hkjt@kaH/j^%HkY!os)HaZJ;ep%hZ*N7RE(Z'[pa<<rkfBkCn!(rIJO9CFlOnEQE7tGI=;7J1B%Un@=Ig^L$ARo'@<LU^H/OjrQEA3X>/`_X)?O]?`m3(G?<'P4r$mi%l1,o>\_g/0F4HnpR-<[flAhM9on'f&kK#[[]`7oL2d`\UZq_Y=oW7lemKZhI:Asr$HeE:di@^_sk%ni1p($<\+q0)g.3IlQaS,=q%A&G+[b;2l(3V-B5`_N_*O7r%Yi3i%ZNDfnHriaB-Im$j4l`p:nO4F7`4BBg?j%Si"o-%mAa)ih[rCgP1p?2Y*i^]X?E'cP7V:SMj%p1a;P%/9)ZT.\uq)2$#f,6#bTj$tbp+G0Fs]4_asA`#QOepEQ><G+k#.<:0q(#j:P$Gg'J8e^,$pKESSN)u!b1uQDfs6;Ol2RX)i%C<J_%G3l;NV6`";A+nocB0T8[$Y#OE6n)o1X1O%n7Rm4J[^knh-dPM6jBC=8SbdhI3Y849V^Kt5f(^)j'[,XYa%eDuS(('m?MVSU%\>:7S8U]6uMp(#4WFa5!4jqV%hgTQ3UGcHXhp43d06T/7C,aIds8(uT(Y;tUro<OTbu5Q'Dk&h3e_9?8*^7@2imFMC+8qg5(S3j9%^&.$HX3Iu?B?pI[IJ%?3(EP_arp\;^Q"Q,ljj!s(aWO!b*[@.dH8j7/q$Xshb>5:Rs8Aki0)TU)IC?0=J+WJrru=&lk?h;ZZJTbM%deN8N3TVmlE9,Z:Q`'$I^rJ!pOaA/i\R[@35<RgKr/pAiU3VmfPqP>sEj)_/eW+Gch7G2XrKU0>S3HPlpP=1mjN,_=p+,e%#Q/m>%qsa@-<B&Mr[*,uD%it+ZEj'-mLuNWU4m].0OBQXKmGVr,\fMsn:g`%J(t_ob83aM'ZA\@Y7Zi/bfA)eS=(gZ"muRI''fYLd3kMf'%%-[@oh%T_2WUULKKJ&M(fcjJJ2X;/12;kP.m&MFaSD:KHnoFbkPF1+njEUIXK7$^EBk(P`eK:=\'Q0o=cA3P3q,L,CGLGi1n#fTq%.,k0Iqj?c73#!?D5(!3L3))4&j"N4Upuc"3]Vcb'9*u]1s(d]_meE&?T<Q`&S[J7KcDT-GN3Btoi6gXnDO3R+S,D7<#ELOpIeYM%%[3+d(^[@H?^O@=WpsuWTam6u$l3s<J:+AKMU$'::gL-R:SPc]ma\^(J00&k,A6"B_6rns'prW9&!]P,hj4sj;0.l%/5RW(RX-0qd%s2g;%O"t[8]?]>)A`CRj%n&-unlO>GgeJ)Udl*50iV2<BU@ubQOo1!TY@1=YC&bd;dkUc2qbM*Wmd!(=YV8;M8q4Reo\5@0gD<VN%j-MB(r;)-t$*SNIH$'(&!ekN7S`oe%L+Be*[n^8rklMc-34e]GcQA_Vn@8oCIldVUNQ*PG>W>lU?D;i=n'<HRjhg>1hd1)Jq"4/N%on2]TDZB:hqc>uYkC_T]l(SYg?9Zd`qf5b_<pMDWm!J2LH(6d]5'#[*&G?n%p_Y#Pn^fSGJ[,0B?P'^-5Sk-k?f@;8Yf[06a$6m!%nVbk<[/u:p[i7QA+mf!O\+p[I%fcM(ffP+KN5,Dh`R!kN:OsIE_k("=XsY$ql=jk/*;T0GVe8t5\[447dJO7BajZ6E*1aBU&f\3C%SbKQ\9tU>B8Z^Xt'X9245F4$o-Hhik9UBt7`q56&k*^Dlgc4$BSk`ampPbPENL>)[O9qnh+5PW<M9'TD1HA-jM,<bIKUEf,aFjW8%hC?b1j<9+K2NGLgR)rcg9FgFAs&VK5lc&5b$8X\9ONGMiPA_=NEYrGJRblpAAodGR5pcm'Ge5Yn_ZZB(YgpL0X;rG)Uc\>-(hRfU%+Hs?Wn#`/L#7N@j$Fa.J1HA-jab"U&%?Bn,'4`kB<UCT7EgRu5K/iW)I?;Pb$LsuIPJ[Nkr(@qi@$&JCN@fpR*%&bfi&(.GJkT3Y%CnEDF_ZZC/L>2&8Aoa7]PDR<9'P;BQ+Hs8Cl+2$;?Nf$+V:aOVR2dQpj=S5cSfEotD`rGqfV$X$$Sn-*g[#_gEgRu5I3nG'!^,='%aCMJnS+SJ!_ZZD*]5X6l#+7#]b<<^9%MNBYW$h$QlLHi!-@^pc?:-`;_u/7sNddrKChAKOO9g`[7<n(bh<DlPm;o[dr:"nlMuN5a%T=W]<M,Y/ZEbMJp)*U\X\p*n9r:JScB]E1H4,?KH3:C06g"cpHO.@'$!WB]S<0$"jcb@ifpf0*jHd.h&YH$=Rhoa&t_D#okjr=o`%+9-=Us)?6.49WaJ\bt]K$)9.l*0nPtDk@sI1jg0T,nE4&"V:OW-i)9jbKIY,PG<YWSNI%=Puoea^:cqsg_4d`dA-;T7"C*q-\e2?%2#(j';gj#[%'1GHg'@WQT`'2-RQ\KFF6;4=^:Q:!%OTAS+)Wt/jjq^6/\b"eTt#a0V_=RNpW82's*47boh1o^%"A^HV%O<DP)(;W%SLN]sp$gZ.8p_LI&(@7VNMshV?^C.q\U<Y"Nun7EiTe<VNsN#J]%Ki+h&\TQ%$*WdqnDnkmtEstHR!gl^IH5*;rXFaJ,P=frV`5*%hVYki]_urmG/sU\?eoAfWb\YXs.7i7*X6@GQM/GpeDb2B$djF:WIDN.GDuOnlU5UaVmqi^LPL=t<S_l6*q=Hn\bYn_8(D.\S#3uq%O!"=Hr:fSCe"pjCT9f5pBQKl\s3[BS[;5$AGV#WCk1._uk4CopjjgQS?FF2\CHpX]qU<@(Mu5ia8[&+#CV>S.DHo5Br3Nh=nr;,e%I=:@hYE)`XW.'!cAN!n%4pf:!01fu)2pM5A>lC!<EKn>J:K#u[8Vu1]\pmW5]1IjKGk,lQgq-.7P7eRV-H-uf-1:e^[aA+pcHNm:%T04/7R2\YW2WTW`Y?q6g#NFS2O8aD%D!0Z)+2-=2S,A=]s5;eFDH^+"?&\0;#^#8/`j,-u[_KEOrO(tK>WBI.o5*INh)"5#]XmV-%_5kW&TA=kahp&KXDLT9?rT]*]Z^\;A5MeNRqIK$&(YW5W_hWQIp%.U+ff[mcJ+Gnl?e72rIIlYeS)<(Lp$0q_B:J>!FGIKIs4f>5%Oah3I4mc0&S%_;&Pu>c>D#V+VqU7D'gOAt(rU<m@rj-=`k1?)HIPI<&n[\*ICiX.ZF>7BKGGFA_47jcs97Q@oa<,ohA&rT`h/&\Y%rmAEWS&aq[5(!##7h8q^HhPM/7q^.c5C`4id>RJ^4ad2(jk6u3-cKtp3WK$Q_S]0A5Buaka"JP)A*D9[X&g?*ro;=+r7&!Pci3+a%e&Mu[Dk=N=lnP$^5J2=4pt6a9FQLRCrnW%3r9i>4g)]0?11J"Dk3B9SCJS8bpA!1uHV_D'IIH-QHd?$3C"PX5Ie`3SKCmq?Yijn.%J,S_BqZHTkT];WYm18lu3Rldg*V['QmN<0jcu+jc1AcRb*<%0VK`ARRpjX@`nE2sIqsD'5pNBoda(I%XG@>ahb.VEuT0@Skc+Vpr%>%_s8EUB[)([bmZG97U0F.W2Ej1`HK:S3(<s,FsA)\696^D@s)I/M$k7h7Q)s*#,b.Xs[3nlC]Ohn+77^N]R%Ds#-EgHR&lj7g<F%4.@g3UN`4&Y=h(+&(15Im'u0lZDAXJ$l)"&P$HkVH1(`<fp]2]WXG;oF3:U6?Q+E#6*j9nbQ)Kn%lCNhA4,!c=PddT+u0pc8W8@6%1LmDK]_Prf;!Yc,[*"SH/'"$-eLg*HA^&1ER#@5:NbrmS1?bbjRtS3&M2[-*4C]`64CIf)BO,[nrhSF$W@^->k^6d^\&K:A(]qD<%[RqK#G<At'Ztk*>YlmSag"+%\AKH8]GO8E^`\SN"$2gSLRG(;<,q$a#.4$_2g3hAmAuh.gMpR1s1O[qmj\i(oYZ4"opD(p5lLf!_%>oRmJce&j:CHp>\V;lD0^eF&rnN,k<ilTiMVo\3=;t473$g<SO6#0lHA@2ca3dWW!Kj4sDBO]5FeS9_a`5\U+&ktoU`b_W<A]o1s%@bkWQC>)J:n_5(DBe*b1Q#nC\m3$\hFTW<hj&YkV^*@FLY`JoFffJJiA'e7HPRF2lOYIMZ@4^.q@X-Xr/PPa%abBt7jjUXT_3,14%5-7c:d,Iu91_hB6<[Quf(_]u5k[b2N<4DSH*,UnV;i.]f.eHtn[aH88ADbDaF?XQjB.'YPf("s$OkP20ospH,`:cssWt1Y8FD&5P%AJKTTrG"RuZEhS_@4MLtE(0r+n#nU/p0^ZjE`K?r'_[_AG4WQTZ\_:BhtEO6d4rfad=T&!=DYX>GAp*0TknLTW$]F2g<f,Cj8H/;%'=JmHK)%gpnVec`.Z_j8(mMec2GclV4;jF&^j2XfmT>X["%I2fL24,d5M6lp>?tsjHcKqCIunU#:j'7%dX)ji#_:\j>c:u[[*;!H%bSY8@9qBTc)pp_"QTd+XCD5BGdjdgc/oN9*)gCg`F4Og\gP&)=o^0Z.Mpm]%-Z+2a<fpX@`Csds-Hi?!)`58LI%N2@n$\dE'k-7Y%O,T@&r36A@#>Fof(YLT-g"%kPUb0U-=A17QgUEs'=doEqUN8b$eYL8g2-JRS2Ppi]\(3('[2G1-W&D63)<Kk]FTq(Erq;i&n$e-K%>^u'_p/U]T<Pj3l9dDD[C\6U)\%m0omH5>WJF3[m4.tu%7`:dL2)-5C[(8R40fCIsAO$#rK_`$"Jk`g$M,uPcLFRYsVG%C11</SH%WLe6`L.3,90-pl<_K=ZoEqHa([Lo2fG/3<Yk[A)jakB]'_4#lWf'#?`F3/.B$clK)N6t^UZ3_9%pT0H6XO\YlED=4+[qk.p=k,?5%=fJ()BY#'K.5AfLm89%uQOC:TjKTm-i0m2Y;.hi8b70(^_sAPgPVk-1VS]budE$r#4'A`'Wh=.mPHAE3k\V_O0s!PVNR>]lNpL/u%#h$WaCXe]//(,S2gn@$AWNa7jP-_2kFuAU/'?ZMkp12pdRH=+ZQW[J1U?J'i.bcR)aK*0n$?&A%KOU[u4ltal6a$iC%TX@AMTfm9%Sn7!lBkL8R;sb:IF>h[)'<;k-Q;![hCJ\YBlW+.8gB@a3B(fa8^"<(hRm:dpLG@hKd$JMuOG.:@@AUiKDmQItG$&l;fH:>%'MOGG%7DlcL%AL8d'RdtFA2%GhBlEikc;@]XB5P<SdYapLjr&IopH3]:Hq5ge)Hr'@XHs^l#oU3e]'ZE>>f&t!h1iHc7j@F4Q5Iu*jiN1H%8uc-#O\/f;`El5H^gtDhV:3TV,Z^.QAS\PBUr6B7:/q&QAPY6g8[aHC>rsdqA48+>)g'!%nk2IWPPX\q:1d4b*U!:PX3EJ:p]K[5%\.-d<$l'q=(3:+;m9'Uhc0>Ij8hK8'2o>$i,H6aOR,A0d^E=:%,/NW8e\FJf1qF'K:X8@.m6hltFGJ6j,ZGWPCkJeJGY`D%k=TPW%3Ij"sKJFh]*F'/pU08<e)<<.*QmsQ!+;9n4JuRCZU!B9H4P'%E[2,7-@hML`:;OE'S:*Z4<O[`3h%5s)qr:ZC>+^b+bdMdUqEh9%%V(['$juA0ch%_X,!Wm+59KB'h-i).Df8e4:<?k!Ihq1=t'*7?$K__"*0On9mf*%n@M7RuK60*d2+i8fXVpUINYU4[s*K:p.Fq[Wm%c6'u%_s</Z;$F1sS-GU/8VBguU>AD*(Smrj^QjD7US)8-\7+5?4]1I3V4in&A1D8:d`u_X7Fd-ObB$?PjMD!G<56m];A"?aVP_Sp%[P@&m.4G414c7IWEHW]m%R%9eSkOOODch-,Ur0?Ljh];sU-RE$4>rcE79-->Z+QQ@<qW0/X)^TuY9PLR%BG?-UlDNH=mDkaqOm[0%b?,"uNgEmj`lSQgg$h_iH<9r@f:\R<j=r$`X,q#?+YfYn?ep7[gMQ%]EUtOcR<GCB/<lK<P3rH#@]g<G$2POE)`>iB*K1h\Af*(b%o'uq;7Y$uVTTaXPJ[$t)mBforMbu@I^rj4*aj#`Mk?Q:p&PX$A`f+(d)JX"O8m5+%g>o7;UFgGYUFhd.oJHoH:*qSsOZoWhTr2@e%O8D,!mEd+om9,&Q$FOo+DH*15m"@iPauK3U2deVVq5Co86Dn,AA;6ZoX6u!uSOZd@)E!b))2WM_d\\-W`lP=#UZTD.r8tqb!;9j,%4NSj@-8X4/.PnPJ\ePks98Ule_imef8P(LeHr=ia1"&8oj[.&,Ml!JS_HjFndQt/+1q%.O&W@--_LP!RSP(dHO+W#r&S]A"f:]Pg%]hFbJZGtADY2*Cjd0lS5,EIQO0<J]dVZ-:B`_%Qd[-2QBWQE9k^?piW8#@;#[,[-oM7LLNlsMA!M;d$laDI:n`=A8/=^fj^5M2W2%UF7%@NLI$@;4#$+MUu_0>SY-I:A1k>&@QYrU5%T\"Vl7kNEMO`OHl5UPp.o?-u>[<M64A9E#DVXK]H8kP'($r,VbG$4`"iKA4sDl%Na$q[qB0\i"VM[h2%J(q8nbiY*#TlUIc^m?Lcn2GjbV<X<Sj=o63_RKQE6AuCP'4Sp7*a$QA$ZW?=]a0;C@t;AQ9u=Qa#P@XF>'0%Y0L2)ZYJ$"$_N($<<KuU1(1H&k!W7rr`E.?[LB@j6./0^5uH1;YtC/!$7reUT8b9iAqD5R4e*7eQG^:&O:Q0TJu18>%94jPg.!DP%X0"giRg\N6!Aqi!hN?rfhk3!<DDoU5BNZR=/W$UD%5i#+)q;C$,@.$PZ'($b6Uib&DQ74W1:cdGA7ui!C7teB7P5Z9jVM9*TrnmL%:r=4Q%9b"5K!l@^5+P8K2CtlnLJI[k?4$3!n5r$OF20I`)g.[0"WdoP=QWC;\]Yp*/[jbPbS;KH&MaL<gT;Rr4&'R8r+)Q5ok?B@%^!<irg`p"T1efQb5m\4HMBfi@8UP$j;sE1Wg-O-*@;amjj3)fZf,"6+7%*a34:WTd.A9>@h)UkUP-?`4MqU(&Y^B![_8=7rGd_A;%an(1j`ZU!Wc\Gtg2;#IC#(oWc-OUI6L3<)8II@Z+(0(VupaE!]'6NP!##s,d-&U,=Z)NOTEI_TLF4+)D]e_&2-KB`m0;!f4,8'O=%3Wuk1fW&d<fi0<iEJTgm1/5cefhBjQ4P?WVBMmAip?B;!6RUp@Sa-.8!a-LrjPi8\KDW6pL_#4eMS)rU#3=n6*$mb@dZP&QAQ*'U%;V-Q*N5R(FiW/1uO:@hm0lIM<8d=.tn6;(gY@1/a:Q1.P4#Bg,8aL"#_Xoa3g`iN@@&&L#.V&KgG2.5WR\6IsE1W>=)mM@`]4^$u%h89427Vga4BQqi5(qn`gXM^5u>D'R?LEKsSS^=rHorR85C4m$jXL8mEhD53D=9rP'd*P2-ac9]IfoLf2[[kq%\MB8pMeS+qrs-cP%mp"Y?d(j7eLAAnX1p@I9`aT]n65;kMa.Y$k@qciQjaIk1+ADD_5PaXKdm:V2k"h/&6nHT:?-Ng'gT0s9I/]MS&qt_OG1a%M#ph$9%AAWC?Ju'ZEiirN@LLd0Xo!Vf)U:)L,7Ma?^3jE-07>D@LeOd2]39[*u#?*Od"J1[_TEn&C_$hVNo99F2oom`]H\[7(ZQu29)H20/%0\ZW'QefNBNJpJ0b`G$98D,@8DeilTJFkcU(rN5?L=L$L)KI=53SMp&FE\$b>DCXnN+jKD[:)e3Oi7rc9F0I:eWqfP^*K7H3(4dQ%Cs4";7@a*t.KYVrKge?crFHYKpcV%0$!uXO@!jJ)#1I0e`D7)hEI_=u,DHUsQF,=^>(Fu%ZWX`E1WlEtPK!73g=_[LG0#?PK;h]r%]P0DNk$k]G>ItNDQ^7SX_k,!(o4\HIKVJ0`&&/BsO1Hjb2b%PG(bK8B#L!]0AOLC6o'LTMOQ1$4o,@>;pNjW+GZUILe@A6o!:G+\%Eb(bb[[bPR8E>KS)B-:*.9W#U@YRJfJJd#tJj%mbn/D"SD.p'*+p+`)%;QZNU6t=CfL_q%!L*K4G$UP$fgm5';%?:n8h<u51W3U"%#5Fu0'-F:CLFf>qPK<j\YUDCVm/0bH:a_LE>'=NAj=Y1L2HB)b@R_Y0V1DLHLoW#@M<%ZjJKSGOa3o'-9H)Klgo>>uP&lWrei7Kr%fc\ZB=^6'bqLK_d4/i*+Zd!?a$!?mPXD8%Gd:2g/)dok--_Hh3]2eC4$u"uAhE&g-N%E"8ppr9HN=JD1+_Wim(+P(Mn:7IgD9#g<%#ccqt;bh.MSj/'1HB9L+dg7&ge0b\'5c?57X*t:HNZi@Nj2>?j'-4;CH"*P+*#'Vsk)1%^F^Q-uBT,=?VDt@h7Rh!d;*i#6U8gSk%gQ_KW&7G-(@a3&'&CPVAN%bWfgGR\5U:<j($RSTc$[W!bB%P:(?3TjgY_6SiWUSEk`XMP,>1I$=`)&EE^XqD\F[A(o-12k#o(MqP%^4+#gObuuZS9Xg"B@pKYal'qOBJN^!@"tFC,P9h<kDj_3$&k^BKs,_SnU&Z9;p(;Y"$mj&6'%Qm`1WF%ObZd2j3!"6*)2L[A<!o9%b^IPNf;WX]*7qe+R_9.bZgD2^Vi_$[AC/WCLRYqr60O#_%tof1%<H>?dU4M$BIF&;-8DRX%g+6W[=KVOd/]m81rh^SNkV(8:?DZ4%:ZhFukl*F$":],rV<AQjB[.r]q9ci`NHE4^$C\;clZc[$R<7!*O61:"C/GXp*6fq8[Aps97rpH)'[]_;BHH+H.2"#F8+Qa"NogEN%b@+rUp4,%2^eQF_JYH>V%F9=L5[#q.9*AZJ[9Q$p7RG+aL3[QW^"K"7a>B;&V?@ph"/8T.EiN/HTlJ[O]:2jh,XsiSkZ"BGM9WN^%?c>Q[WXo@<+p_9"Yi&(B+u3ij@DJr\,HA[7%p3Kb:7Mdr3`=L](=h=fBjFl@MEZY+VM=65,IrB98*bsU3PprPV_+_ZKD8*K6;mpJ%V)!6T#IL9&ZHuQ90X+h?pB3kp=Z`CX:t-!/Bki/&RMo!\I-f'BW(MbuNN]iCl:MaNNF$j<BOl:NdC?.!`cqic$<7qdT`8\]aGe4u%TbBGnHfB&MV^QtVc6j'Y+lkqQe4"=ZoLmBtg(D^5;6<09NlG2;Xo_O<^CUQ/)Hk8+:2"R/!i#@ibDV"o[W`F&&`+4=@4a;VQc+6t%6Si_l@$AGERRr&uDB>7'*LOINS\;f!-aVfMn"H.kLf'^768QH9<^S[ljH^fQ1U1)"OFrpRAgY86R[M#jBI6t*Ciu@5=XE"(LM"D-%*URTT-N"u5M0P009EZN?L1Xm!Wh+umBI8<E]tQ(lR1qujiRdE5_HAX.A47$RUaQ@!;$mr*M.YE428s0*-`T;\K/:p2i`*\Ti(T"[%=:*9k8_mE3@.\VF&'i+=fpEgdOVh!HHjJ"c!e@=,6<4+#m8Y$t6s.^<*h55XAU;^pL:0`o-GJh(&gI&<L8_'T&tOm>HrbTKKP0;J%7M#AZ4Hk@WJdPfocU8T3iL/oD;3p$$/efY;&tTDU=q/d\L#uNqL$Xi-n4\XGS&5*XVOp>4n4`%]8ImcnSf,YA/*@KNcQ'/44EEc7%GUB9a<)MU#4;3*]4Znr'@#u%PKP0;O\Jh'-3]A+t1H@F%33Sj]C#!hPSdFTIH?^e3a(fiG3/&gQTM(fSqT6=(B4?!uSHj1eL6Lo`%&tXqS=Io.U__]+P<l6_M^9"7o&tXq3j.+=h&'kAA(I&GV,ZQ"D%O40p!?8m3B;hb.BJJ[qGU@:Z[I?l^E]#rmUG9)_r$C$8!#ZRG%GHoPhC(N0gHtGuDnX5oF&lc\g_F@h\A.[>(-k]3p0D`M>,*RVUDK'tM`j?YV8S;sI^E0"=HLsgW-B91KnX8#YVLMh11I8Q/FH[_D%R9bm">b?t-bk=-h/ql60QhWD-)kZIg#X'JVL2'=qL:apN^+:_43K;7LKkH-68Aa#*8np_qbA+_U-fI$DU@X7-c,eKClGaIkA4DBI%*j-bL1h.W'\TbGi->>5>kK)=p$+lWICeT.IX^h;Mrgocim[AUE;TIII+;6o\!')8])n$*GSn4_7)cED/eUklE@BMXgW?`^R9`(h/%W8@T8R&X18a[h-!^\6#ic:FL74X5)7HU]L?3,H-r1/`2Vg1*T%r-dp^ko$J]`=&HoQ_mt]+bM4',<WM,VTG$aci'bsN78h)s(0DF%c&!ErVh]rTS2L(a8k9sNF@\rncnQ\dL.XdI#+'EE<?V[J)/d/:YnDBRbQT`6M*X^(D4"t$BM()*3((51@.\W]:78#_2Cqs)1R3XC%9HH"s&a?QS%@*.6P`V?maCR$;,c&_ISrc",@m]I2p4QCm`I#l&A9!8$9U6Ae88Y:A_:0,rF6s!#e*cLB1#%GZBB"nHRQLaadnq;b%QCT0D'anWECcZ"=!tk0ae9-Lh&E`j*7WGYhWlYo;,B\`u(-oTQNG<'t@trC^=4On$4oq!lE+53cR;#8[Y`cmQ;/"YWGdS\>'hlqU%;&L\BXC8s1/4c?]p19,$_!(.k]>OP4lj/T_Q\8>BDlZA$Sra:[?[F.\+Z1K<=rEhUUgaS`,\Mq)OIG,0f/R528Bl+)G7MY3ljW3k%mXY"ae=jjQO?.c98k9s`fb77<(cIiVKN*oaFL.klUgeeCl4t"ERjf1c9KqPE%k.pS/=4\#DRXNlX4sp-Uh1IO`&-':;(4n"UIHOQ%("?_.PCuo^R2c?aK[ba6heu+X*=0,%UoopV62&Ye1?XG%1Zt)+EZDXImL3+cYf!E83'r^+3Y[m[$2#"6:%98.T'!OtcEE>XC<^C8%G_79XHkLSPC+RRW'Iu:.H1"8+:%Kp)/8!T$=V37Dj=:qT7rQ<>Uf#p4GA4sPpnR%8#$S48e%]H=,/##/J(4#F,qN\cXVWMd":][q%#g+='7WuK9[cO1]MV-]6S),;66!e_<H_ZbQWkq^[b_E2"'hS+6%3W]bN7UX[?'2'e9MDImarh.6Y,n((/"L_DWa3TR2*+&@/CmC/%:4nY.<auo#-]Nl7"60jAYU9BL'O(<UJUV(J?j=K2S0TTj8?cKS%&P3]?f&4_*<R1NBHl+Zp8+M7Z;Q!D7Ub-@!>BZ=Z\X-RQ0=oM%4tB),jOr*lh>Y71$J;b?!A,91fJ*4dC\\;SpBf$Z<Rhj1S@Kc,Uati6/Mp-1MLBdY7#+o&UD.ZWDc`R<[JO7*`Rm':n_5b_WGQ!h%g#t>m8Ou?-@9m(S;5fUSN2ACqluqq?UZ&WIW^i,[,S-l:,3.'p8JI""fmtki;eOhC1`N22M0TIZ)CO[6:Y2C4P!]C'Oo)UFK*uHq%</6`Kmu21B06*PL*ea"NC[/@NXIU+f+RNcb"sTA$6s9UsqjsK&"fi9Z7$/0ipPc;EcHOR`n7ep@FJ@36;0-^KW;@,6#]hSs@?]qW%_Q>?-J'"&%`6kVeQ7$R2lFVHWfi#9(YsE^S:sZri/.Zb54tUC#$9cCdV9Wj-!qEcs<908/$Cs#!VAXpO8PJ'86WDfIm`J#:W9Vp3%PRMUkW%XErM=YD4Joch#fT6lbifa-[qmT/N`ju'MG*_emnGtpRC]9'P/4M<LW=n,gKU*bfK*ZXO`XY8OIXa<">O*njs&9<T?#&d+%eB3WP]8TL_/.2%NpSeI-\QV`8ib4)nX99.[l\D%IQ#-@:%b5.aKMc!SaQLue6BTfM>7Bd3F*(6^fRmoJLd=@Id%MNO&1B6;6$-@>%Kr.bXED9Us/Cl6nWhur]'KsmrU`4(>"]j]!N:&uX\M6:GG2_[O/XTNqb-Ib'PnjelQKF&)?aWh]q2@#4keMAdG*P*k>UR]c;nf`(%3^_E4i)%3>CGd#N8dVMq3[4[+c63&0lA*GO%]g\:K5.&q3s+\-m>H'_BN^?&b%)A87pZ3h5u[SY?3&5-pA$T<*LmelCtaD"Nm\pp%(oYrTQp!Ij)a\`N<-h5e@V+#^.NFpVdDnqa7OD4lo\epCbU&6,UbegZgsf`"Sj^d=R.t>KAVb.C0oF05YYTRL<!FTk>'X=3]Ff?A%ICa*hSE@BplEV``@]+4dfi<U]#-2[3S-2bbf,968BiHprYT3q#nH,"mW6)Jn3=6=+_rM+*9pMA[_prlrMoeTh4So>62'HBGP@U7g%3D>A6gUdLrs*To9H#\g&Jkhil4b_$ggMgE:(fZQ%BBebC4PBFJi5fRW5#oFp!X@Z[<EH._,SE"&N[CDD8/@._d:SK"FuZO5R3,aP%3cGcBW_X`iAmMC^UY+kIW&So<-JI<pDj+R-^Se;U_W5QB+gWP3d'.N1U"2):D@A5D3NUTS]QD6$UT@n<GK2M;JPr$)JB?!Rpc*c/%E,IO_L:r$N7:N:8P5!TqE3H#.,DQ$J6\/\)ARuY\+N$,(':$%bM%Y"R*JK\VCiLdYUP\R-_Wi7qFoRuH[hl.CqP)i\R=1VW<6Oml%7bTtJI.QJr)m9cT+OiHE+IbfudQr@!B\r#%I0+V)?t#tbdi"P7U^nk5/"(Z^)hTgN.ma`<W(fMr;j=$Z`POO7ahZotOMPXp^_1FY%'Of"\oo8%+ZYK1W'g_n$I$Wdq9[F:.U`r_D_4/7Mq2tRhV9[51JUDYdQ<6c#]+Z*-F9qIiH8sj`$:chT5tXiY9bJATb[F2.]EYJ)%Oi2=^g,^o.Rpbfq8]f5LKTV?Z`*uFd/9+)`HmO^/78et^rS'0`'JZ6Ai)hR&[/baj_gp.hYiM$*J(!ta?P_6"0Pdef\-a%g]%!I2%YK>4_HV2[%;,3G/'o]frgD_qjTZ<`rJj/9n7UO/JH/=e*3BVV>.%8:Qo;c8l8/=$`NG;(RN_MXL8P^F+&d5/1^)2]ZiMlHY.>>Jp%p0+-b!!V/GK+]L)FH1s^6A,B_25kYPWn%1!3/T.M%qnm,2;j]cq67If_7n&hPBNJ\FsT/5!d/rA1W*#NT&qf9f[dR6k(44Q#hI7I%WU++39V/?b2!XIjc&D7XH3?'W:Dq[!4?DLdp=$S2*(rQMWiM^`4\u@qJe\HKPQh.^6bOb<A-FcPVDt5JV'8<V;Z'T00s5TQm>XbW%/KOPg9BqTX_J0qIEKG:W4%BNJ)UQnm)%%`1ND6/?#UkSYCBd@d,#G9:TU&8:)X6"U"$$J-gI=42ABlj/:MOf)'Uj8`liF8h97sRn%'#WF*4?j^aL0RZNSJa=^dXWO1^+Jp))2cD.'J/lI2D:(*A6Yo#`-urn$pGRi)]j_]OlN4Qn!k.%//RDBl;e,C:/4u[X]/GXU3'>1%40^kp%,3-Nn0/)&bNb;%V]SQaBh2-n^5S4JRbOWdCoX@,DEa@;om18'c5Jo+4BR?.CMg:LVtTAu0Z!D@cJ6B"7/Bq-ME6Ip,E,6$%T$V9U5H#?0,>i9mRT?M%M.2@Vgl?h%5Jo#W?1]'8c$hrdU=h%dDo5;5e*<.2=$[u73DWCML9?56J0qJ11<p`-gR_DTI?h9qq$JC*%Q(lj`dg'=3k`oQYG6a-oWu^p\/"Mp'Ja\Gil[bn.5o4?I!N)P@Xqq0a.Pp(SbB3X^jFo110cC-m;k<B.QA!t`Fd.l57X'3@W\Y$q%lQD.+s&ub4><bpt_J727j@k1`7b=1\Jj'oKKJZ.nOoWT]8V:>/#T9"m=IKq&UteKL4oF>HhGuA!=da)nmo)1L+TiJT5iKP$1lhY@%P!g%X1GrT5MRfWp!Gs[\k"iFBc#m&/ekmuRer!4#I*%K[?:0o*B9f\>'FSjc2%16b.kNg(X*(5lHOW;bA3kf6*2X@I:9^TIMn(tE%[r\0_#kgYLcZ!I[r0"`)Qtg!-]@MM@,Gl5uA]:*YF#8oe'Y7NsQ6BY$0RCA'qE<l&Wl2j4o:kbB'S\0Z#mq'BJi]&XJ=-44(buu>%Af*O=o];+uB2F(LQ^6Znl-g:2N0BRk<9Rl>Y_s\=KOC+A.E4\h\]:C>OiTAED"3'%V+;ib-!F/H(b%R"2/4\4AD72D4iiVH[6Z=W%l9SYXHR.q4.-tN+BSWH4D(emPI2g_Knk(;cR(0;O=?Mu,(G4gJC;GRWi<VB9^+0T!RoCE["CO7M21SRtFTH?L]n[g'r^>h;;9o>E%Pb=V+c:Su74D[)IrefNkL91e+a-mQLi@RCi@9<?%'g7nAd1>J<<K!1lklrGH`FO$_<V,1kUc2CP,dPTe!@IQ^BK^\dWQhq*T&F-(%8s<i5iX3K,dHRnK@S%9)[AkXq+9@\T,=NfoEB%EV)#&iDd?b9R;lr7PFN[^A`eh97kTt"$'T(%-/L)ugAGZc*i?7,mhoHH$0TMmI%Zb^jP[o!V;p6;gO,eZ`NEP,0mBIn?S+$+7)V`!XN$Rug^F<M!f!G7M+!@WSdW'n+GkukD>I_u"Chod-U>VjBo-dF.JRAdQmI\YZ5%_',oa#,hmf_Ftq[WqR%<H$_p5rqT@L#]iu&e^tVEJ]b1hi"K*0J4d=\<u^'/N)%:U=D`T.<&?M8Wt"R,Z78)<%ET-KEl-#!!h1s[%Xu7E_K/:Ur[/mk(R;36\Ft:P)25&H2Qflh]2/2'.BFQC"AT,33OQ]FU5LUNA`!,gUZdqAC:>bJC"+KZP;kc-GdEsukMYNpte?1pH%/LJD-COi5E,#tuS$J*UnrEX33arDkSZj'.FaeOSU=KO)7"3#fR1k2Y<HA)"(*DOI34m3:[Tb^"Sl3r2RpN2s7L39%qL/+AgYedIu%i6t.?&A$/;:-)A[7;%-YNuGm8FB/UngBBOh$IVUZTX]$%]+MR_dd.5=XtpVtX7_<L"tBiC7gf?[h@LF*+8-W@2*H_Zm5"^Ee\WB&%^-ED[Q'OjG?q4IjkmISOkR.LHo`]BKl8_H."VQDjM6Z@SCgkbe+H(X"VK0HIK,Gs],cU6.o`Z>ZHH`q`$[pNg]"iG0]/s06->"fC%&uql<`$W]5?(ckh?>I:(2bH\T5CX<fKk`:QFb,K%AlW-PcDl&j/l3mK$62nZ'"M-1MRichO*ZNqFWm6WDg$83^]npiL5NQm(5%@Q%Lq5j`<@d6SFTK04WX"?kJC-o(866VY"iC@oR+jQgKCspa`XM\FG-W('V[SGCAPsA\#+Xi)Mo(#CB7jDc(oT@#LAd"H!1kMfckQT2%<0;S_-k%qVENWJQhSoE?<<gU!cPce`.K_(Xl0cohi-K!I<uKR:iuk],Nlm!c2jFVZQ%?fIX,NW>]"<hHq!#&(PSTLjN!J+-OZoS,%_aJ6)m^Bm(1_J*q1hDd8cj`VrkGq'FKVnl$V+:K)lE!@u!_`IU\Lo)J0MUH,Rf,$qquU^t;e'lnDjMnsa@Jo7YZ0,4--9a1n67*#%S<S:!e@(q!D.3-#?iqpNTp5qt+:DNNGbW\2Hs*R'U&iWaVB8Mf4+.D+25uBWY?%@6#i\Q55r^UI:9<TrMWG?t1d15b@rj>^8P:(m%+q1I7O>Sp1o<7?%0$^>J)W`"ArPK<XbYQ5br>6"b?Q%>h^+^XbisiA+[Fch\8jRK(`?n)4Nl3BhhY)n=Zdc@23_,_DQ3%`[=:`So%#S-BE-%NlVFs>-t4b,u!!?>@5&=D(TN?p%(,5T,I6qO2kbqAa;5S1$5G0p>sS>s!10r!<el3<YQW\>URG.pW%,$tX^&<d])qNI('%-AA0*.$Js7$+>af;__J&VbDp*8Zs!f6]4[IFa&5bRuob!<#.uI##@mEYu$hM!]N.GkBq?&/Q'.tGQRDph)X[Frs;d@gS,d0KgfBQ%#L]l#,TB2T3ip>q+nr#&"HhNZH+^(MP@/oE\K.k8"-?O301Fih#)H>QAUhOLX/Z>NH89Sk@O2s-fQ87f$@S:Y;:qfsQ0\r;k^$!+%Rpgl#T]BZQ@5Bk5U`?b*](b`+EE=E+T#aB&05!Ku&t>9R8+7]rK,..J9^3s6I?Lo6KdV[H/n_khCWc4BQ#T96`8oj6("@"^VWIQd%hr<2$>^A-Ea9;cL.&rBkZ:8@0+l[^1\*Vs$DqUEDo8LOZG8ZC+e`hOQ/lS<Y'[\&G.'OL5M5ck1Q]k&sW3A/HlS=3XDuo;c7b;1l%b7c@6)TCri5^!,fVX\5+.$<3>"7EYY>&I:_4@m5^L?JoB%>0[n\.7n;'B`-q4m/J(.PM42Z$oDcQ$RgP+W!'SeHb7TM^i@Kh[VGY%)YAi+,oCMR8NC]$(&2lJCmsgc,FfMrF=o[.i6"q>KIllDkT!'bibE[tB$MWK3_-g^)l!l@_I>^e@^K-rf%m*]dIm[OluX/K?F;>!%#DO2LU-ab+7Z[(2Z#`]<+eUKdDM0&G6BjW%KpXtI@gWU3;mm0_HUc[&Z-to8FAD:)".c=8BVD9-6]eA.At=8)91B@8S-8LA(SaNn%Ao2cJN"r(_`P)iBVu)&TI@SBg8dU:W_DhhO]qZQ<\,XulY55;q(>e2H?6jU54Zk",&][gb2rR1Xn@X?bcF/-^7jg@$\7e59Lr,%2%iNZFB*iR>0nWjf!d9td]G`*WJ7k1.rR7n.RI[m#':$uoPEJK+SoYP:I(OK9P0U<"a@TFfi]F9RdVlM5BPONdj-L2I3(naB8]Du:t%S;%5IY)K*NY9]<?SR-Y[i]%ZOn0B;A:"NV@CeJLjAU>_+'X7rTR:\]?lgIg,^o#@r8Z;hZ=G801Is\p'NfTa(PNpY&9.I..0JMQA%R9j[$j[@!CcE_KE%o]GK[4+66!Pb.'&,aOH?5A%P['>`#RUuReoJZX<26B&FHH(VHb?'[URnYAJ!#.pIifJDsf.jK\;,N'.7U\OP%p(4=FAi"g(iW+t<d`C)N=rrk9ESEU>C7]WSF`)uh9MVcKUKN)hW2b5JKm4UY#+Vj`&G@0qJ!#m>ERa6ISh,#7#jX)Kc<MGG:aTP9%1.NQh_P?QF]k*82rMbhj*)j99/!!3Hk8_bW80*A3CEje.LRrW8J<XGK_Wm>KceE)iH)b0=8Wmp9DsLrl/tS/lY*=Y(q0\`S*e_5q%TBbVO.Ndutgk[Nu[1j/367eHM#BThO?oI4BC&JEp'S4Qb7/sI$?Q`F[^r.4U.i(TN9C>Z(;/=YMV)7gU+iDO4lj)<a$#*.+rDjbn%f8G=WC)7er&=d,=GV4:ra7Q%]i2@*2UpaqRY1ckU:@U,FFV`V?7%lHa):f$U#MIQ^2HZcDg$n)a`L.3ASCXNOd.=JjCFaf51:$f3%VjiccUg,b;"UFMP<Kt`ahV'$(PJe:K9Z\m\@\#d7aI]qU04A>_bu.X#>LT-MKuZtBS*p8,E\!kCF\DB/G.[nHh83d##-0Zoah?+1%SYUdMZt1!PV)S>_%)qFI](rt^T+%.tQSaKE)m9:9jI,#]Mr(reg5Bj9-VTTbH7S!2Kk\[6PaqB+T@=5^S:oVt;jst^S"W>ISPX_6%-(r\=fSS6p0G8Uie0r;?6a'3[DG@'"O?-PGYAfD&I!L?_M.Y@RWG-dbmp!@H0LfA%=*ob<Qq;goSr-&70<Mu+(Y!+../2dkXgARq%P5GGTI2!;'7W28ediP`hmLLn<"]2$:8kg\,jXQ:%]Fr(2<[HL37,,RTr[P<he0N%7A_mYp9LtC?-Z=>\4leS[*KZ#kGd/"3TYl<$%hMD-m\*:F]g"IG135DV%=BEF,"&NosEa4Tg(I5hYER`.&0o]/"!_7ekK=7>8+ZdQM`tc'tmCTRE8N]2`.@c&)6pOL)BHea*CPfq)%ns(C@7bhElZff>A)(oe1.b4S"gOfi`l89MUW_Hq=kh4Q\m-]Z5p:8Z,,Kc8^JSE\)j@^oc,@Y;M=s``RX6!/<S/[R>B1Wg*47@@P%.uKQ)M,,%kQA>j"(4USkCAP;1M\\'lIEXC,C2nei_8)F@XT6IeY70/Gp"NS^9mU'"4B?bZ99tK/RE]JB6Hi%E.]&4X(56ZW0:,iQ%9O:;#/Cc1:*1kJ#<%?K--d_&f\`f&-RDHsE;cRB#n5):L!Rn"9W*IT9XpW/i^ql1*"&AM\j;nK4hm2qU=XTaH;T+2IJJa4g.t+2V%Pc>m"6M;N7r(VJ9N>PL4/#uAZgi[fUjZ%WqWdQ%&*<'3(S""2Sc/lg5KVkDbK;iSl@83"aqB,lra$&lWP;=Zu$hQ>Dnr&fp@CbW1%L"@iofT6>3@tn_O#ip!gqNR11&)nr/A@iR,#hH\/>1:INde#:Jg$!EeHELi9@-gNFBtuuVMlI!:AE-_YPo.VA$-53YE:hZBXktVA%^bA2k!"reH*kDVuCa6oH91f4],9&C1=utk:0"gFDdQ,l)l%!MZ$b*&<Gf`b+hpuRUl/3bXeoQ]Q[a8.I4:mfKh+skFXFmAtpR8aZ%LI'C&2*kRTAX`,)q*dqTeT@]5/M!7^KD2b(_[2li,0j#Y*Bd4lK+jNtVn("Qe"\8g;oo?C>8E#k25o^F;0^T<*PH]\p4DZXegTjV%p.Pu.U:PBX\Q$EaWGB?);"%I.Qd]c_H;9T*g=QX=*;]q#ONS/UTXBVGc7u#aO6_IuE-C7/`E`/id;4I'h8tjnq<Tr?'BY1P#7d5)%+PFC^Kp;mU:-dJ88J@lIP["_u2(L3MDLe.HV9&a/TL?1834YE=5Y^K_;A9\0]%t$SaYmVgrYn`.Lf0/%f5_WVIp)qIM'#:/p%J$r%B5AIo4.</6U!#4V.>CfR2JIW!*jRr0i0_Q`6(9>bqh4-]D="bfdt?*Vk-!Rlaa#?0^lK0QP'f_ZW-,pS@u\J<6H&ctXl&!XD;UG7%O3QU\X%*41J9L*hk"F3qcI!i41OtlB7"Z"dhXtuVaaagWp(.`m?j!`X0"5e`En(51?,CkK>f/K`BdO-6%8QJ;r3Y]K+B'WsC4sS%%?m\R%]tH-f4kEtg\r*e'KWq+8IS<joFGHi.&YL&lEJ1@?*tI%u!.i:K8k1rL%nALN1b5%fcN-tpc)A%c<V9c.6nan#*0i^T]C)c^%3In(l7lj1Z;rOm\4=&(5`XB7Pg@#S*^nK,l&KD'k!qjQ$NsjFKgQ*t:#,IZ9P*\b2BjAR,m\Gd3Z:7'%.WM^pll>3qf:^=7FaC@X%)l:ate6A2N?Oh^r7f+#,(PrW5_?O`n:rs&m3^Y'Cg!JfW7$pPH#Bcl(69Pa[5Sa<=%&IGk!B8&ceNb1KE[Vs"9N)?3(O`%RmYSXr%XU8$JdAc>nFo5e7edS\n3++FFZsiK0N$oDk&uq$t-@:Ce&S[:1k/.-dbT,U_Vc&XBKmuL1@F8CXa-+@K!igAEA62C)H[j1B/ISUJ%TEn3Ha/V/9`6!=E0rNn>*"N.F:f(PrgT@hH'=b",_lLp^ol>+Y\BN_[9Ztih4Pfq;Q_A[h3F_hUU'COU,=^6M:C-.HEY!KCYY8G>%gd4RfY#4O_:I.*f<K,hN<;[\T&cbjoVs.4,]WX\s08F`Rdt87XS^kt>=E$$:j>pgW9]BbQ-]VNF0kB;AAZUO?AOPbuc:OIh*j@Xr%S\-h53N@>H>o8M2g=U>(AU]5(9Y2/-$jFfcc((IaD"=>,6Q*+*4ADd;ZeEkg$Iu<%qc^PGoj1O)Cr*2X<C`uk>e+5l+PCUr4O/kK%[X&AjMT)B8a(0$!:iq&oSub?Jpo"q>7L965QHr6#iYGgtjhf)O#0[:rO*>X?1H(4ld%U)OZ30pEFD]!'J_S`:jQON<9O#m0g_;Ma%%Jl(fkV)0n#>sj]NPTpf]l)`[S(c%9fuADc."UQ.R<B><*Sjsh\.[40'9iH#4PAJYIJ3_!XmH&OLhJmt9o6ecAllfX-ZF"&%a_Ys%C4!0C\Sc'\`JAGaXc\9*-&89B)-3?)r.C7MCYE%Wp%ADuj:1&tf([?l'&VBP/#^ulIPMEAVJ1@(5rN-uCIUCT2YVT<WPSD.&$jW%%nFp,/QI+'e?4+OLm1Gg#hZb#qebjdFPmA%(!lcU1E`ScRo&N],/)NP+^s)d!8.\-CC0C5VYD%_3f7RVr#[/(P8f#;^hc!9;8=Fut%L.3&J.A8sT)fo\Sb0A>3q4^jeoX8qANi6?#eK(nt`t(GTAm_Sk%ej8fp$@:eA[J`2&T*n:Ws:>iLD?2VLf1ti"*;1X(o%@6$4CiK%rV!15_0MBmC4$cEK+Zp\@tRT&[@eN^Ap,#Vo2]rIrBcUu]T<_$f;?hJ]`EIJNJ:n#/3$C@1LbfPNllF&(qjeY6Ds'>>@FUmZPEd^%q">-H?5c4qc3MfT@BNP.UYb-/B>43Q1PG/1_bH#f.XH*G3h(I6*`Q!R)ZD<N=k#?fjDDEUjF-&KU,L'rA\dq!0s;I1kYpUD-pQhm%@cDb_R0_On<nD::XFXd18F%D1H%2S51JjOibk57'pGESP9:L#n:qhVp-l8T[-<8!j`o)r(3_6n93@)(fG?HFEq:g+<mq1aj=C9tn%`^!IfMKc/=3V),ErAa%$^j99S\cRr,K>O!IU;1He),!Or8'7?<O"*V]6Xd3"",3[-M'n>68>eDF6\GJ/K@9B%9L]8G&ZN2q_t_O3%Q$9'ZfBc)P=1_9T"\R1K<&IICF4fd4)tKei6PCDY$'X)&=bGsN(_NZnHU=S,*^%\-p:tl).pTJWWFC)kN^TMWr5mBf5u'"l=TA)F%(/@5f[9.OQLMmPIh\Q+\m)`e=^7DU;fToXs:-<6f%\HLjl+i'W["*qR123I/!RhpM3Y>5i[37TN=b00nJlQ%IN%3Cg+u68]_KTl2%PZ!R(<2,XWj]EmYcYB:b!\&P*"j7no,Gs;j=s>uLV[[)fX.C]En2gbXLu2q#XDf1@NF#:PO!r=\oq"=?4NEdtSaO&;U24GD=sa99%cr4u4,,TJBa>u[LLlgIXC!+9i_0NDdi<5(b/u)=5;,P1U'bPSZk!7ugdLS6::raH!^oWeT?,t_.(e6ia:_/."Z'](kopYUu+7?+t%#h5\l)e7)H;Kq%4b#Q(;](c1L=!^1&#)2UJ;h:Qe\-#Q%X%TIH^pGWj8TH*[0W47TB1rr8<R8%NGet1K>j4+`!p:DON*Pe55]j+M%$PF;kW`CsA)00;ejBB*1`UKGBXS`*K?&ZkC'k<D5`h'i`MD<+&iP5_-8DJEmiC3%]ggO$R/#.d0ncT]L#!tB8%@M5pr,Bn3ISA:s%,f*EdY$>9aasAu=.t"S<>`u7Amu%+l$W$O=-D_O-aibT'*T`jp_Qq16Ma@QAT88WN3T2`,WBGh\3L.\?Seac_[E[Cu@#2P`eCQQ@%k;7i@7Qn!"Y\AS\W,/6.[;iCPm)jtE2uEH.Lg$UO/rDFB[bb;e9/.L9JX.-4XNj8PJfI.<K1YhHi])aIoP39%:?In:ojp:g8.A`q%7C9s_&KAsmR\/h9"BK<"P%6a[>hc&'M7inG77t#b-m`u$:4W23i:u]Q:.jhbWeI5"?=u*]oN#aiX)q$Xo!26`I&j$C3QTU5d2mFq%V;&`V;KfF:hRP4g:q9:A^04:%D+c#'2,HV=?q;sD.hjC$n%q!q`EoQV(b@l@BAC+e3p)Sl;7'G"pEYj(.O1$,[@&k[%Ml`SJ:m/Q%H'rSZaG)@Gi=f%."8"hgPO(LQ*lRGM8\WHCXUYi*T%68_S@=3a(Nl?j%8:TIW3Kr4PJYjV*%\?c'*4mh6&>[q6rZ_u8uYnV268QP%5mhm;'9[u-Z@Q^9;:(2!4tQDFa/(^`lDgIT8sDT8,RlGlKB4$+3!`<+;n=HVD^/d?Al5g+2l,B]W$a&D4G1mgU)X=2JpT[A3PFiI%mXti!aAaBC3Kq]c.&FEs-q\F^6:kBi%jRO;*l]P6n>-f6C@'p*C7KRI2HN1e9k.2C(4qh`jOi_+1N'31FNIe!?s!"g\I2D[.0<FW%*[Uc]D'6A("*#T?Y9nuP;=A^*<XI*FK\k`':B]s?DDb%f.UBm4h3uYZ=jkm.[\$OI2X4csf0HI/\Dq\u2.^0)s4+%[<a=_'Pp*3N%A2!)9,[P"pY-RY=2`U!)"[*I8=sZ4*i!o:.X]88T"=TW*EP2Pq$E5e%)U'(-WX]HTLPomGV!V6W"h?XSfU/`9Pq!)p#^7`R4<nM2%.QJKq._%s+`AKk_eIbbpTU/Lj<UWcu7@L!0HKI-WGdZKq6'VNI5^aCWNngElN/"@!#]OY^8a`V3c4nsE^]4jbf%JZ;_?o`bC%Neo%c$`XS`tU[m9-G-2eWS'QQ"GQh5h]_q.66Nc%8o@lWNjpM'pFWN7>I`fC"L=LM\A!tHU<',H\94<ejb'!hYec+%V3<-8nd8O1AqBj%ek&`9<23;!P41A;FX"U-L$+LI0ha/s/csKps0cB'^>AT&dIJQ_:25&hD6[U2[g0;7Eb]S4c2+p\19'`@EhqC?kOQ(+e9r>W.i5n3%\^=&'*^0AsnWURL4T=Boh0fO.hT_V_)b84[NH[$>Han.c^Q2]k50^j7J+UeAB7r)NJcA#S)A0=uRriJ)K2<Gl)$03]h`,fHr0J5/%J,J:#k0C:lp9Quqcd:"Gs53b#`p;l<S"*pULPAZFrdhc=5r5/ADVFWfm6ZHBf>r36]Dico]m4P68DdWms)#Mufm`^s63#WFB(P?5%4270-L\TBnOp$LacY3M'`Ze9-Yh2f`%u&Mdau<*1pdnj]6GQ5hOss%8#H.['LuoF'XpWmC-D\j:Hu,^C0gb4n`3hbLH\#XY+?+pt%".3:KNj+7qcHnApj+$i4\Bfr1CI%#dO))n4$tJ7CHh;0#(l2UY&5FL6*+-QD7q5s="`"NAEc$YpbJT;XPV!1Al)o]rJYi^!TQ51C%PRPD&/Ob/bc)!.3o5$jJ%j@mAdPokjNT&<m)4R_H77[GX';nF=q4\m%4O7%V3%*WoUeLQ^Q.jeZYW12sVkm7g"^3oY![nf[#)dP>%$Au)d-JW123iEf7]TG7:L$iA>]fd3&+lI>j(@aP@eG?$unI7Hsdsse`aB"8:SKhEh8AUi&<55[mTQHk:q!636V5Opu1SF(Z-lt^W%R%P?!7E:MmWcI=V_W3E`gG\X5(J_@c&Tr`&O4E`:<!AJH5@QJOm99G>b&(*Q/is2%ZscG;NJc$JetLkfj[ieTqGL,>AV@W-Vb+uc%8WG#1Ur;S5PF`d+Q?*sZ;B%im024o&.2Kj0@HCt;orc$0/\F!sh*!ql.SiGN5XSuTj9#t!-ZKo8X+38NaUt77kh$!O<K;K,e!%;&%2c7OYC6:0dVSYSV&)Z609C>)$ZXpD0DIl4#@>b1-[.g8)dJFEqK\:@7FEoKI($G.)\QLrA:5@</o%ei7#)FFaAYRJiUDPEl-sc0$%:VrbDYfp%(+EiOeXkC1g.hf4ZL0cnNi[Wu%es?WcBJ7e>Un*2Gh:Yo%qLp5!?HgB"?QtR(I\Qij?M1Lum*^FX*;mZ#'6JXa/oB?3%<j]rTQC-DF)r0:P@[V7_Z=G6PA@E>(CI*\.6';+UI?5J=o*jD+;oMTuTt%#GObj;LRWO0<g[L&Tj*F`2LD6:LED".2TX5%GTLY$O%a#71sYi"!h"1p<_Fi796Z<.3$?48i1>'M4Td[X]u7FJ$6*>3Q=<?E'M6cLEI5@\aJ-6F#$Z(adB:j3s>Lf8OLAc/c!Epi$!%aRl0%R$q4u1%3d%VfY;<3YNq:OSioAaBJ#efHGr\1GM#Da#>h6@IiCQ9Mk]J)TS8]?("itB)H(kAhu/(2iV<^DJd=m1JqQOoW'cFH6MDL%+]OOr@5\c+c":F0Y)dL7DSkJPo9h"KQgnl=:q<O7fh<eNRu-+7BcL&mCEm/R#o$)6^R<CNC3!kJB/<EDlCUe(+L??\T$kH7D,$CF%FZ']-b7KOQVh)uGGS>kYG%dD#n[W?F;fc`l?(D0*(@P>&!B_$mdc!P/eb?r5+$mn\(nU#F)qp`7q<E>G**%:Rj#"P4(YigF'Uhb6%n6@'Rd+m>oAK"sKKsZLE#t@Ti"%n,Bim"1$F>EUB+MgC/HJ]kd9JCV_TV4-aA_,^gad4;U7+$I>(g:`LLWd>+T,'u!ajS/m\S3<f%HY[+<%H0?NoA51Q]-]mga)*oZO<p$r^rlCZq?sT;;2-XCRO+*g-K-h)EBtMG9?lA7M,7n@Rts@`/4lW@:;-tZ?P![),%O!h/4lWr%af_V$$c6jgB[.qkKuIjP"pqR\O;8]/*\;e,1+Z%Z"\H$GOPV7oVCjLB_KD8,Rg>,lZ[%o`aHAA`@,u[=qut3H-p\Uoc&t><PN\IH%\1S-?"QhZM.P&M1)!&`#/6ZHAHSG@$\ZdJH(?E]&3-p58)S3F2#hR#Vmi)YO@s>r/-R#fAM\\;I*kZqf,V4h5"W=WlMr#kiVEQWR%_$,DcDX;c:a0F=nZle,fkQI@r_Af@>T#G9D'X?*2Dn"Ga&_[-"b[@Beg[NZ8rbO@R!HO3UV=T@A.hr?U-GjV6d,?d5NR?b>DB&2k%)S(52>W=YT\obeo3f1"6de:;XBWVeRGH\h,n"$CdZp"R$A^sUo%Ec$P\P4$/T0a]$h,[4J7Bk!L<(<@28s)lWBDc:])6MECb7!h:%Tr]R+KA>QP7Q.mi:'GDWC9Wr5"(I=b0@&"oN;gP2IE6CqIrjXQ$!Ss4//+'F9B^*Ec%!MO9S$KCc#^\nE6(;a(m+A`[2gHU.GPH`%\mS@\Oc!%)e-.S#1>5h@U;Tf^8c`%R!MIh6f#*%-9uI,eHq<X)k]SM5(cRZqAu47!h)mEKl7A-7'<mlVbR8hb^C>u<)^h<f,<38'%BfutS5RN@3!ucp,'Cq5'\fl[8]ZI++g+\nkYT'\60NV+*Q!u[1#c5_lk\XQN:"/#4FGI8?<.scrfKM_$-6OK7jT^5>K,D-)'_ZSN%Vj`.4`e+P&L==\G]=rT_6^u^kCSKdg^.no<9hZ:l9L.u>H4hJEWWcJ!q+a!02DJuM6)jM4qT@UG=C/k@V-[Mb#ATqf"kgVliL"U@%("XiS5^3l#.``ar#[p\ZJF`Q^;O_2.1Vn-h]sdJ<i<)IYQpZdS-4l<`%4VY&9#+9C'rir7&2><LaHao8BODNigia<WZ5Nq8$"$-&%\BrgU]1>^`a8fY&lU3\ZJQcNKd/]$SL]Jf4nR]'unSNe]$N0#&8]/?VWR=(&G6FR!=*5Wdk[SJJ%sTG:&4$a[U&83A4;0,R#!kU)%=hla[9,T^Ol?4<E$^`A"^BgfX*)8l"Vlh7=`9"k"!FZfi<NuTS^gN/cFb8[<$P9qFbl:46rA+npi3)F`blp_4+Y6.Z0Z==FA0AB(%ShY?7@IC,6JC7+J'Vlmj/e(u2"6O#?!R]kXVGMLm.-\k^C9)/07oeUoA1k_dR=(qi>2/J4$sk'L,_mV%ND\Ih>-qDQ83/5;N.Aip%X:I!,\SO"&/nJ_t%EK2r(rA8/4Y!GK:uMUu_4["FJG';pK0D=g&4;'^3SuY/P[rEO)Kh[3pA[%j`bL#OSdjc'UBNud&A"e+ML\p&%K[:>,MeN]il3#*cTf_H,,VC>s+Z![j>0;pUTZcr$'i]6#bkkgo"/8M@#.!u!lkM*u*[@\<AbgG;%@P?a5(.P$,!_#(Cr;MMK)'=;%NV^J)#D#X8'0.`c[t/clkmIU3)"MGNdbh*/,X8L=?0,b3bC"%8Njd%+(:YXcA4(M3I1%>2$F>@tW3B&5iOkt]=9s/meY/>19TGEf%M&@r8bQV%Rb`nE\f,dV'Pnu'XbWV?Z&fY.df5#4$pNNq"lgf4C0?LjR_]`2\AqnHLFVH?dMP7#PTh+iBb/;T+TtdK?H&lHD-8H+1%-&PgLiCf(,&$qDb&Q1hU\YMS4T&<X;amR.i6>&kL/TC>nhS1<\p66n>Eb@s-/ISk,H+,%6(ZabkTt5BH&IiB,_KIgQ[E/TCF'Ul`%hG]P2ODf+K;Cs'YfS$IO[+$c7"%enh()\J*)UauB)04"I9kU=A;]TF33cpSN![A[m)U8+bg"p4G*L;H31]Ws9F^8EIVc]%ub7]/!%ZL=UlX=4Mb3lSDuZ)"6JBep-CcgMfG.Y+I`lcR(r:9bprQNd)W@,FT\=OS!#</P8K@o5s';J-aZT6IW<f='E$I`KXq.!]5h*E?3Z%cR)1GV?R1A;tBX4&IhQGNkUMOZF2Ecab:2:[*dJb_B-AM&81o`(9tJQYLa"-W9#RK4hpH%e-m(HEZ,XnOUR>#YQrt;Vu]KH1dEo<%e;3uRZ(KRZ:f4/7qq9r;;N*UOTV%At0#pFUdHN=oW/WCTllcLX#fhBT?\*0TLTk,e!VTJ.elX4tJ-DOU`-U$:@(RNK;%AuQ+DF>X%G&dQlPXbk`BnF;'r>&ti"Pc%/'jLd-(ogu8M`P6FhI4*J3l<C\KGkp:FAL+XFg[6,S&bRrG1ZL7&f7<j^#80]`[ihb^<)HC)Ab#V%1Gk=g7rNF#0RXU6'11L=e&[PY$jncW0:F\i\5h.$KG:,E7b5sM0UVK(Z7AC];TNmG5D^YN,[X=qS\2<jZuUEK;ah61.[e0uk,=uR%H\N1"0d4qBiG6ar;E[YfgaX!7'Q`XLTP]Q"0,mg"C)G;\0h]VH*Ku<jA/ZJ\Uk/UU;%O]j&@L$VaEOBjROa4T3-LB3:[NEg1*BOM%75#a[jWU_p*F6#];C0gj%2`)<W!%['HU3q&r"KbfBR;2RSjO61-Qc)oP$D**=YGOc(0)(%bb7`r*Sf>$>*PqXY:!:HC"au2Ju*;g%rJ%0X==d>4eq2!Ul;3a4R"qSkW#]^lI""rL08;ljU%FMhhi=*\9S"PGd+V;H2:g0L@ne%ha.Nnf5&KMH2o<KgO)AR@0d\6I]-BEY%k3S69FAK!"5j4T:@uP$]8JIajQG9$LX]_*#R<Z4[^nKuEMNm%)7P0<2!jtuG&`8Y(cb]*X=W1pind^&"0\g.aKP@A_+&E3GdYqsc%F:YHM.?2#N1@^As$$EVl#n(r(5m=8A6)I'<G?Znc(I0U)R]njtl!A&A_!DH1,-mP"*5*#e'OfQ-DC0ZBqk'D[!-(^$i*K67DUfmR%!l",8HB-..39a+@YIqEQ/m,;\.=se1Cs=3WXXFq+W&<rOG0A)rRlg)iE3q5$Kc.(Nb9a.!^u>$L"\UU\=h;8JCg*$=,/.-STZD\,%H+>%upQE;WP'T]o0?a@(f,Ri`NpXg9fhp&!+p<TGYD^RMZ+@a7pCIW=P%.A+]WH.Ab;GF;.jAqF@p)hbM:B4ln#DIU''7;'s6Wg@%'np.EEF!+geqB]8no\r_,ZY`B_]FtO8`D;EVRMn..rnM\`/4s<.C(::QXoYndX,9F0BiRSR`"jY"S9R8$c1YYAT>7/<YlVO*[5#u%E\'hM[h__[\L%us+p)sHQA"@O9\iY@Y/ofQ;8/sTIp81H:#X`2>aLur&_d1#M_]6S=t[tJ,mjMH^PZ!hNZolb_b*V>m`**mH=paP%[(UE*?TYi;07@=^a9%(7&X*7%,,NU`Go@,.6*poOMeF))UK&R&;=maTGS-3e+ki5)A6cS^W.GPIMPUY6\,`s88W+o4ClNJgCTKu,%'N13pf8=:=P$tk)`)$G16/;\o]Oar/^roa5Pon2Z1R;BcTT,1i9pK6;Y-$XM)QJNY2iCM^A:a]<l7V#/*\05`9lpWC9P.0$+EL]t%RA@n.O\m*u8sUKto[LI(#.b0Q(:\rO<-2nj5SOF%(.]98<,s84oabn>E:9RW*ZNiJ((qb"VN*:.NL2q>^b?!>RRn>jW"]LD"V_S9%f-=:Q'@WuACM$EQdu2^3>epgp2_-U_<$6%2U,ea'CQZN['D66@-?77pN($]"EcYs&3=Mt]Y^l/r9HjCq64Ze%>I4UL_$EMfA;UNo%c%pbuB6JLF<IbRu2]4G]WOUHG:b(+(An70jb]i2i:?X__@8`5t(C*kjN>n1k/75Eif4[(DT`V'$;l87KW9TSGJccXsaBgi8)>88h%'%\hu+QhE(l-'f#ONJ2=rI1^$R)%mQcr%h.EIMLeF6;Eq>Wre1lYR4`@tip7#DfOYjVaL`<0B\+).AQ/XEAVV$`+'&Qp-p_.2l2A%$M`I*CiIlf.C:&9:W4pF=q"#."S!C]'!a'FU)dpk1R\s\2FkYDZ;H7NdRDh;MsJL]M;,%FOO?cM]'De]cI#CpJ][dM8"kC`0VDB;%_carPV%D&U93[j;4+QAN0!=s^D6-U^3gc+<8)_B2-uu_^#$"#r?RGs4VT*6:i@?Z$2>XPK*\$):=DXd&<IU[?Sd!AlKaT0IQ\4U$%1[CP&mDM\WY!<c>Wg&,CXO,sYroeSn]IljF6'N0PGq\/Y\S:&nM-^a3);0.2q3(MqIWo:3&'h]#5Zd_3&JbEmm/YSi@e,.ng_Gh[%>T!6ErGN':]=YRqA\j^6GC^$#RQMj&7KjHXG\g_-U.mWrH$P8_B+pC<F>7]aF&,]N,@/KK@!CZF8)`C)L.Lu`I4:OY=uB9H_mk*u%fi!FgHCn`0E:VK9/3-#S`b<4UEr%eK+6>dG#TM>&-VL^6K=`'q,'%=+03Pk3EgMIN!a2^Vr73%Es8)Z]m^3amnj5c*fk`UOZ9;(U%fWCgFUIiui-9`=m`t=7M="t'9Vb2h\5^-fgb"mbt%`Tt,E^6<d>"Q>^<.HGXS7"5)Wj+OB*[UidOWn2Cjd9d`^nFl_>`?;q6RBKp%7AV(U%>Gff.T7?;Pu:Ic6o1T5@`'C&?'?6nbQcBW'(V#\+`Af1(R1F`OMYO1(18PT=f;t*hF5pKZq5/H1nq@f:^bJ0g%tgEaC+<'%FhS1fcR#RnMk/DJ-t^+8J-$%2L+3pIQM0J"<4b$`]=Y<nX-JB<G&$#E.4G?"jm6.5#O`tP"iI-6SC%'P1&ZW<8=f7km+>0(UZ?4'%D;fgHWCbkGb)TA?dUP-9mX1]pFrVArB:,I,"K'l-m?"+2Yb5Y,^9KNjZl,3sBmi"n(7rTjNC\kA(W^<Im+)K-aL:c1$>H6,V+FB%%Pq=t`q:mg4AE,-H97Y9f.*TVt$=qPm!gZZ#4\3sO]'=[[KG,d!Tr/+Fa=LWC3(K7sFHh^3\jZ"r^WLC(&Q7@>VJ\)L7%n.gOm\Q[%_tr@5<]+6ZW80II;6/+qOXfY'3^dq+DF`*$%Fq-87nr3fFP5)#1U5$qA@VhhV>7nYaKug]=ILbQ.fTX9Q,#F!&Qa^#Z8o*/$%I4^%XGp/r,n?VsqR0B`:^3a5%JphD1t-Te_S[`8Fi:8X+bGP;)KbKR'eWoV@G?,Ml'IJ2b6n7>=eMMrV'J\u'7),a1Ik=2HN^m(@&1N2%`%LMT!GcITIF>g1-sc'hKk[C"2G;!DL(?'s5K*o<[m%$t4%qFk6ZqZ/S?4,c&7#$BD2!=5#,EhPD!saISYHeKH>Db]cN/Sn.\pI]%6_J"G[[CPnauc&`_hEZ5>W#H$"#eHpKP%qLCt<"V(q&%`"V\jB]/Vr6%:s9oD9tYEqiV/h]<R-oZD>sNBg7c5\Y:NEWL6";aFWDc%Plt*RpdrstbYl+&:eb_5_5F9L"A]e=U;2VA>\G!!'=pYQYmXGCXCr`BAb.0N:k"8\?q2cBCi\%crfY'#(2b#+er^-0ZVkG%0:W+Y%PM9;JY##!>'r<c#h;)0[j^j<V,Ek7sC7Xj[8T]NNQ\bX#gLKO1qL2Z$Q\R\(Y:oS:hFdUlC+g.;>*F`LUVKYsA]HlZhjpIoo=_=h%F#;g2,h5aj:*T:m']PsIXR1O8?8IO@0b()BgNpH;@<gZtahf%31LSWUC9s[SMU`nf:+.Uj3N3uEhha,=@uh<K%afX,W,N"[kOea1%+4GE<9R='/TB/Y1+`O`GJl&tHE3_):l#%j6B/4SE##ZPi/sh=t]DN_a/D0Y?.3/&s[49aO]*.jY@\#^Ms'O'tK6K.:IT8P"`q04*%Q$RBd<U,YmWHC504%!$1bn",:l*r?7fAu>UZJ!lR*ccBl2C%%69m"(r"pI1bol!XQ+IG7#a$I#+^FpW^GP??.O+o$$31s#S5G&j]%mcs.`C?P__[H"73;FbphQB&74)p=#nV8Mj"-kC$p>sC^FmbQ"(!Ncm(d"PV+R*4#?heUp";1e,NcdX\BNXX"(N,BR?Vi8D,$l&&H%OMd?T1IHq756]!sbR>dU,Aece-5AAj\l*RNZhKSF62=HC5mD6HBWs;))6+S:^'E1dJ1?q\,H.Sm:kZBU3Z9<5Arb$%AMd^qA-u3[%:<-CKDD6Mj)+o?b4L=L:BKtA^PBVEI,1*F!iW@5*?ue>dBB=Z;IQnur'Bk#^Wa)RCLRPf@))FR^"*Aqh$gs(ZS:a8^fSS?Y4Ej2%%<?8<(1)DhTC+<G"..bD8#k-^+07XofHP=#AI(p0Q::um*Uq%]PA+$fK$79ANfdtHd*M?gDr9]3tqA-bWKApAH9.<EVRS9-H*Ku[e%T^\H@8Q:u$o*.9%?f&sM6O&f%ZcqhY0.aIn#E^^fM*\][ZRT<F1(?i0T`uP:o].i';i>E)]$KG]OYejN/XW/bJtY#SJ>0_CX&='O%JI>Y=LrY55c;[[[a47HJ\Afn=$tG2/-D0/O=@'8oG1-ZS%?G*"Bu+D'1-R],0UGd-^AIdeBR%bZGb*.`o')m@cU<>p4O1P`fZHl]%:JTr>>3qW*H9N!ukFns5LDI_7q$OaugPX7R@X)o1Tf0DAkgd4o?eWi(!X[HE2B=u5l`f`g2[mqY@X;o1h:155nRkq#Tl@C(X?CRY%c9<f3atudf%YN47=2m=oKkMkV1<ua?)CiI*Ap`Ak-+;Mgg[g<Ip\aMkhqpeZ'.0?C9a/mY[G%7]Le>^!c>ODd1XY1'@>*@mlC_5@%Jr6Vj0V8`a\(@G/>i:&jmq/&sA+R5JT'R[A>+@;BoR&8>n4;m5BoBJXd*4f"d!R1;kD%r0CTA[dR0Y)"\h`.^Lnc:qp\5=JiHSjN%'Uqn:n73Wtd,K`#Vrn^Z2hC;WdM=u\8BhH=Z2%?-:C\W!#$2&C1)IG?',?2_F+MsO(Zodi'(R3jq]jb9>YIpg,Fhr-KVEj?4r8;S%Ast4fQ>^c1a^`.fP`4kK5/?%3lB&ud9F7g;B#7SRn2$VEm]Gs+H5Uj]\W7+nI.lof,+K)cFS2Ii8dCTU^^!:cculNp2[BT.FA/$P%C'>"Vif:H\BC/ETHrq2YUU_(E"`=ik3JI9a"k,o%/l#3&j3n4a`]R*Dj+uDC".p4UnE"f!0-Tu@ja!I$Rnq&r?m"FUi.T4MkHba3%p8jV0EJ&4&VYM\I1nT]j\T)lJg=hWiV]s!N,50gNBcIeLSP;Pg)5HtPNs(qH`UMeB^o>/1l)3]CJKR?bo/IJL7br29rj$#)aV^Th%8#Qm"NI"X`pto;If;!#&Qac&t44mSkX.Mo+=I@Dj>t!&Q9>CVd#Lg@_GhLL'DiC(:lemhUQ;rq93*R%cZe''c$`8S?ND42#WAur,%Y83(%/(Ur</SFAjYdjp[jss[,W@c%;/OhQK76[iUme5TH5qXkBh)TtS39pXD?=7\u0Z#,j\]e4nGjmJhhOgbXgj`$f/-qHskAqdt%FCd'O`k'*f(DtpKXDi`#/ooNc#/&0WpLi\7lX,he$_h/q(!8l+;_]uW,u2.hh=fcZ9DiguZS&K?APTol:S2Y,2'K4I9lr;U('L1f%2-[tM8RhW<56p;[^LS$\2BOIf)A_]Pq\q.W'?@[5AAMrb1)47L=IG&gKWnjJ=?jgO5s=Wh=Tt,Y#>:A;AW+L@[YpQ=A)/'/?oOKL%L):?u^YZ,(7ulVcIR4!$?[+B+b,%#n,WB7!5Q`cL>;/jmJ/ZQ3<0T\rZMjOCpMu1nN#Ik^OY=T8Z)]@@aOi;C?&Ru::j`nH.GnUf%in#.P\dLfF2X!nm-bU>Ec-^f(HEToH%)lN!XFkU=-shbeODhsOn8!IRh1MBr)K_Uie(tJskNMjfMW^d@N9i32(INEZ'XpJKbdUt<%qA%V4l9\<P%D#'hC#=X:EqJ3"`Ga2-7!9ES.j<[RMI3):j]aF.r0h7`pE=5,#2Lg"[/WI=3dQjCi]GgF7e.D_(8L^<'ZWU[btG8X%rL.LeG9U_g#1Y6oV#-m+FS$%T`HBT]7?/e'9-N:'9&N#FSgZl?/Jb*OD7'(u*XC*p*-s$/&"+i^Q#iA5I;!2UBTm247a%$pRN?r?%Lt$PJ]e8l"M]pLPH0L8#Z3^P+a!p^e\%%[G@edIGle/jUA3$E'URg0ko:aFAio9S[o;3g76[o`n8]hHma%1.gI*tA[9).\RC-":h%h`/bThd_XGcm6cr-!$]*SZiO((fIQk#V99(iJpGc-fLeBV-tsc(,`&:8954!0LhI71u/p&]Kti;HWpaFn32#e,4BrE?&Q^HEI3j@%(ZVEc5g'@.Op3rp_sO0Y,a(6aF'WH3Nm8G];tp9-6<AAPl>qBYT1NKj:LTGV?rK]i'pM;Y'oZ4*>HD)/Xb3TSDsOV`G5L(dq&)+,%T')iPCM"lsrC(.=eLh)K)/X]n>=&-S;51gSU8YVGH(sH$Ukt6KpK=4>c1>"4&p;HC"P+lUmP?*<FNFUX[j%A&+$9,$DahB?M0qCH%<rsrIedMr.qF07Z,G4\i-uQnu$n:o4WOM"FT=4.c3\uOY]@^7m_ZPYAVrGQ7he?E!8bS(cIG**'F,+abdmfulVNL1U4U]k$I3GR+%ZeP#?Pj,MooWWKel9a/E=G:sOiZdF^q1Ws!j9sUWGN![uH65agl/pL_,11cCkMDs/[Z:,X\^aU`PbHioih7hN.2^,O3OG;l0)J0r%?Rh`J3)9HV0,9:CXd=HtT]c7*rbb-/po/[I`G1:>7.\(sq8.MD6@QK%Ul[sF^T:A5DsSh,#(?J`;kTo!mHBc97=AE<=2W7\VI`h3%Ifl.46iZ\R;MRQ$@k:q_8pV=Re&j>&Ps<KK\;-L,)Bie&AQZ>Kb\]fKmskT@@SF@slVYoa^Dfj!=d#dg`2DFUpt10RD%U!<>TnZA%8W0EK/N_=KBn&*XR1B2:C8^rfcI\9LG0rle3tVf;*>"`1QoYOh`3(,<NuaiR9'&2/kOu$hinNG[kW:6?>dT9^`>W^'\;rr>+Po`:%AUlI\gqd<,<K0s5#k(/9-dP7dV77(_n1=`Ze5Cr*(p5lUE^bAR6OAa_/T%:>IZ<:2h2tTOU$\h\losL1"_Kj^lBM1??]4;jfb!I)%Z(tL%iK[6_9)l<Q=!5q=.CrI^6PI0oQCeud_pE%79%m#m1kt^Jo?,8.V')0l](>37>Ir&2n3n)n'nh)_B\#hX`R',epfCThM^',U%nB=dM$^A2\/?VkXF.$DJbZ"-:ee2<Ib[I[J.LMC?UNn<rPQ2ZU84+.@+g5P3Zs$0/,%79u?d%\!nXFcq:=RbGJ_&0'%tUE+,q=!3%(b!Ijd-0EHA]7P$:!n6(qC+GDCHGV<G3B\*B;;6E!dtG?1npW\irlc/NWDqG7li.u6(<N['+\CuI=miS,I?`PM4EEMF47f]V_0MM%,N$(ha-&YJ\L;!b'B$gq#t?^kKcG`F3UBKj.cc\BY7p6Ek&OAoLk[^J#.d23"@WmT=/;(Y!]KZ4B;t'944p0HpUHGjDO86CfcOJl%M"g4T5?PJqlee;!*PM<WF`KFljuLr+'KrSIkk:i%:H-p[-#[70!S#c=JI2MRd!&VtN_p6h[Ie6nNjVZ&B*NaTI8nirAQg8F\Ij9W%?\t%28g\pK9FqL5Q<"I!^p8TKnLj_ifU.';YS0IZ`*iL^aXS3=e+#s8'[:9F=G[CQ`FYiSE.E\B"ecOU"l1e/&r:aFY_rXQJLs*J%!j][8,d3\CK"R#Id(:UTV^@<!#D55FT+bIgKC4LR>K>5>\&K??Gh<7m[^q,EkY@,r3moZ(C_a0^0USADJh;un,A+fa2,MO/@`2g(%qfg7*8I44HN1jrACJfaJ)-BKKs%7or:7T-h>uVu"qt%0+4s7(Y'UXJ1?=d==r4+<5>4IkLK6W7Oo&sE#O*d/q_ToI/S:U:TXfTJR%aDs3!PY'Q4TH_*1n5_%XUWeWf:,l3"dcPd0_$hFZd2@js`j;M<%s19$b(']`*#4itg"<#V%,B.T&CAbBdYRS_+r!\1@u;f&i"<r_%M9QX"ke/rX#Be"MPs(dANO"fOTUqBobj62,j<SnN+%&Zl>G*!uH?em2@#TEj1ZOje?sqPH)lJ<PDP$;b!8DMQOE`KF!L8q_!$Yu`%&`NYQS%:Q)F]S@L@b:L"i<h!G7U\jn]F1::=m;O:`TT+sNk9RB,)Ql]nbL9^Pm1fpcu)Z!k#l`na+K6CA*57e#-IFcT&\]H3P`p?%99KB0L9Pl8C:dbKQtt[9dF[e_Z.\S"+(T//+\NM8Ct)p\Do<nlGN.?`gPn"_XV?C:2+8l<rjE#Bn?I3gHY^Vh:3tUr2R1GoZH2Y`%GUQUYBhWfD>D"+cd]RT[d2%8o-kB/@`"N"ViXIpuB,6_@+1oBI.$Wl52!\/<IU-$+M&d.@fdlU4ZDZ^:$+m1;En8(RD7,?2^"[;&%/s@$ne=iCs($MPJe!h_Oad1''C\-qHC!1%2K\E*2@qO8$Aj?*Y^%oTVAsHkl>qtM"k[$:*NYGXW!X,q_FC'J'(XX+*F^kYZNBXI2%LNXa++a;'e^mS3iX&eXb0TrT;WkH$sokePF'UTkK:Zn8ek$U;-F/>mF(h?<2WHoDa&X^)*64\/$SRNufKHB8fe?u`E%cC1**'NVf%%M4X7EhdHO!sITWC8T!N7%K7tm7/>bgk%)iBk^!VHigWY(EkEJd\$i`.)cA<(YHc)8dbY,;Zbcg;DVSn7C@B,=L18d.\KA<8+.=6%;flnDe!>O#Xc\gAQ^EK#>!:3,BCqM=G47Y+BEY_'BQNQAj`\.cRQ5RaX/Od>V<)kt2B()E;1q7q#8B)T7D;d!i1KSc2%nQX8'Id!%.]N;2hO\ADQ!n+tr=m>>PgcFu3W3oOB*[`"6:'dYf^>R#NSo7<B"/QR;AnRf>uDONkM;,g>cHmO.\l92)AuhB")OH+%3R@S^d\'@%2O%H#(^$AJ?8ed5%b$NX?8TB$[-uErUP/ngF>aHXCs0AGS*mJslD)Q?#CdK>+b"'lY#oKT50Zu]dX&JpF<$\m:b3_'BONke=A"r*%MpG"Z$8ld'6fYHh?]YdK@r'%Q;`<gLaM$IUCjRh0P/Qa@R3qQPnVF1<U(m&9OjI/B"Q1'R-;CB-*ZPcE68fa-BnZ9To$>09UJ#\K%Oo^8#8P;gZ-;)M+-C&=)1nQ63FVUOf:IHEl:=`L!%b@N?j(DcMc\=>e*`%@D6q,Z&F_ZCCp17uG<tToTFt$N2i*B`5*r5KrFPCqp%:=R'JY(-E<1*p;mE;ep`C+m(V@UN[rBnWb"(I("JUM@ddTBB.A\ZWp?9YadJHi=S9`nmY_J:"Z.G]Z#<2gHnlfDD`;6.a58*5ek:%nP%mm+[0l\4fLqI.FRjajt.B;[pM1O7S0l<"7O.#)H8s6\f'Md#f:CI0t`h_65/.)kQoaq<*VCbd#S(-^A"G7KA;'8Arf6=FnBe1%%_d!<-?RRSN)q6m\E7je7U$Ps+V6o.4PIIN>8MP-@aHG^<S>aUN:9?U5'-3]Y0;;#Q4!LdiIsSEXDIljGV\mWLr)(0a5)t8fpFD.%#&.N&WD]*=c!0Qqrn71,3R8rsU_M%_mDT&26L"h4L5C5?c3)3H'3i?$oLn0r1!;Xg^I/MVr/6cR%0&Ul9IJ]l)LNW44$Z9sj7e?J%%VS1nP(Et!9-B[c1h+S[J8m[:AgKJ(GtFZH(4J9icuS\h;;NFFZ.U\LX2+I'ZWU,cW&Gls+#r1\fF[6%&.8>XC_k\$<[E<g=q[\!%WCir!N_450+8lh=1+s4n&r9X^A\UkmD<_DN_mSIJ"9.!m'^^7k]&pdp7Rq!<XP'!B%8=g\di$?d8^"Rcs!t<Q7,N/pWP<fg?AGme%bY4$rT]0/gXeUJo@A)EtU>cUs(#o`b*GlWR?tE__$f,egpHJ5FS.K`_d$PBpQr,Na/?>&Kc0#qLNCZ18h/7$6l_L__[dr,^BtI.>%%"Ak;5h6f&#uf391TSW7%"2gl>l#=Q,]cXc:D&R3/r^98qVimXo)j2+&Uu(VA7%HX@3k#<p.YOoXqOq?*;)Z/2mb-oG/Q"4c2s^I%bh:((d[!9=C@Q;rP(muT1.jTD(]qS5L:Xk4>;nf1HF!bh/MhAmP=[&Kh+2?Kn1O^#*P2aJW!$fHh[-d&-+Y:sDU/>ro\%J-'<G>)%-C`nI^F_H@IVf.=BNX?rJ2s"X@\B=%!96JrP]#b5SbGm'+5/=P6dgbHcLH(f*+m;thP#Mh0M=]8Y[=&&>3$MY^JqZ%ogRWH[.3E.%/&\Y:Rm]s9@O((Q=$/p3Aiii-+eq7VXW4KQ^mdVkO(SqAIlCqB>$dUO*Y7mRAqY%-^SFG[U!L@k/=%Mj1nSa1I$g@0_GlR\/2'CR%L_mqhVh(^*Q9f!'I:0[-17k=<(FQ).;i)a.Ho]BrHQ(RtNn;*E<2el.Si"UU^]/U-@>14K`S5qhe:jbP?o>cK:=psms&_Y`R+.H@%Ju284F4g0.k]Tgg<aE+5P[K7tAD1J/\oG7(^[bj.Y_3u8m#AlN8>(aM8(\gl.dP#K(&J-:TQI-<-$-"TpTr)'O[%T4;<EWK_oEPH%FMdlr`Zl@=Cb=1i[F!KAT5s(&OE#V1)VPU=TVBDA,h<-KN(B6[;_T&1754K;/jQKZ&)gu!%XqMV<&n-)E6b/-"L*RhVQl-`S:JPt%aB.WeN5=3K\!PIi(AB;q$)cDdS-#2$%1<4FXHDD3U-6Uj5g5Wq7MJGJ#?#^VPK)OPp2u0ZJc2!o"APp.%O`5B5;g@HgBWAt-M)*L%*F-LhHJ*LPL]VHZ[O:ZOO&.ei/NM.-k%["T8#UZ"=BgEm%oKi2QO\_I5>33ded*k0IOS[`GZlI;C`?8-ffQkb'#^;-PXIWOVRV`\%,6CGhi>X9s##8NofhY,2jm-]DcqLc0!mC0c/kNCAWW_:!L=.P#ECH+#7_2IRit^Ek`Z51&Y0hs[:uR9N7:o7Y[%jnXPs'n:3kGF\%VWkYr:@74aN"F12h_$G.`/TW-6<L$0:)[u%QT=UuO%O/!^lj^WShg!I-mO,[1qsDL/7/-#Drg.;\F/b&a7#/E#KE1S.#A,>I28$o%c3hhd!PPD)DZoD+'c@LAcoe-e'/VJ*FUa'ckUW6BR/u"/-6=9cOQEb+CTKNN"Aoa@FK-k3Cc9^+<'R8+=_+Lkc$C'4lS7>s_(<AZ%fHoRn:f2]%CJqrWff^^4*#.>h]<l^B5o1"%UN"IV$'I$ecH&"U(K"EF.LS;M:>e,T]tbITbSfeV=,6DRCoh4$4EOG*kj'(?&Wbip%Jafb%,qjg%.h=1!Sg0rNPB29F<m)P\Uk*V'Vq+3S*9O:ah\j?+$S0:@\ObZsp$p1-l=VT4#BXa+O;tp*O?m`11q[`@MfOm.54QLr%=?Zk.(90E<RF1=D:+>YP9r$8b5gINpb4Y?7E")RtOR"EleRm@Xs)u%U769Y2gqbI_FB#uJT@ZX\ZG$nTb-8ms/dfY1X.2oIJ3C)8%R-JH1$-Ka!B`fTI.)uF,#9.Z!^QU?l>!rUbht==L;5._)gVIVGXh:ekB\LG3&9+gpCl6[2lOqs$arU<j-0ae?H1`,SDfAJZ$I(i%%%d96GEK=!(%QD2A.l0Y`6!Gb[deZV-C<i?L?9?r&2bN0S3bK5,&'Jc%MF7`;i[p%T2p@_B#&JkVL)V.$+d/UE=Q"p,PRJ;7YMA%b%=6^aBM@K*8p"Kf-ad%N#CWDkj%FTej1W@m:j54#SQ%FCHJec7)[Y^cu4`ll_[tf$iR&;92<gCf\ErsQlKTjSTl$6P%,rX*c&`41&%)Gtfn67nW^0.+H?U/7uOo5XZdBgV_TIX4G[6s5[WS0U81X_e(d%T;]5j)m6E<uR%X\[C`Mp;oWIRFXMnfBL`MIQ:ni8d$L)WBh3Z%M)Q1W(#Md=9r3QMDHhg6[mHg<:Up>8e!=]K=)%UT<p>UL9%W3ZS@Z>T0.5u7%PjaPG!ZhtE==3SL2B*hq7nCKe3IU/!o5R>gFS*!%0[;We\l5k>ZicOf?SJh7=n0"c7r4cP`021BP-DT\!j`OWf,+1uZS>*0OTr#7b3-TPi8BgVl%U)#[@[%:-F[J`ku6R@Q\Yig,/#n9%Er+nWj7+c)bnpt!R8cZ)Ot<qR*_5T<HA]XRqI,u_XP,`o[M+[\BjDJ*L0%Y"T4>=?s1d7<IRY=71n\'"W&s+646ek2W+[PJ>nM#(%-]?A2T1GS\Thhl?Vq:.](]%+Pdl-:_B``\YA-)ZAq/(ulp5/i'",`]>rsSj@q:q#1'X?@?&,n%m@';]&\e[AQe*2+J!%k-3K*"d1%Fbc9HrJ@,nF%UfJ"5OG)L$f>KSl$MFKTY86I2:;:+51nc>[#7M\T<3K4u1*DG*?h!3`k;0<C+_-l`014a&`)>k&]C*TC]6IY2.BH%kgTP$1ZYS2f!hE"W]R&&iAH,`1XMrW[biq1INJ^fQHq=7]`tY-":&F*J.%0E!@G^e*T7Z[>i;K=UlEmGR,&QcIVm<$+92;uqV024%rSe@V+!:ORm^o*o^PW!bYW[I6m^pMha8c1gLS*H'-i^rpIY$[rI.uTTLED"jq"]\hhZrdtQ[S`&5@aQO2_:g]3im.beeF%BR#tPK%='83C:kJujX<N3;SR!"324K[6*fGA"Wr]LcK6IW"Q&f&Jol1_JO69\mnDD2DO6(G%fr*_gj`;.FS!;f8+'6;T3-3ugI.Op4pYT=a%I/3I1\$+Y:GCTD6j85/r0/$Z0n_sAc5JM^CiQ'"5Qg]EQpuV&BnF#+.+!*U.rZh?ap&"KE5DO*%]`.j'TDf!>4Hb3nil,!Vr8I3R$]c]/~>%AI9_PrivateDataEnd